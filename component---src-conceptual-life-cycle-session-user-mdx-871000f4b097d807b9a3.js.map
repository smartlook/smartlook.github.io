{"version":3,"sources":["webpack:///../src/conceptual/life-cycle-session-user.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","kind","snippets","android","java","kotlin","ios","swift","react","js","unity","csharp","unreal","cocos","cordova","javascript","ionic","typescrit","flutter","dart","xamarin","to","visibleOn","isMDXComponent"],"mappings":"oQAQaA,G,oBAAe,S,4NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,IAAD,CAAOA,QAAQ,SAAf,6BACA,qBAAG,kBAAIC,WAAW,KAAf,oJACH,yZACA,iBAAQ,CACN,GAAM,WADR,WAGA,sFACA,gdACA,YAAC,IAAD,CAAWC,KAAK,YAAYF,QAAQ,aAApC,qJAKA,iBAAQ,CACN,GAAM,QADR,QAGA,8FACA,mGACA,oFACA,YAAC,IAAD,CAAWE,KAAK,UAAUC,SAAU,CAClCC,QAAS,CACPC,KAAM,mEAGNC,OAAQ,mEAIVC,IAAK,CACHC,MAAO,4DAGP,6EAIFC,MAAO,CACLC,GAAI,8DAINC,MAAO,CACLC,OAAQ,6EAIVC,OAAQ,CACND,OAAQ,yBAIVE,MAAO,CACLT,KAAM,mEAGNC,OAAQ,mEAIVS,QAAS,CACPC,WAAY,gFAIdC,MAAO,CACLC,UAAW,gGAIbC,QAAS,CACPC,KAAM,iEAIRC,QAAS,CACPT,OAAQ,2BAITZ,QAAQ,cACX,YAAC,IAAD,CAAWE,KAAK,OAAOF,QAAQ,aAA/B,mMAGA,YAAC,IAAD,CAAWE,KAAK,YAAYF,QAAQ,aAApC,qQAGA,uXACA,YAAC,IAAD,CAAMsB,GAAG,8CAA8CtB,QAAQ,QAA/D,qCACA,iBAAQ,CACN,GAAM,0CADR,0CAGA,0TACA,YAAC,IAAD,CAAWuB,UAAU,sBAAsBvB,QAAQ,aAAnD,8FAGA,YAAC,IAAD,CAAWE,KAAK,UAAUC,SAAU,CAClCC,QAAS,CACPC,KAAM,obAUNC,OAAQ,sXAWVC,IAAK,CACHC,MAAO,mRAQP,6ZAaFC,MAAO,CACLC,GAAI,qPASNC,MAAO,CACLC,OAAQ,iTASVC,OAAQ,CACND,OAAQ,yBAIVE,MAAO,CACLT,KAAM,obAUNC,OAAQ,sXAWVS,QAAS,CACPC,WAAY,kTAadC,MAAO,CACLC,UAAW,kZAWbC,QAAS,CACPC,KAAM,wPASRC,QAAS,CACPT,OAAQ,2BAITZ,QAAQ,cACX,kKAAiJ,0BAAYC,WAAW,KAAvB,gBAAjJ,uLACA,YAAC,IAAD,CAAMqB,GAAG,wCAAwCtB,QAAQ,QAAzD,+BA1OK,IA2OL,YAAC,IAAD,CAAWE,KAAK,YAAYF,QAAQ,aAApC,sbAGA,iBAAQ,CACN,GAAM,4CADR,4CAGA,YAAC,IAAD,CAAWE,KAAK,YAAYF,QAAQ,aAApC,uKAGA,kTACA,YAAC,IAAD,CAAMsB,GAAG,mDAAmDtB,QAAQ,QAApE,0CACA,YAAC,IAAD,CAAWE,KAAK,OAAOF,QAAQ,aAA/B,yhBAGA,iBAAQ,CACN,GAAM,+BADR,+BAGA,YAAC,IAAD,CAAWA,QAAQ,aAAnB,6NAGA,YAAC,IAAD,CAAWE,KAAK,OAAOF,QAAQ,aAA/B,0F,0NAOJH,EAAW2B,gBAAiB","file":"component---src-conceptual-life-cycle-session-user-mdx-871000f4b097d807b9a3.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/smartlook.github.io/smartlook.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Code, CodeBlock, TextBlock, Link, MD, Title } from \"components\";\nimport { usePlatforms } from 'hooks';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Title mdxType=\"Title\">Life Cycle, Session, User</Title>\n    <p><em parentName=\"p\">{`This section covers the way Smartlook automatically follows application life cycle, and introduces the concept of recording sessions and users.`}</em></p>\n    <p>{`Apart from the initial Smartlook setup when a new instance of an application starts, Smartlook follows the life cycle of the application automatically. When the application is suspended to the background, recording is paused automatically. When the application resumes to the frontend again, the recording resumes. There is no need to call API methods to achieve this basic behaviour.`}</p>\n    <h1 {...{\n      \"id\": \"session\"\n    }}>{`Session`}</h1>\n    <p>{`Sessions roughly correspond to individual application “runs”.`}</p>\n    <p>{`This does not mean, however, that each interval when the application is on screen is always recorded as a separate session. When an application is suspended to the background just for a short period of time (e.g., it is interrupted by an incoming call, notification), the original session continues when the application is resumed. If the application is closed for several minutes, a new session will start at the next application opening.`}</p>\n    <TextBlock kind=\"important\" mdxType=\"TextBlock\">\n      {`\nTo change this default behaviour, an API method that resets the session must be called when appropriate, as described later in this document.\n`}\n    </TextBlock>\n    <h1 {...{\n      \"id\": \"user\"\n    }}>{`User`}</h1>\n    <p>{`Smartlook records user interactions with the application in sessions.`}</p>\n    <p>{`Every session has a single user. A single user can have multiple sessions.`}</p>\n    <p>{`User can be uniquely identified by a respective identifier:`}</p>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\nSmartlook.setUserIdentifier(\"sample_user_identifier\");\n      `,\n        kotlin: `\nSmartlook.setUserIdentifier(\"sample_user_identifier\")\n      `\n      },\n      ios: {\n        swift: `\nSmartlook.setUserIdentifier(someInternalUserID)\n      `,\n        'objective-c': `\n[Smartlook setUserIdentifier:someInternalUserID];\n      `\n      },\n      react: {\n        js: `\nSmartlook.setUserIdentifier(\"sample_user_identifier\");\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.SetUserIdentifier(\"sample_user_identifier\");\n`\n      },\n      unreal: {\n        csharp: `\nUNREAL - C#\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.setUserIdentifier(\"sample_user_identifier\");\n      `,\n        kotlin: `\nSmartlook.setUserIdentifier(\"sample_user_identifier\")\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setUserIdentifier({identifier: \"sample_user_identifier\"});\n    `\n      },\n      ionic: {\n        typescrit: `\nsmartlook.setUserIdentifier(new SmartlookUserIdentifier(\"sample_user_identifier\"))\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.setUserIdentifier('sample_user_identifier');\n   `\n      },\n      xamarin: {\n        csharp: `\nXAMARIN - C#\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" mdxType=\"TextBlock\">{`\nThis call associates the current user with the provided id. If a user with such an id already exists in one of your Smartlook projects, the session is automatically assigned to that user.\n`}</TextBlock>\n    <TextBlock kind=\"important\" mdxType=\"TextBlock\">{`\nWhen this method is called again with a different user identifier, it does not create a new user, it changes the id of the user currently associated with the session. To “login” a new user, use the resetSession method described in the following section.\n`}</TextBlock>\n    <p>{`The application remembers the last user id and reuses it as the default user id with each new session (i.e., when the application is launched again on the device). This happens even when the user is not identified explicitly. This ensures that when the application runs again on the same device, the implicit users are by default associated together.`}</p>\n    <Link to=\"/docs/sdk/api-reference#user-identification\" mdxType=\"Link\">User identification API Reference</Link>\n    <h1 {...{\n      \"id\": \"explicit-control-of-sessions-and-users\"\n    }}>{`Explicit Control of Sessions and Users`}</h1>\n    <p>{`In some use cases it makes sense to explicitly control the session and users flow. For example, when a device with an application is shared among many users. In these cases the application should always start with a fresh session (or user). To do so, use one of the following setup option:`}</p>\n    <TextBlock visibleOn=\"react,flutter,unity\" mdxType=\"TextBlock\">{`\nSoon we will provide better setup options via builder mechanism, meanwhile please use:\n`}</TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\n// to always setup with new session\nSmartlook.SetupOptionsBuilder builder = new Smartlook.SetupOptionsBuilder(YOUR_API_KEY)\n        .startNewSession();\nSmartlook.setupAndStartRecording(builder.build());\\n\n// to start with new session and user\nSmartlook.SetupOptionsBuilder builder = new Smartlook.SetupOptionsBuilder(YOUR_API_KEY)\n        .startNewSessionAndUser();\nSmartlook.setupAndStartRecording(builder.build());\n      `,\n        kotlin: `\n// to always setup with new session\nval builder = Smartlook.SetupOptionsBuilder(YOUR_API_KEY)\n        .startNewSession()\nSmartlook.setupAndStartRecording(builder.build());\\n\n// to start with new session and user\nval builder = Smartlook.SetupOptionsBuilder(YOUR_API_KEY)\n        .startNewSessionAndUser()\nSmartlook.setupAndStartRecording(builder.build())\n      `\n      },\n      ios: {\n        swift: `\n// to always setup with new session\nSmartlook.setup(key: \"THE_API_KEY\",\n                options: [.startNewSession: true])\\\\n\n// to start with new session and user\nSmartlook.setup(key: \"THE_API_KEY\",\n                options: [.startNewSessionAndUser: true])\n      `,\n        'objective-c': `\n// to always setup with new session\n[Smartlook setupWithKey:@\"THE_API_KEY\"\n                options:@{\n                     SLSetupOptionStartNewSessionKey: @YES\n                }];\\\\n\n// to setup with new session and user\n[Smartlook setupWithKey:@THE_API_KEY\n                options:@{\n                     SLSetupOptionStartNewSessionAndResetUserKey: @YES\n                }];\n      `\n      },\n      react: {\n        js: `\n// to always setup with new session\nSmartlook.setupAndStartRecording(YOUR_API_KEY);\nSmartlook.resetSession(false);\\n\n// to start with new session and user\nSmartlook.setupAndStartRecording(YOUR_API_KEY);\nSmartlook.resetSession(true);\n`\n      },\n      unity: {\n        csharp: `\n// to always setup with new session\nSmartlookUnity.Smartlook.SetupAndStartRecording(YOUR_API_KEY);\nSmartlookUnity.Smartlook.ResetSession(false);\\n\n// to start with new session and user\nSmartlookUnity.Smartlook.SetupAndStartRecording(YOUR_API_KEY);\nSmartlookUnity.Smartlook.ResetSession(true);\n`\n      },\n      unreal: {\n        csharp: `\nUNREAL - C#\n      `\n      },\n      cocos: {\n        java: `\n// to always setup with new session\nSmartlook.SetupOptionsBuilder builder = new Smartlook.SetupOptionsBuilder(YOUR_API_KEY)\n        .startNewSession();\nSmartlook.setupAndStartRecording(builder.build());\\n\n// to start with new session and user\nSmartlook.SetupOptionsBuilder builder = new Smartlook.SetupOptionsBuilder(YOUR_API_KEY)\n        .startNewSessionAndUser();\nSmartlook.setupAndStartRecording(builder.build());\n      `,\n        kotlin: `\n// to always setup with new session\nval builder = Smartlook.SetupOptionsBuilder(YOUR_API_KEY)\n        .startNewSession()\nSmartlook.setupAndStartRecording(builder.build());\\n\n// to start with new session and user\nval builder = Smartlook.SetupOptionsBuilder(YOUR_API_KEY)\n        .startNewSessionAndUser()\nSmartlook.setupAndStartRecording(builder.build())\n      `\n      },\n      cordova: {\n        javascript: `\n// to always setup with new session\nSmartlook.setupAndStartRecording({\n  smartlookAPIKey: \"YOUR_API_KEY\",\n  startNewSession: true\n});\\n\n// to always setup with new session and user\nSmartlook.setupAndStartRecording({\n  smartlookAPIKey: \"YOUR_API_KEY\",\n  startNewSessionAndUser: true\n});\n    `\n      },\n      ionic: {\n        typescrit: `\n// to always setup with new session\nvar builder = new SmartlookSetupConfigBuilder(YOUR_API_KEY)\n        .startNewSession(true);\\n\nSmartlook.setupAndStartRecording(builder.build());\\n\n// to always setup with new session and user\nvar builder = new SmartlookSetupConfigBuilder(YOUR_API_KEY)\n        .startNewSessionAnduser(true);\\n\nSmartlook.setupAndStartRecording(builder.build());\\n\n      `\n      },\n      flutter: {\n        dart: `\n// to always setup with new session\nSmartlook.setupAndStartRecording(YOUR_API_KEY);\nSmartlook.resetSession(false);\\n\n// to start with new session and user\nSmartlook.setupAndStartRecording(YOUR_API_KEY);\nSmartlook.resetSession(true);\n   `\n      },\n      xamarin: {\n        csharp: `\nXAMARIN - C#\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`When it is desired to start a new session, or login a new user while the application is running, it is also possible by using a dediceted `}<inlineCode parentName=\"p\">{`resetSession`}</inlineCode>{` method. This method takes one paramter, the indicates, whether the user identity should be also reset, or whether the new session should retain the user from the current session:`}</p>\n    <Link to=\"/docs/sdk/api-reference#reset-session\" mdxType=\"Link\">Reset Session API reference</Link>.\n    <TextBlock kind=\"important\" mdxType=\"TextBlock\">{`\nIt is not recommended to call this method when the application is being closed. Smartlook is busy with cleaning up when the application is going to background, and calling this method may create ephemeral sessions as an unwanted consequence. If it is prefered that sessions do not continue with the next application launch under any circumstances, the setup resetSession options when initializing Smartlook should be used instead.\n`}</TextBlock>\n    <h1 {...{\n      \"id\": \"explicit-recording-stopping-and-starting\"\n    }}>{`Explicit Recording Stopping and Starting`}</h1>\n    <TextBlock kind=\"important\" mdxType=\"TextBlock\">\n**Smartlook follows the application life cycle automatically** and it is not necessary, under normal circumstances, to stop and restart recording programmatically.\n    </TextBlock>\n    <p>{`However, in situations when it is practical to record just a small part of the application, it is still possible to stop and start recording programmatically. Smartlook API has methods to stop and start the recording, as well as a property that returns the current recording state.`}</p>\n    <Link to=\"/docs/sdk/api-reference#start-and-stop-recording\" mdxType=\"Link\">Start and Stop Recording API reference</Link>\n    <TextBlock kind=\"note\" mdxType=\"TextBlock\">{`\nWhen the recording is controlled programmatically this way, the time the user spends in the rest of the application is not visible on the timeline. Thus, for just a short recording interruption (e.g., when the user fills in some form full of sensitive data), consider switching to some combination of rendering and event tracking modes. This way, the time the user spents incognito is visible on the timeline. More about this can be found in <Link to=\"/docs/sdk/conceptual/handling-sensitive-data\">Handling Sensitive Data</Link>.\n`}</TextBlock>\n    <h1 {...{\n      \"id\": \"session-and-user-properties\"\n    }}>{`Session and User properties`}</h1>\n    <TextBlock mdxType=\"TextBlock\">{`\nIn many cases, it is convenient to associate some custom properties to the current session and user. Details could be found in the respective <Link to=\"/docs/sdk/api-reference#user-properties\">API Reference</Link>\n`}</TextBlock>\n    <TextBlock kind=\"note\" mdxType=\"TextBlock\">{`\nCurrently, only string values are accepted both as property keys and values.\n`}</TextBlock>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}