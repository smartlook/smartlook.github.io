(window.webpackJsonp=window.webpackJsonp||[]).push([[4],{"7rZD":function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return y})),t.d(n,"default",(function(){return O}));var o=t("Fcif"),i=t("+I+c"),r=(t("mXGw"),t("/FXl")),a=t("TjRS"),s=t("+8zC"),l=(t("NRsk"),t("M3dY"),t("WSky"),t("6A44"),t("RO6Q"),t("+r1g"),t("Vx+j"),t("OAwW")),d=t.n(l),c=t("euJJ"),p=t.n(c),m=t("l8O+"),k=t.n(m),u=t("aHnA"),b=t.n(u),v=t("iUxD"),g=t.n(v),S=(t("aD51"),["components"]),y={};void 0!==y&&y&&y===Object(y)&&Object.isExtensible(y)&&!Object.prototype.hasOwnProperty.call(y,"__filemeta")&&Object.defineProperty(y,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/api_reference.mdx"}});var h={_frontmatter:y},T=a.a;function O(e){var n=e.components,t=Object(i.a)(e,S);return Object(r.b)(T,Object(o.a)({},h,t,{components:n,mdxType:"MDXLayout"}),Object(r.b)("h1",{id:"lifecycle--recording"},"Lifecycle & Recording"),Object(r.b)(s.k,{visibleOn:"unreal",mdxType:"TextBlock"},"\nSmartlook Unreal Engine 4 SDK uses UE4's built in Analytics APIs. Because of this, some APIs available on Smartlook SDKs for other platforms are not available on UE4 SDK. You can learn more about UE4 Analytics APIs here:\n* [UE4 Blueprint Analytics API Reference](https://docs.unrealengine.com/en-US/BlueprintAPI/Analytics/index.html)\n* [UE4 C++ Analytics API Reference](https://docs.unrealengine.com/en-US/API/Runtime/Analytics/Interfaces/IAnalyticsProvider/index.html)\n"),Object(r.b)("h2",{id:"sdk-setup-on-application-start"},"SDK setup (on application start)"),Object(r.b)(s.k,{invisibleOn:"unreal",mdxType:"TextBlock"},"\nSmartlook SDK **setup** needs to be called only **once during an applicationâ€™s lifetime** and it should be called **on application startup**. There is **no need to stop** recording explicitly **on application closure**, SDK will stop itself automatically.\n"),Object(r.b)(s.k,{visibleOn:"android",mdxType:"TextBlock"},"\nThe best place to setup the SDK is in `onCreate()` method of your `Application` class:\n"),Object(r.b)(s.k,{visibleOn:"cocos",mdxType:"TextBlock"},"\nThe best place to setup the SDK is in `onCreate()` method of your `AppActivity` class:\n"),Object(r.b)(s.k,{visibleOn:"cordova",mdxType:"TextBlock"},"\nThe best place to setup the SDK is in [deviceready](https://cordova.apache.org/docs/en/5.1.1/cordova/events/events.deviceready.html) callback:\n"),Object(r.b)(s.k,{visibleOn:"ionic",mdxType:"TextBlock"},"\nThe best place to setup the SDK is in [platform ready](https://ionicframework.com/docs/v3/api/platform/Platform/#ready) callback:\n"),Object(r.b)(s.k,{visibleOn:"ios",mdxType:"TextBlock"},"\nThe best place to setup the SDK is in `didFinishLaunchingWithOptions` method of the `ApplicationDelegate`:\n"),Object(r.b)(s.k,{visibleOn:"xamarin",mdxType:"TextBlock"},"\nThe best place to setup the SDK is in `didFinishLaunchingWithOptions` method of the `ApplicationDelegate` on **iOS** and in `onCreate()` method of your `Application` class on Android:\n"),Object(r.b)(s.k,{visibleOn:"unreal",mdxType:"TextBlock"},"\nSDK is configured automatically by enabling Smartlook Plugin in Plugin settings:\n"),Object(r.b)(s.d,{visibleOn:"unreal",src:b.a,width:"100%",mdxType:"Image"}),Object(r.b)(s.c,{kind:"example",snippets:{android:{java:"\nimport android.app.Application;\n\npublic class MyCustomApplication extends Application {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Smartlook.setupAndStartRecording(API_KEY);\n    }\n}\n      ",kotlin:"\nimport android.app.Application;\n\nclass MyCustomApplication : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        Smartlook.setupAndStartRecording(API_KEY)\n    }\n}\n      "},cordova:{javascript:'\nif(document.readyState === "complete") {\n  document.addEventListener("deviceready", onDeviceReady, false);\n}\n\nfunction onDeviceReady() {\n    Smartlook.setupAndStartRecording({smartlookAPIKey: "API_KEY"});\n}\n      '},ionic:{typescript:'\nthis.platform.ready().then(() => {\n  var setupConfig = new SmartlookSetupConfigBuilder("API_KEY");\n  this.smartlook.setupAndStartRecording(setupConfig.build());\n}\n      '},ios:{swift:'\nimport Smartlook\n\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n  let smartlookConfig = Smartlook.SetupConfiguration(key: "API_KEY")\n  Smartlook.setupAndStartRecording(configuration: smartlookConfig)\n  // other initialization stuff\n  return true\n}\n      ',"objective-c":'\n#import <Smartlook/Smartlook.h>\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  SLSetupConfiguration *slConfig = [[SLSetupConfiguration alloc] initWithKey:@"API_KEY"];\n  [Smartlook setupAndStartRecordingWithConfiguration:slConfig];\n  // other initialization stuff\n  return YES;\n}\n      '},flutter:{dart:"\nimport 'package:smartlook/smartlook.dart';\n\n\nclass _MyAppState extends State<MyApp> {\n  @override\n  void initState() {\n    super.initState();\n    ...\n    SetupOptions options = (\n      new SetupOptionsBuilder('API_KEY')\n      ).build();\n    Smartlook.setupAndStartRecording(options);\n    ...\n    }\n}\n"},unity:{csharp:'\npublic class NewBehaviourScript : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n        SmartlookUnity.SetupOptionsBuilder builder = new SmartlookUnity.SetupOptionsBuilder("API_KEY");\n        SmartlookUnity.Smartlook.SetupAndStartRecording(builder.Build());\n    }\n\n\n    // Update is called once per frame\n    void Update()\n    {\n        ...\n    }\n}\n'},react:{typescript:"\nimport Smartlook from 'smartlook-react-native-wrapper';\nSmartlook.setupAndStartRecording(\"API_KEY\");\n"},cocos:{java:"\npublic class AppActivity extends Cocos2dxActivity {\n    @Override\n    public void onCreate() {\n        ...\n        // DO OTHER INITIALIZATION BELOW\n        Smartlook.setupAndStartRecording(API_KEY);\n    }\n}\n      ",kotlin:"\nclass AppActivity : Cocos2dxActivity() {\n    override fun onCreate() {\n        ...\n        // DO OTHER INITIALIZATION BELOW\n        Smartlook.setupAndStartRecording(API_KEY)\n    }\n}\n      "},xamarin:{csharp:'\nusing Smartlook;\n...\nSmartlook.Analytics.SetupAndStart("API_KEY");\n      '}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{kind:"note",visibleOn:"android",mdxType:"TextBlock"},"\nSDK can be set up later than in Application class, typically when the Application is fetching an API key, please take a look [here](/docs/sdk/cookbooks/android-setup-outside-application-class).\n"),Object(r.b)(s.k,{visibleOn:"android,cordova,ionic,flutter,unity,react,xamarin,ios",mdxType:"TextBlock"},"\nThe easiest way of setting up the SDK is with `setupAndStartRecording()` method:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.setupAndStartRecording(@NotNull String apiKey);\n      ",kotlin:"\nSmartlook.setupAndStartRecording(@NotNull apiKey: String)\n      "},cordova:{javascript:"\nSmartlook.setupAndStartRecording({smartlookAPIKey: string});\n      "},ionic:{typescript:'\n  var setupConfig = new SmartlookSetupConfigBuilder("API_KEY");\n  this.smartlook.setupAndStartRecording(setupConfig.build());\n      '},flutter:{dart:"\nSmartlook.setupAndStartRecording(SetupOptions options);\n      "},unity:{csharp:"\nSmartlookUnity.Smartlook.SetupAndStartRecording(string apiKey);\n      "},react:{typescript:"\nSmartlook.setupAndStartRecording(optionsOrAPIKey: Smartlook.SetupOptions | string) ;\n    "},xamarin:{csharp:"\nstatic public void SetupAndStart(string key, SetupOptions options = new SetupOptions())"},ios:{swift:"\nclass func Smartlook.setupAndStartRecording(configuration: Smartlook.SetupConfiguration)\n      ","objective-c":"\n+ (void)setupWithConfiguration:(nonnull SLSetupConfiguration *)configuration;\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"android,cordova,ionic,flutter,unity,react,xamarin,ios",mdxType:"TextBlock"},"\nIt will set the SDK up and also start the recording. SDK can be setup without starting the recording using the following:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.setup(@NotNull String apiKey);\n      ",kotlin:"\nSmartlook.setup(@NotNull apiKey: String)\n      "},cordova:{javascript:"\nSmartlook.setup({smartlookAPIKey: string});\n      "},ionic:{typescript:'\n  var setupConfig = new SmartlookSetupConfigBuilder("API_KEY");\n  this.smartlook.setup(setupConfig.build());\n      '},ios:{swift:"\nclass func Smartlook.setup(configuration: Smartlook.SetupConfiguration)\n      ","objective-c":"\n+ (void)setupWithConfiguration:(nonnull SLSetupConfiguration *)configuration;\n      "},flutter:{dart:"\nSmartlook.setup(SetupOptions options);\n"},unity:{csharp:"\nSmartlookUnity.Smartlook.Setup(string apiKey);\n"},react:{typescript:"\nSmartlook.setup(optionsOrAPIKey: Smartlook.SetupOptions | string);\n"},xamarin:{csharp:"\nstatic public void Setup(string key, SetupOptions options = new SetupOptions())"}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{kind:"note",visibleOn:"android",mdxType:"TextBlock"},"\nSmartlook SDK needs to be initialized with an API key that can be acquired in the Smartlook Dashboard.\n"),Object(r.b)(s.k,{invisibleOn:"unreal",mdxType:"TextBlock"},"\nAnd then the recording can be started by calling:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.startRecording();\n      ",kotlin:"\nSmartlook.startRecording()\n      "},cocos:{java:"\nSmartlook.startRecording();\n      "},cordova:{javascript:"\nSmartlook.startRecording();\n      "},ionic:{typescript:"\nsmartlook.startRecording();\n      "},ios:{swift:"\nclass func startRecording()\n      ","objective-c":"\n+ (void)startRecording;\n"},flutter:{dart:"\nSmartlook.startRecording();\n"},unity:{csharp:"\nSmartlookUnity.Smartlook.StartRecording();\n"},react:{typescript:"\nSmartlook.startRecording();\n"},xamarin:{csharp:"\npublic static void StartRecording()\n      "}},mdxType:"CodeBlock"}),Object(r.b)("h3",{id:"setup-configuration"},"Setup configuration"),Object(r.b)(s.k,{visibleOn:"unreal",mdxType:"TextBlock"},'\nYou can start recording automatically by ticking the `Start Recording` option in Smartlook plugin settings. You can also provide the desired <Link to="/docs/sdk/conceptual/screen-recording-quality" platform="unreal">framerate</Link>:\n'),Object(r.b)(s.d,{visibleOn:"unreal",src:g.a,width:"100%",mdxType:"Image"}),Object(r.b)(s.k,{visibleOn:"ios,android,cordova,ionic,react,flutter,cocos,xamarin",mdxType:"TextBlock"},"\nSome recording parameters can be configured on setup:\n"),Object(r.b)(s.k,{visibleOn:"android",mdxType:"TextBlock"},'\n| Parameter                                    | Required | Description                                                                                                                                        | Default value                   |\n|----------------------------------------------|----------|----------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------|\n| apiKey                                       | yes      | Unique 40-character key identifying your app (can be found in the dashboard).                                                                      | ""                              |\n| fps                                          | no       | Recorded video frame rate (allowed values between 2 and 10). Note that by setting this value settings from the dashboard will be overridden!       | 2                               |\n| experimental                                 | no       | If set to true it enables some experimental features such as TextureView/Maps/MapBox recording, etc.                                               | false                           |\n| activity                                     | no       | Actual activity reference is required when setting the SDK outside of the Application class.                                                       | null                            |\n| [renderingMode](#rendering)                  | no       | Defines the way SDK is going to capture screen image data.                                                                                         | RenderingMode.NATIVE            |\n| [renderingModeOption](#rendering)            | no       | Further customization of the rendering mode.                                                                                                       | null                            |\n| [eventTrackingModes](#event-tracking-modes)  | no       | Event tracking modes can be used to disable some automatically detected events.                                                                    | EventTrackingMode.FULL_TRACKING |\n| useAdaptiveFramerate                         | no       | Adaptive frame rate is an optimization that keeps the SDK from capturing redundant screenshots when the application is idle.                       | true                            |\n'),Object(r.b)(s.k,{visibleOn:"ios",mdxType:"TextBlock"},'\nSmartlook can be setup using and instance of `SetupConfiguration` object. The object has a mandatory `apiKey` property, other property values are optional.\n\nSome of the parameters could be also set in your project settings in Smartlook portal. It is advisible to use the projects settings when available there and use this setup configuration for testing and evaluating only.\n\n\n| Property                                    | Type                   | Default value | Description\n|---------------------------------------------|------------------------|---------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| apiKey                                      | string                 | -             | The API key of the project. Set it in the object `init(key:)` initializator.                                                                                                                                                                     |\n| framerate                                   | int                    | 2             | Recorded video frame rate (allowed values between 2 and 10). Note that by setting this value settings from the dashboard will be overridden!                                                                                                       |\n| useAdaptiveFramerate                        | bool                   | true          | By default, Smartlook adapts its recording framerate to the frequency of UI changes in order to lower its footprint in app performace. For details, see <Link to="/docs/sdk/conceptual/screen-recording-quality">Screen Recording Quality</Link>. |\n| [renderingMode](#rendering)                 | RenderingMode          | native        | Define the way SDK is going to capture screen image data.                                                                                                                                                                                          |\n| [renderingModeOption](#rendering)           | RenderingModeOption    | none          | Further customize the rendering mode.                                                                                                                                                                                                              |\n| [eventTrackingModes](#event-tracking-modes) | [EventTrackingMode]    | full tracking | Sets which types of events are tracking by Smartlook                                                                                                                                                                                               |\n| resetSession                                | bool                   | false         | Start recording with new session                                                                                                                                                                                                                   |\n| resetSessionAndUser                         | bool                   | false         | Start nrecording with new session and reset user                                                                                                                                                                                                   |\n| [enableIntegrations](#integrations)         | [Integration]          | -             | Array of enabled 3rd party integrations.                                                                                                                                                                                                           |\n'),Object(r.b)(s.k,{visibleOn:"cordova",mdxType:"TextBlock"},'\n| Parameter                                   | Required | Description                                                                                                                                  | Default value                     |\n|---------------------------------------------|----------|----------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------|\n| apiKey                                      | yes      | Unique 40-character key identifying your app (can be found in the dashboard).                                                                | ""                                |\n| fps                                         | no       | Recorded video frame rate (allowed values between 2 and 10). Note that by setting this value settings from the dashboard will be overridden! | 2                                 |\n| [renderingMode](#rendering)                 | no       | Defines the way SDK is going to capture screen image data.                                                                                   | RenderingMode.NATIVE              |\n| startNewSession                             | no       | Set this to true to force start of new session on setup.                                                                                     | false                             |\n| startNewSessionAndUser                      | no       | Set this to true to force start of new session and create new visitor on setup.                                                              | false                             |\n| [eventTrackingModes](#event-tracking-modes) | no       | Event tracking modes can be used to disable some automatically detected events.                                                              | [EventTrackingMode.FULL_TRACKING] |\n'),Object(r.b)(s.k,{visibleOn:"ionic",mdxType:"TextBlock"},'\n| Parameter                                   | Required | Description                                                                                                                                            | Default value                       |\n|---------------------------------------------|----------|--------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------|\n| apiKey                                      | yes      | Unique 40-character key identifying your app (can be found in the dashboard).                                                                          | ""                                  |\n| fps                                         | no       | Recorded video frame rate (allowed values between 2 and 10). Note that by setting this value settings from the dashboard will be overridden!           | 2                                   |\n| [renderingMode](#rendering)                 | no       | Define the way SDK is going to capture screen image data.                                                                                              | SmartlookRenderingMode.NATIVE       |\n| startNewSession                             | no       | If set to true SDK forces start of new session on setup.                                                                                               | false                               |\n| startNewSessionAndUser                      | no       | If set to true SDK forces start of new session and creates new visitor on setup.                                                                       | false                               | \n| [eventTrackingModes](#event-tracking-modes) | no       | Event tracking modes can be used to disable some automatically detected events.                                                                        | [EventTrackingMode.FULL_TRACKING()] |\n'),Object(r.b)(s.k,{visibleOn:"flutter,react,unity",mdxType:"TextBlock"},'\n| Parameter              | Required | Description                                                                                                                                            | Default value        |\n|------------------------|----------|--------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|\n| apiKey                 | yes      | Unique 40-character key identifying your app (can be found in the dashboard).                                                                          | ""                   |\n| fps                    | no       | Recorded video frame rate (allowed values between 2 and 10). Note that by setting this value settings from the dashboard will be overridden!           | 2                    |\n| startNewSession        | no       | If set to true SDK forces start of new session on setup.                                                                                               | false                |\n| startNewSessionAndUser | no       | If set to true SDK forces start of new session and creates new visitor on setup.                                                                       | false                |\n'),Object(r.b)(s.k,{visibleOn:"cocos",mdxType:"TextBlock"},'\n| Parameter              | Required | Description                                                                                                                                            | Default value        |\n|------------------------|----------|--------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|\n| apiKey                 | yes      | Unique 40-character key identifying your app (can be found in the dashboard).                                                                          | ""                   |\n| fps                    | no       | Recorded video frame rate (allowed values between 2 and 10). Note that by setting this value settings from the dashboard will be overridden!           | 2                    |\n'),Object(r.b)(s.k,{visibleOn:"xamarin",mdxType:"TextBlock"},"All setup options are optional and can be set using properties of an instance of `SetupOptions` class."),Object(r.b)(s.k,{visibleOn:"xamarin",mdxType:"TextBlock"},'\n| Parameter                                   | Type                   | Default value | Description                                                                                                                                 \n|---------------------------------------------|------------------------|---------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| EnableCrashlytics                           | bool                   | false         | Enables Firebase Crashlytics integration                                                                                                                                                                                                  |\n| Framerate                                   | int                    | 2             | Recorded video frame rate (allowed values between 2 and 10). Note that by setting this value settings from the dashboard will be overridden!                                                                                              |\n| UseAdaptiveFramerate                        | bool                   | true          | By defaults, Smartlook adapts its recording framerate to the frequency of UI changes in order to lower its footprint in app performace. For details, see <Link to="/docs/sdk/conceptual/screen-recording-quality">Screen Recording Quality</Link>. |\n| [RenderingMode](#rendering)                 | RenderingMode          | native        | Define the way SDK is going to capture screen image data.                                                                                                                                                                                 |\n| [RenderingModeOption](#rendering)           | RenderingModeOption    | none          | Further customize the rendering mode.                                                                                                                                                                                                     |\n| [EventTrackingModes](#event-tracking-modes) | EventTrackingMode      | all events    | Event tracking modes can be used to disable some automatically detected events.                                                                                                                                                           |\n| StartNewSession                             | bool                   | false         | Always start new session with Smartlook setup.                                                                                                                                                                                            |\n| StartNewSessionAndResetUser                 | bool                   | false         | Always start new session and reset user woth Smartlook setup.                                                                                                                                                                             |\n'),Object(r.b)(s.c,{snippets:{xamarin:{csharp:"\npublic struct SetupOptions\n{\n  public int? Framerate;\n  public bool? EnableCrashlytics;\n  public RenderingMode? RenderingMode;\n  public RenderingModeOption? RenderingModeOption;\n  public EventTrackingMode? EventTrackingMode;\n  public bool? StartNewSession;\n  public bool? StartNewSessionAndResetUser;\n}"}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{kind:"example",visibleOn:"android",mdxType:"TextBlock"},"\nFull SDK setup configuration can be done with `SetupOptionsBuilder`, that provides methods for setting any of the setup parameters shown above.\n<CodeBlock\n  snippets={{\n    android: {\n      java: `\nSmartlook.SetupOptionsBuilder builder = new Smartlook.SetupOptionsBuilder(@NotNull String apiKey)\n        .setFps(int fps)\n        .setExperimental(boolean experimental)\n        .useAdaptiveFramerate(boolean enabled)\n        .setActivity(@NonNull Activity activity)\n        .setRenderingMode(RenderingMode renderingMode)\n        .setRenderingMode(RenderingModeOption renderingModeOption)\n        .setEventTrackingModes(List<EventTrackingMode> eventTrackingMode);\\n\nSmartlook.setupAndStartRecording(builder.build());\n      `,\n      kotlin: `\nval builder = Smartlook.SetupOptionsBuilder(@NotNull apiKey: String)\n        .setFps(fps: Int)\n        .setExperimental(experimental: Boolean)\n        .useAdaptiveFramerate(enabled: Boolean)\n        .setActivity(@NonNull activity: Activity)\n        .setRenderingMode(renderingMode: RenderingMode)\n        .setRenderingMode(renderingModeOption: RenderingModeOption)\n        .setEventTrackingModes(eventTrackingModes: List<EventTrackingMode>)\\n\nSmartlook.setupAndStartRecording(builder.build())\n      `,\n    },\n  }}\n/>\n\n\nLast line can be replaced with `Smartlook.setup(builder.build())` so the recording can be started later.\n"),Object(r.b)(s.k,{kind:"example",visibleOn:"cocos",mdxType:"TextBlock"},"\nFull SDK setup configuration can be done with `SetupOptionsBuilder`, that provides methods for settting any of the setup parameters shown above.\n<CodeBlock\n  snippets={{\n    cocos: {\n      java: `\nSmartlook.SetupOptionsBuilder builder = new Smartlook.SetupOptionsBuilder(@NotNull String apiKey)\n        .setFps(int fps);\\n\nSmartlook.setupAndStartRecording(builder.build());\n      `,\n      kotlin: `\nval builder = Smartlook.SetupOptionsBuilder(@NotNull apiKey: String)\n        .setFps(fps: Int);\\n\nSmartlook.setupAndStartRecording(builder.build())\n      `,\n    },\n  }}\n/>\n"),Object(r.b)(s.k,{visibleOn:"unity",mdxType:"TextBlock"},"\nFull SDK setup configuration can be done with optional `fps` method parameter.\n"),Object(r.b)(s.c,{snippets:{unity:{csharp:'\nSmartlookUnity.SetupOptionsBuilder builder = new SmartlookUnity.SetupOptionsBuilder("API_KEY");\nbuilder.\n  .SetFps(2)\n  .SetStartNewSession(true);\nSmartlookUnity.Smartlook.SetupAndStartRecording(builder.Build());\n'}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"flutter",mdxType:"TextBlock"},"\nFull SDK setup configuration can be done with optional `fps` method parameter.\n"),Object(r.b)(s.c,{snippets:{flutter:{dart:"\nSetupOptions options = (\n  new SetupOptionsBuilder('API_KEY')\n    ..Fps = 2\n    ..StartNewSession = true\n  ).build();\nSmartlook.setupAndStartRecording(options);\n"}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"react",mdxType:"TextBlock"},"\nFull SDK setup configuration can be done with optional `fps` method parameter.\n"),Object(r.b)(s.c,{snippets:{react:{typescript:"\nSmartlook.setupAndStartRecording({ smartlookAPIKey: token, fps: 2, startNewSessionAndUser: true });\n"}},mdxType:"CodeBlock"}),Object(r.b)(s.c,{kind:"example",snippets:{cordova:{javascript:'\nSmartlook.setup({\n  smartlookAPIKey: "API_KEY",\n  fps: 2,\n  renderingMode: Smartlook.RenderingMode.NATIVE,\n  startNewSession: true,\n  eventTrackingModes: [EventTrackingMode.FULL_TRACKING]\n});\n\nSmartlook.setupAndStartRecording({\n  smartlookAPIKey: "API_KEY",\n  fps: 2,\n  renderingMode: Smartlook.RenderingMode.NATIVE,\n  startNewSessionAndUser: true,\n  eventTrackingModes: [EventTrackingMode.FULL_TRACKING]\n});\n      '}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{kind:"example",visibleOn:"ionic",mdxType:"TextBlock"},"\nFull SDK setup configuration can be done with `SmartlookSetupConfigBuilder`, that provides methods for setting any of the setup parameters shown above.\n<CodeBlock\n  snippets={{\n    ionic: {\n      typescript: `\nvar builder = new SmartlookSetupConfigBuilder(smartlookAPIKey: string)\n        .fps(fps: number)\n        .renderingMode(renderingMode: SmartlookRenderingMode)\n        .startNewSession(startNewSession: boolean)\n        .startNewSessionAndUser(startNewSessionAndUser: boolean)\n        .eventTrackingModes(eventTrackingModes: SmartlookEventTrackingModes);\\n\nSmartlook.setupAndStartRecording(builder.build());\n      `,\n    },\n  }}\n/>\n\n\nLast line can be replaced with `Smartlook.setup(builder.build())` so the recording can be started later.\n"),Object(r.b)("h2",{id:"start-and-stop-recording"},"Start and stop recording"),Object(r.b)("p",null,"Recording can be ",Object(r.b)("strong",{parentName:"p"},"started")," or ",Object(r.b)("strong",{parentName:"p"},"stopped")," at any time, the only requirement is that the SDK is set up."),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.startRecording();\nSmartlook.stopRecording();\n      ",kotlin:"\nSmartlook.startRecording()\nSmartlook.stopRecording()\n      "},cocos:{java:"\nSmartlook.startRecording();\nSmartlook.stopRecording();\n      ",kotlin:"\nSmartlook.startRecording()\nSmartlook.stopRecording()\n      "},cordova:{javascript:"\nSmartlook.startRecording();\nSmartlook.stopRecording();\n      "},ionic:{typescript:"\nsmartlook.startRecording();\nsmartlook.stopRecording();\n      "},ios:{swift:"\nclass func startRecording()\nclass func stopRecording()\n","objective-c":"\n+ (void)startRecording;\n+ (void)stopRecording;\n      "},flutter:{dart:"\nSmartlook.startRecording();\nSmartlook.stopRecording();\n"},unity:{csharp:"\nSmartlookUnity.Smartlook.StartRecording();\nSmartlookUnity.Smartlook.StopRecording();\n"},react:{typescript:"\nSmartlook.startRecording();\nSmartlook.stopRecording();\n"},xamarin:{csharp:"\npublic static void StartRecording()\npublic static void StopRecording()\n"}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"unreal",mdxType:"TextBlock"},"\nBlueprint:\n"),Object(r.b)(s.d,{visibleOn:"unreal",src:d.a,width:"381px",mdxType:"Image"}),Object(r.b)(s.k,{visibleOn:"unreal",mdxType:"TextBlock"},"\nC++:\n"),Object(r.b)(s.c,{snippets:{unreal:{cpp:'\n#include "Runtime/Analytics/Analytics/Public/Analytics.h"\n#include "Runtime/Analytics/Analytics/Public/Interfaces/IAnalyticsProvider.h"\n\nFAnalytics::Get().GetDefaultConfiguredProvider()->StartSession());\nFAnalytics::Get().GetDefaultConfiguredProvider()->EndSession());\n'}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{invisibleOn:"unreal",kind:"note",mdxType:"TextBlock"},"\n`stopRecording()` **doesn't need to be called** on application closure. **Recording is stopped automatically**.\n"),Object(r.b)(s.k,{visibleOn:"unreal",kind:"note",mdxType:"TextBlock"},"\n`EndSession()` **doesn't need to be called** on application closure. **Recording is stopped automatically**.\n"),Object(r.b)("h2",{id:"check-if-sdk-is-recording"},"Check if SDK is recording"),Object(r.b)(s.k,{visibleOn:"unreal",mdxType:"TextBlock"},"\nCurrently not supported by the SDK.\n"),Object(r.b)(s.k,{invisibleOn:"unreal",mdxType:"TextBlock"},"\nCheck if SDK is currently recording can be handy when using `startRecording()` and `stopRecording()` methods. Simply call:\n"),Object(r.b)(s.k,{invisibleOn:"unreal",mdxType:"TextBlock"},"\nCheck if SDK is currently recording can be handy when using `startRecording()` and `stopRecording()` methods. Simply call:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.isRecording();\n      ",kotlin:"\nSmartlook.isRecording()\n      "},cocos:{java:"\nSmartlook.isRecording();\n      ",kotlin:"\nSmartlook.isRecording()\n      "},cordova:{typescript:"\nSmartlook.isRecording(isRecording: function(isRecording: string))\n      "},ionic:{typescript:"\nsmartlook.isRecording(): promise<boolean>;\n      "},ios:{swift:"\nclass func isRecording() -> Bool\n","objective-c":"\n+ (BOOL)isRecording;\n      "},flutter:{dart:"\nSmartlook.isRecording();\n"},unity:{csharp:"\nSmartlookUnity.Smartlook.IsRecording();\n"},react:{typescript:"\nSmartlook.isRecording(): Promise<boolean>;\n"},xamarin:{csharp:"\npublic static bool IsRecording\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.c,{kind:"example",snippets:{cordova:{javascript:"\nSmartlook.isRecording(\n    function(isRecording){\n        //check here\n    }\n)\n      "},ionic:{typescript:"\nsmartlook.isRecording().then((isRecording) => {\n  alert(isRecording)\n});\n      "},react:{typescript:"\nSmartlook.isRecording().then((isRecording: boolean) => {\n  alert(isRecording);\n});\n"}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"ios,android,cocos,xamarin,react",mdxType:"TextBlock"},"\n## Reset session\nCurrent session can be ended and a new session created by calling:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.resetSession(boolean resetUser);\n      ",kotlin:"\nSmartlook.resetSession(resetUser: Boolean)\n      "},cocos:{java:"\nSmartlook.resetSession(boolean resetUser);\n      ",kotlin:"\nSmartlook.resetSession(resetUser: Boolean)\n      "},xamarin:{csharp:"\npublic static void ResetSession(bool resetUser = false)\n      "},react:{typescript:"\nSmartlook.resetSession(resetUser: boolean);\n      "},ios:{swift:"\nclass func resetSession(resetUser: Bool)\n","objective-c":"\n+ (void)resetSessionAndUser:(BOOL)resetUser\n    "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"android,cocos,xamarin,react,ios",mdxType:"TextBlock"},"\nIf `resetUser` is set to `true`, SDK will create a new visitor during the reset. This is especially beneficial when a new user needs to be identified (typically after logout).\n\nA new session can be created on SDK setup:\n"),Object(r.b)(s.c,{kind:"example",snippets:{android:{java:"\nSmartlook.SetupOptionsBuilder builder = new Smartlook.SetupOptionsBuilder(API_KEY)\n        .startNewSession();\n\nSmartlook.setupAndStartRecording(builder.build());\n      ",kotlin:"\nval builder = Smartlook.SetupOptionsBuilder(API_KEY)\n        .startNewSession()\n\nSmartlook.setupAndStartRecording(builder.build())\n      "},cocos:{java:"\nSmartlook.SetupOptionsBuilder builder = new Smartlook.SetupOptionsBuilder(API_KEY)\n        .startNewSession();\n\nSmartlook.setupAndStartRecording(builder.build());\n      ",kotlin:"\nval builder = Smartlook.SetupOptionsBuilder(API_KEY)\n        .startNewSession()\n\nSmartlook.setupAndStartRecording(builder.build())\n      "},xamarin:{csharp:"\nAnalytics.SetupOptions smartlookSetupOptions = new Analytics.SetupOptions(startNewSession: true);\nSmartlook.Analytics.Setup(API_KEY, smartlookSetupOptions);\n"},ios:{swift:'\nlet setupConfig = Smartlook.SetupConfiguration(key: "API_KEY")\nsetupConfig.resetSession = true         // to reset just the session\nsetupConfig.resetSessionAndUser = true  // alternatively, to reset user and implicitly the session, too\nSmartlook.setupAndStartRecording(configuration: setupConfig)\n',"objective-c":'\nSLSetupConfiguration *slConfig = [[SLSetupConfiguration alloc] initWithKey:@"API_KEY"];\nslConfig.resetSession = YES;         // to reset just the session\nslConfig.resetSessionAndUser = YES;  // alternatively, to reset user and implicitly the session, too\n[Smartlook setupAndStartRecordingWithConfiguration:slConfig];\n    '}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"android,cocos,xamarin,react",mdxType:"TextBlock"},"\nA new visitor can also be created on SDK setup:\n"),Object(r.b)(s.c,{kind:"example",snippets:{android:{java:"\nSmartlook.SetupOptionsBuilder builder = new Smartlook.SetupOptionsBuilder(API_KEY)\n        .startNewSessionAndUser();\n\nSmartlook.setupAndStartRecording(builder.build());\n      ",kotlin:"\nval builder = Smartlook.SetupOptionsBuilder(API_KEY)\n        .startNewSessionAndUser()\n\nSmartlook.setupAndStartRecording(builder.build())\n      "},cocos:{java:"\nSmartlook.SetupOptionsBuilder builder = new Smartlook.SetupOptionsBuilder(API_KEY)\n        .startNewSessionAndUser();\n\nSmartlook.setupAndStartRecording(builder.build());\n      ",kotlin:"\nval builder = Smartlook.SetupOptionsBuilder(API_KEY)\n        .startNewSessionAndUser()\n\nSmartlook.setupAndStartRecording(builder.build())\n      "},xamarin:{csharp:'\nAnalytics.SetupOptions smartlookSetupOptions = new Analytics.SetupOptions(startNewSessionAndResetUser: true);\nSmartlook.Analytics.Setup("API_KEY", smartlookSetupOptions);\n      '},react:{typescript:"\nSmartlook.setupAndStartRecording({ smartlookAPIKey: API_KEY, startNewSessionAndUser: true });\n      "}},mdxType:"CodeBlock"}),Object(r.b)("h1",{id:"sensitive-data-hiding"},"Sensitive data hiding"),Object(r.b)(s.k,{invisibleOn:"unreal",mdxType:"TextBlock"},"\nWhen using **native** rendering mode, **SDK can record sensitive data in your application**.\n\nIn order to protect user privacy, Smartlook can be configured so that the sensitive data is not recorded.\n"),Object(r.b)(s.k,{visibleOn:"android,ios,react,xamarin",mdxType:"TextBlock"},"\nSmartlook attempts to hide selected sensitive UI element automatically. It can be also instructed to hide or show particular UI components. Alternatively, using one of the **wireframe** rendering modes records screen in a schematic way, showing no user data. The last possibility is to stop screen capturing altogether by using **no rendering** mode.\n"),Object(r.b)(s.k,{kind:"important",visibleOn:"android,ios,react,xamarin,cordova,ionic",mdxType:"TextBlock"},"\nSensitive elements are **hidden locally** on the device; no sensitive data are transferred over the network and stored in the dashboard.\n"),Object(r.b)(s.k,{visibleOn:"unity,cocos",mdxType:"TextBlock"},"\nOn this platform, selectively hiding sensitive parts of the screen is not possible.\n\nTo hide sensitive data, screen capturing must be stopped completelly by using **no recording** mode.\n"),Object(r.b)(s.k,{visibleOn:"flutter",mdxType:"TextBlock"},"\nOn this platform, selectively hiding sensitive parts of the screen is not possible.\n\nTo hide sensitive data, screen capturing must be stopped completelly by using **no recording** mode.\n"),Object(r.b)(s.k,{visibleOn:"flutter",mdxType:"TextBlock"},"\nAlternatively, using one of the **wireframe** rendering modes records screen in a schematic way, showing no user data.\n"),Object(r.b)(s.k,{visibleOn:"unreal",mdxType:"TextBlock"},"\nUE4 SDK does not support hiding sensitive parts of the screen at the moment.\n"),Object(r.b)(s.k,{visibleOn:"android,ios,react,xamarin",mdxType:"TextBlock"},"\n## Blacklisted views\n"),Object(r.b)(s.k,{visibleOn:"android,ios,react,xamarin",mdxType:"TextBlock"},"\nAny view can be hidden in the recording by marking it as a **blacklisted** view. A specific view can be marked as blacklisted by calling:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.registerBlacklistedView(View view);\nSmartlook.registerBlacklistedViews(List<View> views);\n      ",kotlin:"\nSmartlook.registerBlacklistedView(view: View)\nSmartlook.registerBlacklistedViews(views: List<View>)\n      "},ios:{swift:"\nclass func registerBlacklisted(object: Any)\n","objective-c":"\n+ (void)registerBlacklistedObject:(nonnull id)object;\n      "},react:{typescript:"\nSmartlook.registerBlacklistedView(ref: ComponentOrHandle));\n"},xamarin:{csharp:"\npublic static void RegisterBlacklistedObject(object @object)\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.c,{kind:"example",snippets:{ios:{swift:"\nSmartlook.registerBlacklisted(object: someView)\n","objective-c":"\n[Smartlook registerBlacklistedObject:self.someView];\n    "},xamarin:{csharp:"\nSmartlook.Analytics.RegisterBlacklistedObject(SomeView);\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"android",mdxType:"TextBlock"},"\nOr can be tagged directly in an `xml` layout file:\n"),Object(r.b)(s.k,{visibleOn:"ios",mdxType:"TextBlock"},"\nOr can be tagged directly by an `UIView` property added by Smartlook:\n"),Object(r.b)(s.c,{kind:"example",snippets:{android:{xml:'\n<View>\n    <tag android:id="@id/smartlook_blacklisted_view" android:value=""/>\n</View>\n      '}},mdxType:"CodeBlock"}),Object(r.b)(s.c,{snippets:{ios:{swift:"\nvar slSensitive: Bool\n","objective-c":"\n@property (nonatomic, assign) IBInspectable BOOL slSensitive;\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.c,{kind:"example",snippets:{ios:{swift:"\nsomeView.slSensitive = true\n","objective-c":"\nself.someView.slSensitive = YES;\n    "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{kind:"note",visibleOn:"ios",mdxType:"TextBlock"},'\nNote also, that there is a small workaround that makes  `slSensitive` property of `UIView` inspectable in Xcode Interface Builder, i.e., it is not necessary creating an `@IBOutlet` for a view that is designed in the Interface Builder just in order to set its sensitivity. See our <Link to="/docs/sdk/cookbooks/how-to-make-smartlook-properties-inspectable">How to make Smartlook properties inspectable</Link> cookbook.\n'),Object(r.b)(s.k,{visibleOn:"android,ios,react,xamarin",mdxType:"TextBlock"},"\nIf a specific view no longer needs to be blacklisted:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.unregisterBlacklistedView(View view);\nSmartlook.unregisterBlacklistedViews(List<View> views);\n      ",kotlin:"\nSmartlook.unregisterBlacklistedView(view: View)\nSmartlook.unregisterBlacklistedViews(views: List<View>)\n      "},ios:{swift:"\nclass func registerBlacklisted(object: Any)\n","objective-c":"\n+ (void)unregisterBlacklistedObject:(nonnull id)object\n      "},react:{javascript:"\nSmartlook.unregisterBlacklistedView(ref);\n"},xamarin:{csharp:"\nSmartlook.Analytics.UnregisterBlacklistedObject(object @object);\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{kind:"note",visibleOn:"android,ios,xamarin",mdxType:"TextBlock"},"\nA blacklisted view is hidden on recording by a single color rectangle. The color of this rectangle can be configured by calling:\n<CodeBlock\n  snippets={{\n    android: {\n      java: `\nSmartlook.setBlacklistedItemsColor(@ColorInt int color);\n      `,\n      kotlin: `\nSmartlook.setBlacklistedItemsColor(@ColorInt color: Int);\n      `,\n    },\n    ios: {\n      swift: `\nclass func setBlacklistedItem(color: UIColor)\n      `,\n      'objective-c': `\n+ (void)setBlacklistedItemsColor:(nonnull UIColor *)color;\n      `,\n    },\nxamarin: {\n      csharp: `\n        public static void SetBlacklistedItemsColor(float red, float green, float blue);\n      `,\n    },\n  }}\n/>\nThis is applied for all blacklisted objects.\n"),Object(r.b)(s.k,{visibleOn:"android,ios,react,xamarin",mdxType:"TextBlock"},"\n## Blacklisted classes\n"),Object(r.b)(s.k,{visibleOn:"react",mdxType:"TextBlock"},"\nNote that `UITextView`, `UITextField`, `WKWebView` on iOS and `EditText`, `WebView` on Android are blacklisted by default. Specific instances of these classes can be recorded using whitelist. \n"),Object(r.b)(s.k,{visibleOn:"android",mdxType:"TextBlock"},"\nSometimes it can be beneficial to blacklist all instances of a given `Class` that extends a `View` rather than blacklisting a specific `View`â€™s instances:\n"),Object(r.b)(s.k,{visibleOn:"ios",mdxType:"TextBlock"},"\nSometimes it can be beneficial to blacklist all instances of a **`UIView` subclass** or all `UIView` subclasses that conform some **protocol**:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.registerBlacklistedClass(Class class);\nSmartlook.registerBlacklistedClasses(List<Class> classes);\n      ",kotlin:"\nSmartlook.registerBlacklistedClass(class: Class)\nSmartlook.registerBlacklistedClasses(classes: List<Class>)\n      "},ios:{swift:"\n// Note: the object can be UIView instance, UIView subclass or a Protocol,\n// see examples below\nclass func registerBlacklisted(object: Any)\n","objective-c":"\n// Note: the object can be UIView instance, UIView subclass or a Protocol\n// see examples below\n+ (void)registerBlacklistedObject:(nonnull id)object;\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.c,{kind:"example",snippets:{ios:{swift:"\n// Note: the object can be UIView instance, UIView subclass or a Protocol\nsomeView.slSensitive = true\nSmartlook.registerBlacklisted(object: someView)\nSmartlook.registerBlacklisted(object: SensitiveDataViewClass.self)\nSmartlook.registerBlacklisted(object: SensitiveProtocol.self)\n","objective-c":"\n// Note: the object can be UIView instance, UIView subclass or a Protocol\nself.someView.slSensitive = true\n[Smartlook registerBlacklistedObject:self.someView];\n[Smartlook registerBlacklistedObject:SensitiveDataViewClass.class];\n[Smartlook registerBlacklistedObject:@protocol(SensitiveProtocol)];\n    "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"android",mdxType:"TextBlock"},"\nAny blacklisted classes can be removed:\n"),Object(r.b)(s.k,{kind:"note",visibleOn:"ios",mdxType:"TextBlock"},"\nNote that for convenience, **some classes are blacklisted by default**: `UITextView`, `UITextField` and `WKWebView`.\n"),Object(r.b)(s.k,{visibleOn:"ios",mdxType:"TextBlock"},"\nAny of the blacklisted objects can be removed:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.unregisterBlacklistedClass(Class class);\nSmartlook.unregisterBlacklistedClasses(List<Class> classes);\n      ",kotlin:"\nSmartlook.unregisterBlacklistedClass(class: Class)\nSmartlook.unregisterBlacklistedClasses(classes: List<Class>)\n      "},ios:{swift:"\nclass func unregisterBlacklisted(object: Any)\n","objective-c":"\n+ (void)unregisterBlacklistedObject:(nonnull id)object\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{kind:"note",visibleOn:"ios",mdxType:"TextBlock"},"\nNote that for convenience, **some classes are blacklisted by default**: `UITextView`, `UITextField` and `WKWebView`.\n"),Object(r.b)(s.k,{kind:"note",visibleOn:"xamarin",mdxType:"TextBlock"},"\nNote that for convenience, **some classes are blacklisted by default**: `UITextView`, `UITextField` and `WKWebView` on iOS, `EditText` and `WebView` on Android.\n"),Object(r.b)(s.k,{kind:"note",visibleOn:"android",mdxType:"TextBlock"},"\nNote that `EditText` and `WebView` are **blacklisted by default** and can be removed using `Smartlook.unregisterBlacklistedClass()`.\n"),Object(r.b)(s.k,{visibleOn:"android,ios,react,xamarin",mdxType:"TextBlock"},"\n## Whitelisted views\n"),Object(r.b)(s.k,{visibleOn:"android,ios,xamarin,react",mdxType:"TextBlock"},"\nA specific view can be whitelisted so it is recorded even if it is an instance of a blacklisted class:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.registerWhitelistedView(View view);\nSmartlook.registerWhitelistedViews(List<View> views);\n      ",kotlin:"\nSmartlook.registerWhitelistedView(view: View)\nSmartlook.registerWhitelistedViews(views: List<View>)\n      "},ios:{swift:"\nclass func registerWhitelisted(object: Any)\n","objective-c":"\n+ (void)registerWhitelistedObject:(nonnull id)object;\n      "},react:{javascript:"\nSmartlook.registerWhitelistedView(ref);\n    "},xamarin:{csharp:"\npublic static void RegisterWhitelistedObject(object @object)\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"android",mdxType:"TextBlock"},"\nOr it can be tagged as whitelisted directly in an `xml` layout file:\n"),Object(r.b)(s.k,{visibleOn:"ios",mdxType:"TextBlock"},"\nOr it can be tagged directly by an `UIView` property added by Smartlook:\n"),Object(r.b)(s.c,{kind:"example",snippets:{android:{xml:'\n<View>\n  <tag android:id="@id/smartlook_whitelisted_view" android:value=""/>\n</View>\n    '},ios:{swift:"\nsomeView.slSensitive = false\n      ","objective-c":"\nself.someView.slSensitive = NO;\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{kind:"note",visibleOn:"ios",mdxType:"TextBlock"},'\nNote also, that there is a small workaround that makes  `slSensitive` property of `UIView` inspectable in Xcode Interface Builder, i.e., it is not necessary creating an `@IBOutlet` for a view that is designed in the Interface Builder just in order to set its sensitivity. See our <Link to="/docs/sdk/cookbooks/how-to-make-smartlook-properties-inspectable">How to make Smartlook properties inspectable</Link> cookbook.\n'),Object(r.b)(s.k,{visibleOn:"android,ios,xamarin,react",mdxType:"TextBlock"},"\nA specific view can be removed from a whitelist by calling:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.unregisterWhitelistedView(View view);\nSmartlook.unregisterWhitelistedViews(List<View> views);\n      ",kotlin:"\nSmartlook.unregisterWhitelistedView(view: View)\nSmartlook.unregisterWhitelistedViews(views: List<View>)\n      "},ios:{swift:"\nclass func unregisterWhitelisted(object: Any)\n","objective-c":"\n+ (void)unregisterWhitelistedObject:(nonnull id)object;\n      "},react:{javascript:"\nSmartlook.unregisterWhitelistedView(ref);\n    "},xamarin:{csharp:"\npublic static void UnregisterWhitelistedObject(object @object)\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"cordova,ionic",mdxType:"TextBlock"},"\n## Hidden elements\nSensitive elements can be blacklisted by marking them with `.smartlook-hide` css class:\n"),Object(r.b)(s.c,{kind:"example",snippets:{cordova:{html:"\n<div class='smartlook-hide'>\n   This will be hidden.\n</div>\n      "},ionic:{html:"\n<div class='smartlook-hide'>\n   This will be hidden.\n</div>\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{kind:"note",visibleOn:"cordova,ionic",mdxType:"TextBlock"},"\n**All inputs** are **hidden** by default except for `button` and `submit` types.\n"),Object(r.b)(s.k,{visibleOn:"cordova,ionic",mdxType:"TextBlock"},"\n## Shown elements\nHidden inputs that are hidden by default will be recorded if marked with `.smartlook-show` css class:\n"),Object(r.b)(s.c,{kind:"example",snippets:{cordova:{html:"\n<input type=\"text\" class='smartlook-show'>\n      "},ionic:{html:"\n<input type=\"text\" class='smartlook-show'>\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"react",mdxType:"TextBlock"},"\n## Declarative way to handle sensitive views in React Native\nTo simplify handling of sensitive/not sensitive views in React Native we have prepared nice declarative ways to do it.\n#### Using SmartlookSensitiveComponent\nYou can wrap the component to the SmartlookSensitiveComponent and control, if it's hidden or not with `isSensitive` prop.\nJust be sure that you are not passing functional component as children! Eg. wrap it to [React.forwardRef](https://reactjs.org/docs/forwarding-refs.html) first.\nSee the example in `example/src/components/Button.tsx`.\n"),Object(r.b)(s.c,{kind:"example",snippets:{react:{typescript:'\nimport { SmartlookSensitiveComponent } from \'smartlook-react-native-wrapper\';\n// Blacklisting\n<SmartlookSensitiveComponent isSensitive={true}>\n  <Button title="Blacklisted button" />\n</SmartlookSensitiveComponent>\n// Whitelisting\n<SmartlookSensitiveComponent isSensitive={false}>\n  <TextInput\n    style={{height: 40}}\n    defaultValue="Whitelisted input"\n  />\n</SmartlookSensitiveComponent>\n      '}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"react",mdxType:"TextBlock"},"\n#### Using useSmartlookSensitiveRef hook\nThe another way to handle sensitive views is with `useSmartlookSensitiveRef` hook.\n"),Object(r.b)(s.c,{kind:"example",snippets:{react:{typescript:"\nimport { WebView } from 'react-native-webview';\nimport { useSmartlookSensitiveRef } from 'smartlook-react-native-wrapper';\n\nconst isWebViewSensitive = false;\nconst ref = useSmartlookSensitiveRef<WebView>(isWebViewSensitive);\n\n<WebView ref={ref} source={{ html: \"...\" }} />\n      "}},mdxType:"CodeBlock"}),Object(r.b)("h2",{id:"no-rendering"},"No Rendering"),Object(r.b)(s.k,{visibleOn:"unreal",mdxType:"TextBlock"},"\nSometimes the whole screen consists of sensitive data. In these cases it is beneficial to not record any screen data. In Unreal SDK the only way to handle these situations is to stop session recording and resuming recording when sensitive data is no longer displayed.\n"),Object(r.b)(s.k,{invisibleOn:"unreal",mdxType:"TextBlock"},"\nSometimes the whole screen consists of sensitive data. In these cases it is beneficial to not record any screen data.\nThis can be done by switching to `no rendering` rendering mode:\n"),Object(r.b)(s.c,{kind:"example",snippets:{android:{java:"\nSmartlook.setRenderingMode(RenderingMode.NO_RENDERING);\n      ",kotlin:"\nSmartlook.setRenderingMode(RenderingMode.NO_RENDERING)\n      "},cocos:{java:"\nSmartlook.setRenderingMode(RenderingMode.NO_RENDERING);\n      ",kotlin:"\nSmartlook.setRenderingMode(RenderingMode.NO_RENDERING)\n      "},cordova:{javascript:"\nSmartlook.setRenderingMode({renderingMode: Smartlook.RenderingMode.NO_RENDERING})\n      "},ionic:{typescript:"\nsmartlook.setRenderingMode(SmartlookRenderingMode.NO_RENDERING());\n      "},ios:{swift:"\nSmartlook.setRenderingMode(to: .noRendering)\n      ","objective-c":"\n[Smartlook setRenderingModeTo:SLRenderingModeNoRendering];\n      "},flutter:{dart:"\nSmartlook.setRenderingMode(SmartlookRenderingMode.no_rendering);\n      "},unity:{csharp:"\nSmartlookUnity.Smartlook.SetRenderingMode(RenderingModeType.no_rendering);\n    "},react:{typescript:"\nSmartlook.setRenderingMode(Smartlook.RenderingMode.NoRendering);\n    "},xamarin:{csharp:"\nSmartlook.Analytics.SetRenderingMode(Smartlook.Analytics.RenderingMode.None);\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{kind:"note",visibleOn:"android,ios,react,xamarin",mdxType:"TextBlock"},"\nSDK provides rendering modes that hide sensitive information by simplifying the rendered screen for recording. This can be advantageous because all user interaction is still being recorded, but all sensitive data are not rendered by design. Read more about rendering modes [in conceptual documentation](/docs/sdk/conceptual/handling-sensitive-data#recording-modes-handling-sensitive-data-at-the-whole-screen-level).\n"),Object(r.b)(s.k,{kind:"important",invisibleOn:"unreal",mdxType:"TextBlock"},"\nSome screens can leak sensitive data even through automatically detected touch events. More about this issue in [secure custom keyboard example](/docs/sdk/cookbooks/secure-custom-keyboard).\n"),Object(r.b)(s.k,{invisibleOn:"unreal",mdxType:"TextBlock"},"\nWhen an application is no longer displaying sensitive data, the screen rendering mode can be set back to the preferred variant:\n"),Object(r.b)(s.c,{kind:"example",snippets:{android:{java:"\nSmartlook.setRenderingMode(RenderingMode.NATIVE);\n      ",kotlin:"\nSmartlook.setRenderingMode(RenderingMode.NATIVE)\n      "},cocos:{java:"\nSmartlook.setRenderingMode(RenderingMode.NATIVE);\n      ",kotlin:"\nSmartlook.setRenderingMode(RenderingMode.NATIVE)\n      "},cordova:{javascript:"\nSmartlook.setRenderingMode({renderingMode: Smartlook.RenderingMode.NATIVE})\n      "},ionic:{typescript:"\nsmartlook.setRenderingMode(SmartlookRenderingMode.NATIVE());\n      "},ios:{swift:"\nSmartlook.setRenderingMode(to: .native)\n      ","objective-c":"\n[Smartlook setRenderingModeTo:SLRenderingModeNative];\n      "},flutter:{dart:"\nSmartlook.setRenderingMode(SmartlookRenderingMode.native);\n      "},unity:{csharp:"\nSmartlookUnity.Smartlook.SetRenderingMode(RenderingModeType.native);\n    "},react:{typescript:"\nSmartlook.setRenderingMode(Smartlook.RenderingMode.Native);\n    "},xamarin:{csharp:"\nSmartlook.Analytics.SetRenderingMode(Smartlook.Analytics.RenderingMode.Native);\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"android,ios,react,xamarin",mdxType:"TextBlock"},"\n## WebView blacklisting/whitelisting\n"),Object(r.b)(s.k,{visibleOn:"android",mdxType:"TextBlock"},"\nWhen an application has some parts displayed using `WebView` and theese parts should be recorded, then the `WebView` recording needs to be enabled by removing `WebView` from the list of blacklisted classes:\n"),Object(r.b)(s.k,{visibleOn:"ios",mdxType:"TextBlock"},"\nWhen an application has some parts displayed using `WKWebView` and theese parts should be recorded, then the `WKWebView` recording needs to be enabled by removing `WKWebView` from the  list of blacklisted classes:\n"),Object(r.b)(s.k,{visibleOn:"react",mdxType:"TextBlock"},"\nWhen an application has some parts displayed using `WebView` and theese parts should be recorded, then the `WebView` recording needs to be enabled by adding the given view reference to whitelist:\n"),Object(r.b)(s.k,{kind:"note",visibleOn:"ios",mdxType:"TextBlock"},"\n`UIWebView` class is obsolete and no longer supported by Apple. Thus, its instances and their content are not specifically handled by Smartlook from the `sensitivity` point of view.\n"),Object(r.b)(s.k,{visibleOn:"xamarin",mdxType:"TextBlock"},"\nWhen an application has some parts displayed using a **WebView** (`WKWebView` on iOS, `WebView` on Android) and theese parts should be recorded, then the **WebView** recording needs to be enabled by removing the respective components from the blacklist:\n"),Object(r.b)(s.c,{kind:"example",snippets:{android:{java:"\nSmartlook.unregisterBlacklistedClass(WebView.class);\n      ",kotlin:"\nSmartlook.registerBlacklistedClass(WebView::class.java)\n      "},ios:{swift:"\nSmartlook.unregisterBlacklisted(object: WKWebView.class)\n      ","objective-c":"\n[Smartlook unregisterBlacklistedObject:WKWebView.class];\n      "},react:{typescript:"\n// The full example can be seen in `example/src/screens/WebViewScreen.tsx`\nimport { WebView } from 'react-native-webview';\nimport { useSmartlookSensitiveRef } from 'smartlook-react-native-wrapper';\n\nconst isWebViewSensitive = false;\nconst ref = useSmartlookSensitiveRef<WebView>(isWebViewSensitive);\n\n<WebView ref={ref} source={{ html: \"...\" }} />\n    "},xamarin:{csharp:"\nSmartlook.Analytics.UnregisterBlaclistedObject(MyWebView);\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"android,ios,xamarin,react",mdxType:"TextBlock"},"\nIf `WebView` is being recorded, **all sensitive elements** on the displayed web page should be marked as sensitive so that they **are hidden**. This can be done by marking sensitive HTML elements with `.smartlook-hide` css class:\n<Code\n  kind=\"example\"\n  snippets={{\n    html: `\n<div class='smartlook-hide'>\n   This will be hidden.\n</div>\n`,\n  }}\n/>\n"),Object(r.b)(s.k,{visibleOn:"android,ios,xamarin,react",mdxType:"TextBlock"},'\nAll inputs are hidden by default except for `button` and `submit` types. If some hidden inputs should be recorded they can be marked with `.smartlook-show` css class:\n<Code\n  visibleOn="andoid,ios,xamarin"\n  kind="example"\n  snippets={{\n    html: `\n<input type="text" class=\'smartlook-show\'>\n`,\n  }}\n/>\n'),Object(r.b)("h1",{id:"user-identification"},"User Identification"),Object(r.b)("p",null,"User identifier can be specified by calling:"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.setUserIdentifier(@NonNull String identifier);\n      ",kotlin:"\nSmartlook.setUserIdentifier(@NonNull identifier: String)\n      "},cocos:{java:"\nSmartlook.setUserIdentifier(@NonNull String identifier);\n      ",kotlin:"\nSmartlook.setUserIdentifier(@NonNull identifier: String)\n      "},cordova:{javascript:"\nSmartlook.setUserIdentifier({identifier: string})\n      "},ionic:{typescript:"\nsmartlook.setUserIdentifier(new SmartlookUserIdentifier(identifier: string));\n      "},ios:{swift:"\nclass func setUserIdentifier(_ userIdentifier: String?)\n      ","objective-c":"\n+ (void)setUserIdentifier:(nullable NSString*)userIdentifier;\n      "},flutter:{dart:"\nSmartlook.setUserIdentifier(String key);\n"},unity:{csharp:"\nSmartlookUnity.Smartlook.SetUserIdentifier(string userIdentifier);\n    "},react:{typescript:"\nSmartlook.setUserIdentifier(userIdentifier: string, userProperties = {}); // userProperties is optional\n    "},xamarin:{csharp:"\nstatic public void SetUserIdentifier(string identifier, Dictionary<string, string> userProperies = null)\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"unreal",mdxType:"TextBlock"},"\nBlueprint:\n"),Object(r.b)(s.d,{visibleOn:"unreal",source:p.a,width:"180px",mdxType:"Image"}),Object(r.b)(s.k,{visibleOn:"unreal",mdxType:"TextBlock"},"\nC++:\n"),Object(r.b)(s.c,{snippets:{unreal:{cpp:'\n#include "Runtime/Analytics/Analytics/Public/Analytics.h"\n#include "Runtime/Analytics/Analytics/Public/Interfaces/IAnalyticsProvider.h"\n\nFAnalytics::Get().GetDefaultConfiguredProvider()->SetUserID(TEXT("Custom User ID"));\n'}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{kind:"note",mdxType:"TextBlock"},"\nIdentifiers can be found in the Dashboard and are very useful for finding specific userâ€™s recordings.\n"),Object(r.b)("h2",{id:"user-properties"},"User properties"),Object(r.b)(s.c,{kind:"example",snippets:{unity:{csharp:'\n      public class PlayerState : MonoBehaviour\n{\n    public string playerName;\n    public int lives;\n    public float health;\n}\n...\nSmartlookUnity.Smartlook.SetUserIdentifier("played_id", JsonUtility.ToJson(somePlayerStateInstance));\n      '}},mdxType:"CodeBlock"}),Object(r.b)(s.c,{kind:"example",snippets:{react:{javascript:'\n  Smartlook.setUserIdentifier("user_id", { "property_key" : "property_value"});\n      '}},mdxType:"CodeBlock"}),Object(r.b)(s.c,{kind:"example",snippets:{flutter:{dart:'\n  Smartlook.setUserIdentifier(\'user_id\', { "property_key" : "property_value"});\n      '}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"android,cocos",mdxType:"TextBlock"},"\nAdditional user information such as `name`, `email`, etc., can be set using `UserProperties` helper class and its methods.\n"),Object(r.b)(s.c,{kind:"example",snippets:{android:{java:'\nUserProperties userProperties = new UserProperties()\n   .putEmail("sample@email.com")\n   .putName("John Doe");\n\nSmartlook.setUserProperties(userProperties);\n      ',kotlin:'\nval userProperties = UserProperties()\n    .putEmail("sample@email.com")\n    .putName("John Doe")\n\nSmartlook.setUserProperties(userProperties)\n      '},cocos:{java:'\nUserProperties userProperties = new UserProperties();\nuserProperties.putEmail("sample@email.com");\nuserProperties.putName("John Doe");\nSmartlook.setUserProperties(userProperties);\n      ',kotlin:'\nval userProperties = UserProperties().apply {\n    putEmail("sample@email.com")\n    putName("John Doe")\n}\nSmartlook.setUserProperties(userProperties)\n      '}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{kind:"note",visibleOn:"android,cocos",mdxType:"TextBlock"},"\nNote that `email` or `name` property will be displayed in the list of visitors in the Smartlook Dashboard. Otherwise the `identifier` is used.\n"),Object(r.b)(s.k,{visibleOn:"android,cocos",mdxType:"TextBlock"},"\nIf there is no suitable helper method for specific properties, `put()` method can be used. This method accepts a combination of `key` and `value`.\n"),Object(r.b)(s.c,{kind:"example",snippets:{android:{java:'\nUserProperties userProperties = new UserProperties().put("key", "value");\n\nSmartlook.setUserProperties(userProperties);\n      ',kotlin:'\nval userProperties = UserProperties().put("key", "value")\n\nSmartlook.setUserProperties(userProperties)\n      '},cocos:{java:'\nUserProperties userProperties = new UserProperties();\nuserProperties.put("key", "value");\nSmartlook.setUserProperties(userProperties);\n      ',kotlin:'\nval userProperties = UserProperties()\nuserProperties.put("key", "value")\nSmartlook.setUserProperties(userProperties)\n      '}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"android,cocos",mdxType:"TextBlock"},"\nAll helper and `put()` methods have optional parameters `immutable` if set to **true**, the value that has been set for the key is going to be immutable.\nThis means it cannot be set again (a new value will **not override** the old one).\n"),Object(r.b)(s.k,{visibleOn:"cordova,ionic",mdxType:"TextBlock"},"\nAdditional user information, such as `name`, `email` and other custom properties can be set by calling:\n"),Object(r.b)(s.c,{snippets:{cordova:{javascript:"\nSmartlook.setUserIdentifier({\n  identifier: string,\n  sessionProperties: object\n})\n      "},ionic:{typescript:"\nsmartlook.setUserIdentifier(new SmartlookUserIdentifier(identifier: string, sessionProperties: object));\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.c,{kind:"example",snippets:{cordova:{javascript:'\nSmartlook.setUserIdentifier({\n  identifier: "sample_identifier",\n  sessionProperties: {\n    name: "John",\n    email: "john@example.com"\n  }\n})\n      '},ionic:{typescript:'\nsmartlook.setUserIdentifier(new SmartlookUserIdentifier("sample_identifier", {name: "John" email: "john@example.com"}));\n      '}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"ios,xamarin",mdxType:"TextBlock"},"\nAdditional custom properties can be added to each recording session by calling:\n"),Object(r.b)(s.c,{snippets:{ios:{swift:"\nclass func setSessionProperty(value: String, forName name: String)\n","objective-c":"\n+ (void)setSessionPropertyValue:(nonnull NSString *)value forName:(nonnull NSString *)name;\n"},xamarin:{csharp:"\npublic static void SetSessionProperty(string name, string value, PropertyOptions options = PropertyOptions.Defaults)\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"ios,xamarin",mdxType:"TextBlock"},"\nThese properties can be seen in the Dashboard at Visitor details.\n\n\nIf session property should be protected against accidental further changes it can be set as immutable. Immutable property value cannot be changed once it is set.\n"),Object(r.b)(s.c,{snippets:{ios:{swift:"\nstatic var immutable: SLPropertyOption\n\n\nclass func setSessionProperty(value: String, forName name: String, options: SLPropertyOption)\n","objective-c":"\ntypedef NS_OPTIONS(NSUInteger, SLPropertyOption) {\n    SLPropertyOptionDefaults    = 0,\n    SLPropertyOptionImmutable   = 1 << 0\n};\n+ (void)setSessionPropertyValue:(nonnull NSString *)value forName:(nonnull NSString *)name withOptions:(SLPropertyOption)options;\n"},xamarin:{csharp:"\n[Flags]\npublic enum PropertyOptions : uint\n{\n  Defaults = 0,\n  Immutable = 1 << 0\n}\n"}},mdxType:"CodeBlock"}),Object(r.b)(s.c,{kind:"example",snippets:{ios:{swift:'\nSmartlook.setSessionProperty(value: "immutable-value", forName: "my-property", options: .immutable)\n      ',"objective-c":'\n[Smartlook setSessionPropertyValue:@"immutable-value" forName:@"my-property" withOptions:SLPropertyOptionImmutable];\n      '},xamarin:{csharp:'\nSmartlook.Analytics.SetSessionProperty("immutable-prop", "immutable-value", Smartlook.Analytics.PropertyOptions.Immutable);\n      '}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"unreal",mdxType:"TextBlock"},"\nAdditional custom properties can be added to each recording session by using UE4 Analytics APIs:\n\n\n\nBlueprint:\n* [Start Session with Attributes](https://docs.unrealengine.com/en-US/BlueprintAPI/Analytics/StartSessionwithAttributes/index.html)\n* [Set Build Info](https://docs.unrealengine.com/en-US/BlueprintAPI/Analytics/SetBuildInfo/index.html)\n* [Set Gender](https://docs.unrealengine.com/en-US/BlueprintAPI/Analytics/SetGender/index.html)\n* [Set Location](https://docs.unrealengine.com/en-US/BlueprintAPI/Analytics/SetLocation/index.html)\n* [Set Age](https://docs.unrealengine.com/en-US/BlueprintAPI/Analytics/SetAge/index.html)\n\n\nC++:\n* [Start Session with Attributes](https://docs.unrealengine.com/en-US/API/Runtime/Analytics/Interfaces/IAnalyticsProvider/StartSession/2/index.html)\n* [Set Build Info](https://docs.unrealengine.com/en-US/API/Runtime/Analytics/Interfaces/IAnalyticsProvider/SetBuildInfo/index.html)\n* [Set Gender](https://docs.unrealengine.com/en-US/API/Runtime/Analytics/Interfaces/IAnalyticsProvider/SetGender/index.html)\n* [Set Location](https://docs.unrealengine.com/en-US/API/Runtime/Analytics/Interfaces/IAnalyticsProvider/SetLocation/index.html)\n* [Set Age](https://docs.unrealengine.com/en-US/API/Runtime/Analytics/Interfaces/IAnalyticsProvider/SetAge/index.html)\n"),Object(r.b)("h1",{id:"analytics"},"Analytics"),Object(r.b)(s.k,{visibleOn:"android, ios, react, xamarin",mdxType:"TextBlock"},"\nSome analytic events are recorded out-of-box:\n* Activity/Fragment changes\n* Focus changes\n* Clicked views\n* Application crashes\n* For everything else, custom events can be used\n"),Object(r.b)(s.k,{visibleOn:"unreal",mdxType:"TextBlock"},"\nUnreal SDK does not track any events automatically like other SDKs. It is needed to use Custom Events.\n"),Object(r.b)(s.k,{kind:"note",visibleOn:"android",mdxType:"TextBlock"},"\nNames of some automatically detected events can be customized.\n"),Object(r.b)(s.k,{visibleOn:"cordova,ionic",mdxType:"TextBlock"},"\nOn web based frameworks SDK is not able to autodetect all events like on native frameworks. With that said it is still able to detect Application crashes.\nFor everything else custom events need to be used.\n"),Object(r.b)("h2",{id:"custom-event"},"Custom event"),Object(r.b)(s.k,{invisibleOn:"unreal",mdxType:"TextBlock"},"\nA simple custom event can be created by calling:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.trackCustomEvent(@NonNull String eventName);\n      ",kotlin:"\nSmartlook.trackCustomEvent(@NonNull eventName: String)\n      "},cocos:{java:"\nSmartlook.trackCustomEvent(@NonNull String eventName);\n      ",kotlin:"\nSmartlook.trackCustomEvent(@NonNull eventName: String)\n      "},cordova:{javascript:"\nSmartlook.trackCustomEvent({name: string})\n      "},ionic:{typescript:"\nsmartlook.trackCustomEvent(new SmartlookCustomEvent(name: string));\n      "},ios:{swift:"\nclass func trackCustomEvent(name eventName: String)\n","objective-c":"\n+ (void)trackCustomEventWithName:(nonnull NSString*)eventName;\n      "},flutter:{dart:"\nSmartlook.trackCustomEvent(String eventName);\n"},unity:{csharp:"\nSmartlookUnity.Smartlook.TrackCustomEvent(string eventName);\n"},react:{typescript:"\nSmartlook.trackCustomEvent(name: string);\n"},xamarin:{csharp:"\npublic static void TrackCustomEvent(string name, Dictionary<string, string> eventProperties = null)\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"android,cocos",mdxType:"TextBlock"},"\nAdditional data serialized as `JSONObject`, `Bundle`, `String` with valid json format or key/value pair can be added to a custom event:\n"),Object(r.b)(s.k,{visibleOn:"cordova,ionic",mdxType:"TextBlock"},"\nAddition data passed as a `object` can be added to custom event:\n"),Object(r.b)(s.k,{visibleOn:"ios,xamarin",mdxType:"TextBlock"},"\nCustom event also accepts a dictionary of string key/values as event properties.\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.trackCustomEvent(@NonNull String eventName, JSONObject eventProperties);\nSmartlook.trackCustomEvent(@NonNull String eventName, Bundle eventProperties);\nSmartlook.trackCustomEvent(@NonNull String eventName, String validJsonString);\nSmartlook.trackCustomEvent(@NonNull String eventName, @NotNull String key, String value);\n      ",kotlin:"\nSmartlook.trackCustomEvent(@NonNull eventName: String, eventProperties: JSONObject);\nSmartlook.trackCustomEvent(@NonNull eventName: String, eventProperties: Bundle);\nSmartlook.trackCustomEvent(@NonNull eventName: String, validJsonString: String);\nSmartlook.trackCustomEvent(@NonNull eventName: String, @NotNull key: String, value: String);\n      "},cocos:{java:"\nSmartlook.trackCustomEvent(@NonNull String eventName, JSONObject eventProperties);\nSmartlook.trackCustomEvent(@NonNull String eventName, Bundle eventProperties);\nSmartlook.trackCustomEvent(@NonNull String eventName, String validJsonString);\nSmartlook.trackCustomEvent(@NonNull String eventName, @NotNull String key, String value);\n      ",kotlin:"\nSmartlook.trackCustomEvent(@NonNull eventName: String, eventProperties: JSONObject);\nSmartlook.trackCustomEvent(@NonNull eventName: String, eventProperties: Bundle);\nSmartlook.trackCustomEvent(@NonNull eventName: String, validJsonString: String);\nSmartlook.trackCustomEvent(@NonNull eventName: String, @NotNull key: String, value: String);\n      "},cordova:{javascript:"\nSmartlook.trackCustomEvent({name: string, eventProperties: object})\n      "},ionic:{typescript:"\nsmartlook.trackCustomEvent(new SmartlookCustomEvent(name: string, eventProperties: object));\n      "},ios:{swift:"\nSmartlook.trackCustomEvent(name: String, props: [String : String]?)\n","objective-c":"\n+ (void)trackCustomEventWithName:(nonnull NSString*)eventName props:(nullable NSDictionary<NSString*, NSString*>*)props;\n      "},flutter:{dart:"\nSmartlook.trackCustomEvent(String eventName, [Object map = null]);\n"},unity:{csharp:"\n    //json string, obtained for example with JsonUtility.ToJson(param)\nSmartlookUnity.TrackCustomEvent(string eventName, string properties);\n"},react:{typescript:"\nSmartlook.trackCustomEvent(name: string, properties = {});;\n"}},mdxType:"CodeBlock"}),Object(r.b)(s.c,{kind:"example",snippets:{cordova:{javascript:'\nSmartlook.trackCustomEvent({\n  name: "sample_event",\n  eventProperties: {\n    id: "sample_id",\n    text: "sample text"\n  }\n})\n      '},ionic:{typescript:'\nsmartlook.trackCustomEvent(new SmartlookCustomEvent("sample_event", eventProperties: {\n    id: "sample_id",\n    text: "sample text"\n  }\n));\n      '}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{invisibleOn:"unreal",mdxType:"TextBlock"},"\nA simple custom event can be created by using:\n"),Object(r.b)(s.k,{visibleOn:"unreal",mdxType:"TextBlock"},"\nBlueprint:\n"),Object(r.b)(s.d,{visibleOn:"unreal",src:k.a,width:"206px",mdxType:"Image"}),Object(r.b)(s.k,{visibleOn:"unreal",mdxType:"TextBlock"},"\nC++:\n"),Object(r.b)(s.c,{snippets:{unreal:{cpp:'\n#include "Runtime/Analytics/Analytics/Public/Analytics.h"\n#include "Runtime/Analytics/Analytics/Public/Interfaces/IAnalyticsProvider.h"\n\nFAnalytics::Get().GetDefaultConfiguredProvider()->RecordEvent(TEXT("Custom Event Name"));\n'}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"unreal",mdxType:"TextBlock"},"\nAdditional custom event APIs:\n\n\n\nBlueprint:\n* [Record Event with Attributes](https://docs.unrealengine.com/en-US/BlueprintAPI/Analytics/RecordEventwithAttributes/index.html)\n* [Record Error](https://docs.unrealengine.com/en-US/BlueprintAPI/Analytics/RecordError/index.html)\n* [Record Error with Attributes](https://docs.unrealengine.com/en-US/BlueprintAPI/Analytics/RecordErrorwithAttributes/index.html)\n* [Record Currency Purchase (with Attributes)](https://docs.unrealengine.com/en-US/BlueprintAPI/Analytics/RecordCurrencyPurchase/index.html)\n* [Record Currency Given (with Attributes)](https://docs.unrealengine.com/en-US/BlueprintAPI/Analytics/RecordCurrencyGiven/index.html)\n* [Record Item Purchase(with Attributes)](https://docs.unrealengine.com/en-US/BlueprintAPI/Analytics/RecordItemPurchase/index.html)\n* [Record Progress (with Attributes)](https://docs.unrealengine.com/en-US/BlueprintAPI/Analytics/RecordProgress/index.html)\n\n\nC++:\n* [Record Event with Attributes](https://docs.unrealengine.com/en-US/API/Runtime/Analytics/Interfaces/IAnalyticsProvider/RecordEvent/2/index.html)\n* [Record Error](https://docs.unrealengine.com/en-US/API/Runtime/Analytics/Interfaces/IAnalyticsProvider/RecordError/1/index.html)\n* [Record Error with Attributes](https://docs.unrealengine.com/en-US/API/Runtime/Analytics/Interfaces/IAnalyticsProvider/RecordError/2/index.html)\n* [Record Currency Purchase (with Attributes)](https://docs.unrealengine.com/en-US/API/Runtime/Analytics/Interfaces/IAnalyticsProvider/RecordCurrencyPurchase/1/index.html)\n* [Record Currency Given (with Attributes)](https://docs.unrealengine.com/en-US/API/Runtime/Analytics/Interfaces/IAnalyticsProvider/RecordCurrencyGiven/1/index.html)\n* [Record Item Purchase](https://docs.unrealengine.com/en-US/API/Runtime/Analytics/Interfaces/IAnalyticsProvider/RecordItemPurchase/1/index.html)\n* [Record Progress (with Attributes)](https://docs.unrealengine.com/en-US/API/Runtime/Analytics/Interfaces/IAnalyticsProvider/RecordProgress/1/index.html)\n"),Object(r.b)(s.k,{kind:"note",visibleOn:"android,cordova,ionic,cocos",mdxType:"TextBlock"},"\nEvent properties will effectively use only flat objects.\nIn case an object that includes objects or arrays as a child elements is used, these elements are going to be ignored.\n"),Object(r.b)("h2",{id:"navigation-event"},"Navigation event"),Object(r.b)(s.k,{invisibleOn:"unreal",mdxType:"TextBlock"},"\nScreen/navigation transitions can be manually tracked by calling:\n"),Object(r.b)(s.k,{visibleOn:"unreal",mdxType:"TextBlock"},"\nScreen/navigation transitions can be manually tracked by using Custom Events.\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.trackNavigationEvent(@NotNull String name, ViewState viewState);\n      ",kotlin:"\nSmartlook.trackNavigationEvent(@NotNull name: String, viewState: ViewState)\n      "},cocos:{java:"\nSmartlook.trackNavigationEvent(@NotNull String name, ViewState viewState);\n      ",kotlin:"\nSmartlook.trackNavigationEvent(@NotNull name: String, viewState: ViewState)\n      "},cordova:{javascript:"\nSmartlook.trackNavigationEvent({name: string, viewState: Smartlook.ViewState})\n      "},ionic:{typescript:"\nsmartlook.trackNavigationEvent(new SmartlookNavigationEvent(name: string, viewState: SmartlookViewState));\n      "},ios:{swift:"\nstatic let enter: Smartlook.NavigationEventType\nstatic let exit: Smartlook.NavigationEventType\n\n\nSmartlook.trackNavigationEvent(withControllerId controllerId: String, type: Smartlook.NavigationEventType)\n","objective-c":"\nSLNavigationType const _Nonnull SLNavigationTypeEnter;\nSLNavigationType const _Nonnull SLNavigationTypeExit;\n\n\n+ (void)trackNavigationEventWithControllerId:(nonnull NSString *)controllerId type:(nonnull SLNavigationType)type;\n      "},flutter:{dart:"\nSmartlook.trackNavigationEvent(String key, SmartlookNavigationEventType type);\n"},unity:{csharp:"\nSmartlookUnity.TrackNavigationEvent(string screenName, NavigationEventType direction);\n"},react:{typescript:"\nSmartlook.trackNavigationEvent(screenName: string, viewState: Smartlook.ViewState);\n"},xamarin:{csharp:"\npublic enum NavigationEventType\n{\n  Enter,\n  Exit\n}\n         \npublic static void TrackNavigationEvent(string identifier, NavigationEventType type = NavigationEventType.Enter)\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"android,cocos",mdxType:"TextBlock"},"\nwhere `viewState` can be either `ViewState.START` or `ViewState.STOP`.\n"),Object(r.b)(s.k,{visibleOn:"cordova",mdxType:"TextBlock"},"\nwhere `viewState` can be either `Smartlook.ViewState.START` or `Smartlook.ViewState.STOP`.\n"),Object(r.b)(s.k,{visibleOn:"ionic",mdxType:"TextBlock"},"\nwhere `viewState` can be either `SmartlookViewState.START` or `SmartlookViewState.STOP`.\n"),Object(r.b)(s.k,{visibleOn:"ios,xamarin",mdxType:"TextBlock"},"\nwhere the `type` could flag the event as either `enter` or `exit` of the navigation controller.\n"),Object(r.b)(s.k,{kind:"important",visibleOn:"flutter",mdxType:"TextBlock"},"\nNavigation events need to be tracked manually, because Flutter applications typically consist of single activity.\nManual tracking needs to be implemented so **mobile heatmaps work correctly**.\n"),Object(r.b)(s.k,{kind:"important",visibleOn:"unity",mdxType:"TextBlock"},"\nNavigation events need to be tracked manually, because Unity applications typically consist of single activity.\nManual tracking needs to be implemented so **mobile heatmaps work correctly**.\n"),Object(r.b)(s.k,{kind:"important",visibleOn:"cocos",mdxType:"TextBlock"},"\nNavigation events need to be tracked manually, because Cocos applications typically consist of single activity.\nManual tracking needs to be implemented so **mobile heatmaps work correctly**.\n"),Object(r.b)(s.k,{kind:"important",visibleOn:"cordova, ionic",mdxType:"TextBlock"},"\nNavigation events need to be tracked manually, because web technology based applications typically consist of single activity.\nManual tracking needs to be implemented so **mobile heatmaps work correctly**.\n"),Object(r.b)(s.k,{visibleOn:"android",mdxType:"TextBlock"},"\nIt can be explicitly specified if the navigation event happened between `Activities` or `Fragments`:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.trackNavigationEvent(@NotNull String name, ViewType type, ViewState viewState);\n      ",kotlin:"\nSmartlook.trackNavigationEvent(@NotNull name: String, type: ViewType, viewState: ViewState)\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"android",mdxType:"TextBlock"},"\nwhere `viewType` is one of `ViewType.ACTIVITY` or `ViewType.FRAGMENT`.\n"),Object(r.b)("h2",{id:"timed-event"},"Timed event"),Object(r.b)(s.k,{invisibleOn:"unreal",mdxType:"TextBlock"},"\nDuration of any time-sensitive or long-running actions in the application can be measured using timed events.\nA timed event can be started by using the following:\n"),Object(r.b)(s.k,{visibleOn:"unreal",mdxType:"TextBlock"},"\nCurrently not supported by the SDK.\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.startTimedCustomEvent(@NotNull String eventName);\nSmartlook.startTimedCustomEvent(@NotNull String eventName, JSONObject eventProperties);\nSmartlook.startTimedCustomEvent(@NotNull String eventName, Bundle eventProperties);\nSmartlook.startTimedCustomEvent(@NotNull String eventName, String eventPropertiesJson);\n      ",kotlin:"\nSmartlook.startTimedCustomEvent(@NotNull eventName: String)\nSmartlook.startTimedCustomEvent(@NotNull eventName: String, eventProperties: JSONObject)\nSmartlook.startTimedCustomEvent(@NotNull eventName: String, eventProperties: Bundle)\nSmartlook.startTimedCustomEvent(@NotNull eventName: String, eventPropertiesJson: String)\n      "},cocos:{java:"\nSmartlook.startTimedCustomEvent(@NotNull String eventName);\nSmartlook.startTimedCustomEvent(@NotNull String eventName, JSONObject eventProperties);\nSmartlook.startTimedCustomEvent(@NotNull String eventName, Bundle eventProperties);\nSmartlook.startTimedCustomEvent(@NotNull String eventName, String eventPropertiesJson);\n      ",kotlin:"\nSmartlook.startTimedCustomEvent(@NotNull eventName: String)\nSmartlook.startTimedCustomEvent(@NotNull eventName: String, eventProperties: JSONObject)\nSmartlook.startTimedCustomEvent(@NotNull eventName: String, eventProperties: Bundle)\nSmartlook.startTimedCustomEvent(@NotNull eventName: String, eventPropertiesJson: String)\n      "},cordova:{javascript:"\nSmartlook.startTimedCustomEvent({name: string}, successCallback: function(eventId: string));\nSmartlook.startTimedCustomEvent({name: string, eventProperties: object}, successCallback: function(eventId: string));\n      "},ionic:{typescript:"\nsmartlook.startTimedCustomEvent(new SmartlookTimedCustomEventStart(name: string)): promise<string>;\nsmartlook.startTimedCustomEvent(new SmartlookTimedCustomEventStart(name: string, eventProperties: object)): promise<string>;\n      "},ios:{swift:"\nSmartlook.startTimedCustomEvent(name: String, props: [String : String]?) -> Any\n","objective-c":"\n+ (id _Nonnull)startTimedCustomEventWithName:(nonnull NSString*)eventName props:(nullable NSDictionary<NSString*, NSString*>*)props;\n      "},flutter:{dart:"\nSmartlook.startTimedCustomEvent(String eventName, [Object map = null]);\n"},unity:{csharp:"\nSmartlookUnity.Smartlook.StartTimedCustomEvent(string eventName);\nSmartlookUnity.Smartlook.StartTimedCustomEvent(string eventName, string properties)\n"},react:{javascript:'\nSmartlook.startTimedCustomEvent("sample_timed_event", {prop: "propValue"});\n'},xamarin:{csharp:"\npublic static string StartTimedCustomEvent(string name, Dictionary<string, string> eventProperties = null)\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{invisibleOn:"unreal",mdxType:"TextBlock"},"\nThis will not send out any events but will return a unique `eventId` that **needs to be stored** and it is then used to stop/cancel a custom timed event.\nTo send out an event with a duration, stop needs to be called:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.stopTimedCustomEvent(@NotNull String eventId);\nSmartlook.stopTimedCustomEvent(@NotNull String eventId, JSONObject eventProperties);\nSmartlook.stopTimedCustomEvent(@NotNull String eventId, Bundle eventProperties);\nSmartlook.stopTimedCustomEvent(@NotNull String eventId, String eventPropertiesJson);\n      ",kotlin:"\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String)\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String, eventProperties: JSONObject)\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String, eventProperties: Bundle)\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String, eventPropertiesJson: String)\n      "},cocos:{java:"\nSmartlook.stopTimedCustomEvent(@NotNull String eventId);\nSmartlook.stopTimedCustomEvent(@NotNull String eventId, JSONObject eventProperties);\nSmartlook.stopTimedCustomEvent(@NotNull String eventId, Bundle eventProperties);\nSmartlook.stopTimedCustomEvent(@NotNull String eventId, String eventPropertiesJson);\n      ",kotlin:"\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String)\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String, eventProperties: JSONObject)\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String, eventProperties: Bundle)\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String, eventPropertiesJson: String)\n      "},cordova:{javascript:"\nSmartlook.stopTimedCustomEvent({eventId: string});\nSmartlook.stopTimedCustomEvent({eventId: string, eventProperties: object});\n      "},ionic:{typescript:"\nsmartlook.stopTimedCustomEvent(new SmartlookTimedCustomEventStop(eventId: string));\nsmartlook.stopTimedCustomEvent(new SmartlookTimedCustomEventStop(eventId: string, eventProperties: object));\n      "},flutter:{dart:"\nSmartlook.stopTimedCustomEvent(String key, [Object map = null]);\n"},unity:{csharp:"\nSmartlookUnity.Smartlook.StopTimedCustomEvent(string eventId);\nSmartlookUnity.Smartlook.StopTimedCustomEvent(string eventId, string properties);\n"},react:{javascript:'\nSmartlook.stopTimedCustomEvent("event_id", {prop: "propValue"});\n'},xamarin:{csharp:"\npublic static void TrackTimedCustomEvent(string eventId, Dictionary<string, string> eventProperties = null)\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{invisibleOn:"unreal",mdxType:"TextBlock"},"\nwith corresponding `eventId` obtained from `startTimedCustomEvent`.\n"),Object(r.b)(s.k,{kind:"note",invisibleOn:"unreal",mdxType:"TextBlock"},"\nProperties set in start will be **merged** with properties set in stop/cancel. Properties from stop/cancel have a higher priority and will rewrite conflicting properties from the start.\n"),Object(r.b)(s.k,{invisibleOn:"unreal",mdxType:"TextBlock"},"\nIn case a given action failed `cancelTimedCustomEvent()` can be called instead of `stopTimedCustomEvent()` it has an extra field used for the **reason** of any failure:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason);\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason, JSONObject eventProperties);\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason, Bundle eventProperties);\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason, String eventPropertiesJson);\n      ",kotlin:"\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String)\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String, eventProperties: JSONObject)\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String, eventProperties: Bundle)\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String, eventPropertiesJson: String)\n      "},cocos:{java:"\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason);\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason, JSONObject eventProperties);\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason, Bundle eventProperties);\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason, String eventPropertiesJson);\n      ",kotlin:"\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String)\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String, eventProperties: JSONObject)\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String, eventProperties: Bundle)\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String, eventPropertiesJson: String)\n      "},cordova:{javascript:"\nSmartlook.cancelTimedCustomEvent({eventId: string, reason: string});\nSmartlook.cancelTimedCustomEvent({eventId: string, reason: string, eventProperties: object});\n      "},ionic:{typescript:"\nsmartlook.cancelTimedCustomEvent(new SmartlookTimedCustomEventCancel(eventId: string, reason: string));\nsmartlook.cancelTimedCustomEvent(new SmartlookTimedCustomEventCancel(eventId: string, reason: string, eventProperties: object));\n      "},ios:{swift:"\n// to track successfull events\nSmartlook.trackTimedCustomEvent(eventId: Any, props: [String : String]?)\n// to track event cancellation\nSmartlook.trackTimedCustomEventCancel(eventId: Any, reason: String?, props: [String : String]?)\n","objective-c":"\n// to track successfull events\n+ (void)trackTimedCustomEventWithEventId:(id _Nonnull)eventId props:(nullable NSDictionary<NSString*, NSString*>*)props;\n// to track event cancellation\n+ (void)trackTimedCustomEventCancelWithEventId:(id _Nonnull)eventId reason:(NSString *_Nullable)reason props:(nullable NSDictionary<NSString*, NSString*>*)props;\n      "},flutter:{dart:"\nSmartlook.cancelTimedCustomEvent(String key, String reason, [Object map = null]);\n"},unity:{csharp:"\nSmartlookUnity.Smartlook.CancelTimedCustomEvent(string eventId, string reason);\nSmartlookUnity.Smartlook.CancelTimedCustomEvent(string eventId, string reason, string properties);\n"},react:{javascript:'\nSmartlook.stopTimedCustomEvent("event_id", "reason", {prop: "propValue"});\n'},xamarin:{csharp:"\npublic static void TrackTimedCustomEventCancel(string eventId, string reason = null, Dictionary<string, string> eventProperties = null)\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{kind:"example",visibleOn:"android,cordova,ionic,ios,cocos,xamarin",mdxType:"TextBlock"},'\nTypical use of timed event might look like this:\n<CodeBlock\n  snippets={{\n    android: {\n      java: `\nString eventID = Smartlook.startTimedCustomEvent("duration_event");\nThread.sleep(1000); //long running operation\nSmartlook.stopTimedCustomEvent(eventId);\n      `,\n      kotlin: `\nval eventID = Smartlook.startTimedCustomEvent("duration_event")\nThread.sleep(1000) //long running operation\nSmartlook.stopTimedCustomEvent(eventId)\n      `,\n    },\n    cocos: {\n      java: `\nString eventID = Smartlook.startTimedCustomEvent("duration_event");\nThread.sleep(1000); //long running operation\nSmartlook.stopTimedCustomEvent(eventId);\n      `,\n      kotlin: `\nval eventID = Smartlook.startTimedCustomEvent("duration_event")\nThread.sleep(1000) //long running operation\nSmartlook.stopTimedCustomEvent(eventId)\n      `,\n    },\n    cordova: {\n      javascript: `\nSmartlook.startTimedCustomEvent({name: "duration_event"}, function(eventId) {\n  setTimeout(function() {\n    Smartlook.stopTimedCustomEvent({eventId: eventId});\n  }, 1000);\n});\n      `,\n    },\n    ionic: {\n      typescript: `\nsmartlook.startTimedCustomEvent(new SmartlookTimedCustomEventStart("duration_event")).then((eventId) => {\n  setTimeout(function() {\n    smartlook.stopTimedCustomEvent(new SmartlookTimedCustomEventStop(eventId));\n  }, 1000);\n});\n      `,\n    },\n    ios: {\n      swift: `\nlet eventRef = Smartlook.startTimedCustomEvent("duration_event");\n// some lenghty operation\nSmartlook.trackTimedCustomEvent(eventRef);\n      `,\n      \'objective-c\': `\nid eventRef = [Smartlook startTimedCustomEventWithName:@"duration_event"];\n// some lenghty operation\n[Smartlook trackTimedCustomEventCancelWithEventId:eventRef];\n      `,\n    },\nxamarin: {\n      csharp: `\ntimedEventId = Smartlook.Analytics.StartTimedCustomEvent("TIMED_EVENT", new Dictionary<string, string>() { { "PROP_1", "START_VALUE_1" }, { "PROP_2", "START_VALUE_2" } });\nSystem.Threading.Thread.Sleep(1000);\nSmartlook.Analytics.TrackTimedCustomEvent(timedEventId, new Dictionary<string, string>() { { "PROP_1", "TRACK_VALUE_1" } });\n        `,\n    },\n  }}\n/>\n\n \n'),Object(r.b)(s.k,{invisibleOn:"ios,unreal",mdxType:"TextBlock"},"\nIn this case the `duration_event` will have duration a property set to circa 1000ms.\n"),Object(r.b)(s.k,{visibleOn:"android",mdxType:"TextBlock"},"\n## Customize automatic event detection\nFor some automatically detected events SDK tries to figure out the name from the application context:\n* **click event** - Event name consists of `Activity` name, `View` class (Button, etc.) and the `id`.\n* **navigation event** - Event name is set as `Activity`/`Fragment` name.\n\n\nBut sometimes it's impossible to name an event with an easy to read and descriptive name. Because of this, SDK provides an option to personalize event names.\n\n\n### Name click events\nSo a detected click on a given view has a custom event name instead of an id it can be tagged directly in the XML layout file:\n"),Object(r.b)(s.c,{kind:"example",snippets:{android:{xml:'\n<View>\n    <tag android:id="@id/smartlook_custom_name" android:value="custom_name"/>\n</View>\n      '}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{kind:"note",visibleOn:"android",mdxType:"TextBlock"},"\nIf View has `smartlook_custom_name` set, clicking on this view will trigger an event with the name consisting of `Activity` name, `View` class (`Button`, etc.) and `smartlook_custom_name`.\n"),Object(r.b)(s.k,{visibleOn:"android",mdxType:"TextBlock"},"\n### Name navigation events\nCustom names for navigation events can be set in two different ways. `Activity`/`Fragment` can implement `SmartlookNamedController` interface:\n"),Object(r.b)(s.c,{kind:"example",snippets:{android:{java:'\npublic class SettingsActivity extends AppCompatActivity implements SmartlookNamedController {\n    @NotNull\n    @Override\n    public String getCustomName() {\n        return "custom_activity_name";\n    }\n}\n      ',kotlin:'\nclass SettingsActivity : AppCompatActivity(), SmartlookNamedController {\n    @NotNull\n    override fun getCustomName(): String {\n        return "custom_activity_name";\n    }\n}\n      '}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"android",mdxType:"TextBlock"},"\nOr `Activity`/`Fragment` root view can be tagged directly in `XML` layout file:\n"),Object(r.b)(s.c,{kind:"example",snippets:{android:{xml:'\n<?xml version="1.0" encoding="utf-8"?>\n<View>\n\t<tag android:id="@id/smartlook_custom_controller_name" android:value="custom_name"/>\n\n\t\x3c!-- child views --\x3e\n</View>\n      '}},mdxType:"CodeBlock"}),Object(r.b)("h2",{id:"global-event-properties"},"Global event properties"),Object(r.b)(s.k,{visibleOn:"unreal",mdxType:"TextBlock"},"\nCurrently not supported by the SDK.\n"),Object(r.b)(s.k,{invisibleOn:"unreal",mdxType:"TextBlock"},"\nExtra properties can be attached to every event, these properties are called **global event properties**.\nGlobal event properties can be set by calling:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.setGlobalEventProperties(JSONObject globalEventProperties, boolean immutable);\nSmartlook.setGlobalEventProperties(Bundle globalEventProperties, boolean immutable);\nSmartlook.setGlobalEventProperties(String globalEventPropertiesJson, boolean immutable);\nSmartlook.setGlobalEventProperty(@NotNull String key, @NotNull String value, boolean immutable);\n      ",kotlin:"\nSmartlook.setGlobalEventProperties(globalEventProperties: JSONObject, immutable: Boolean)\nSmartlook.setGlobalEventProperties(globalEventProperties: Bundle, immutable: Boolean)\nSmartlook.setGlobalEventProperties(globalEventPropertiesJson: String, immutable: Boolean)\nSmartlook.setGlobalEventProperty(@NotNull key: String, @NotNull value: String, immutable: Boolean)\n      "},cocos:{java:"\nSmartlook.setGlobalEventProperties(JSONObject globalEventProperties, boolean immutable);\nSmartlook.setGlobalEventProperties(Bundle globalEventProperties, boolean immutable);\nSmartlook.setGlobalEventProperties(String globalEventPropertiesJson, boolean immutable);\nSmartlook.setGlobalEventProperty(@NotNull String key, @NotNull String value, boolean immutable);\n      ",kotlin:"\nSmartlook.setGlobalEventProperties(globalEventProperties: JSONObject, immutable: Boolean)\nSmartlook.setGlobalEventProperties(globalEventProperties: Bundle, immutable: Boolean)\nSmartlook.setGlobalEventProperties(globalEventPropertiesJson: String, immutable: Boolean)\nSmartlook.setGlobalEventProperty(@NotNull key: String, @NotNull value: String, immutable: Boolean)\n      "},cordova:{javascript:"\nSmartlook.setGlobalEventProperties({globalEventProperties: object, immutable: boolean});\nSmartlook.setGlobalEventProperty({key: string, value: string, immutable: boolean});\n      "},ionic:{typescript:"\nsmartlook.setGlobalEventProperties(new SmartlookGlobalEventProperties(globalEventProperties: object, immutable: boolean));\nsmartlook.setGlobalEventProperty(new SmartlookGlobalEventProperty(key: string, value: string, immutable: boolean));\n      "},ios:{swift:"\nclass func setGlobalEventProperty(value: String, forName name: String)\n\n\nstatic var immutable: SLPropertyOption\nclass func setGlobalEventProperty(value: String, forName name: String, options: SLPropertyOption)\n","objective-c":"\n+ (void)setGlobalEventPropertyValue:(nonnull NSString *)value forName:(nonnull NSString *)name;\n\n\ntypedef NS_OPTIONS(NSUInteger, SLPropertyOption) {\n    SLPropertyOptionDefaults    = 0,\n    SLPropertyOptionImmutable   = 1 << 0\n};\n+ (void)setGlobalEventPropertyValue:(nonnull NSString *)value forName:(nonnull NSString *)name withOptions:(SLPropertyOption)options;\n      "},flutter:{dart:"\nSmartlook.setGlobalEventProperty(String key, String value, bool immutable)\nSmartlook.setGlobalEventProperties(Object map, bool immutable)\n"},unity:{csharp:"\nSmartlookUnity.Smartlook.SetGlobalEventProperty(string key, string value, bool immutable);\nSmartlookUnity.Smartlook.SetGlobalEventProperties(string properties, bool immutable);\n"},react:{typescript:"\nSmartlook.setGlobalEventProperty(key: string, value: string, immutable = false);\nSmartlook.setGlobalEventProperties(properties: {}, immutable = false)\n"},xamarin:{csharp:"\npublic enum PropertyOptions : uint\n{\n  Defaults = 0,\n  Immutable = 1 << 0\n}\n        \npublic static void SetGlobalEventProperty(string name, string value, PropertyOptions options = PropertyOptions.Defaults)\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.c,{kind:"example",snippets:{cordova:{javascript:'\nSmartlook.setGlobalEventProperties({\n  globalEventProperties: {\n    global: "property",\n    sample: "test"\n  },\n  immutable: true\n});\n      '},ionic:{typescript:'\nsmartlook.setGlobalEventProperties(new GlobalEventProperties({sample: "property"}, true);\nsmartlook.setGLobalEventProperty(new setGlobalEventProperty("sample", "property", true);\n      '}},mdxType:"CodeBlock"}),Object(r.b)(s.c,{kind:"example",snippets:{ios:{swift:'\nSmartlook.setGlobalEventProperty(value: "value", forName: "my-property");\nSmartlook.setGlobalEventProperty(value: "immutable-value", forName: "my-immutable-property", options: .immutable)\n      ',"objective-c":'\n[Smartlook setGlobalEventPropertyValue:@"value" forName:@"my-property"];\n[Smartlook setGlobalEventPropertyValue:@"immutable-value" forName:@"my-immutable-property" withOptions:SLPropertyOptionImmutable];\n    '},xamarin:{csharp:'\nSmartlook.Analytics.SetGlobalEventProperty("prop1", "value1");\nSmartlook.Analytics.SetGlobalEventProperty("immutable-prop", "immutable value", Smartlook.Analytics.PropertyOptions.Immutable);\n      '}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{invisibleOn:"unreal",mdxType:"TextBlock"},"\nProperties set to be **immutable** have the **highest** priority and once set they **cannot be overridden** (only removed).\n"),Object(r.b)(s.k,{kind:"note",invisibleOn:"unreal",mdxType:"TextBlock"},"\nGlobal event properties have higher a priority so in the merging process they will override custom properties with the same key.\n"),Object(r.b)("h2",{id:"remove-global-event-properties"},"Remove global event properties"),Object(r.b)(s.k,{visibleOn:"unreal",mdxType:"TextBlock"},"\nCurrently not supported by the SDK.\n"),Object(r.b)(s.k,{invisibleOn:"unreal",mdxType:"TextBlock"},"\nA global property with a given key can be removed:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.removeGlobalEventProperty(String propertyKey);\n      ",kotlin:"\nSmartlook.removeGlobalEventProperty(propertyKey: String)\n      "},cocos:{java:"\nSmartlook.removeGlobalEventProperty(String propertyKey);\n      ",kotlin:"\nSmartlook.removeGlobalEventProperty(propertyKey: String)\n      "},cordova:{javascript:"\nSmartlook.removeGlobalEventProperty({key: string});\n      "},ionic:{typescript:"\nsmartlook.removeGlobalEventProperty(SmartlookGlobalEventPropertyKey(key: string))\n      "},ios:{swift:"\nSmartlook.removeGlobalEventProperty(forName: String)\n","objective-c":"\n+ (void)removeGlobalEventPropertyForName:(nonnull NSString *)name;\n      "},flutter:{dart:"\nSmartlook.removeGlobalEventProperty(String key)\n"},unity:{csharp:"\nSmartlookUnity.Smartlook.RemoveGlobalEventProperty(string key);\n"},react:{typescript:"\nSmartlook.removeGlobalEventProperty(key: string);\n"},xamarin:{csharp:"\npublic static void RemoveGlobalEventProperty(string name)\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{invisibleOn:"unreal",mdxType:"TextBlock"},"\nOr all global event properties can be removed at once:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.removeAllGlobalEventProperties();\n      ",kotlin:"\nSmartlook.removeAllGlobalEventProperties()\n      "},cocos:{java:"\nSmartlook.removeAllGlobalEventProperties();\n      ",kotlin:"\nSmartlook.removeAllGlobalEventProperties()\n      "},cordova:{javascript:"\nSmartlook.removeAllGlobalEventProperties();\n      "},ionic:{typescript:"\nsmartlook.removeAllGlobalEventProperties()\n      "},ios:{swift:"\nSmartlook.clearGlobalEventProperties()\n","objective-c":"\n+ (void)clearGlobalEventProperties;\n      "},flutter:{dart:"\nSmartlook.removeAllGlobalEventProperties()\n"},unity:{csharp:"\nSmartlookUnity.Smartlook.RemoveAllGlobalEventProperties();\n"},react:{javascript:"\nSmartlook.removeAllGlobalEventProperties();\n"},xamarin:{csharp:"\npublic static void ClearGlobalEventProperties()\n              "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{kind:"note",invisibleOn:"unreal",mdxType:"TextBlock"},"\nGlobal event properties are stored until they are not removed or the app is uninstalled.\n"),Object(r.b)("h2",{id:"event-tracking-modes"},"Event tracking modes"),Object(r.b)(s.k,{visibleOn:"unreal",mdxType:"TextBlock"},"\nCurrently not supported by the SDK.\n"),Object(r.b)(s.k,{visibleOn:"android,ios,cordova,ionic,xamarin,cocos,flutter,unity,react",mdxType:"TextBlock"},"\nIt can be beneficial to disable some automatically detected events due to security or usability reasons. This can be done using **event tracking modes**:\n"),Object(r.b)(s.k,{visibleOn:"android,cocos",mdxType:"TextBlock"},'\n* `FULL_TRACKING` this a default state. SDK tracks all automatically detected events along with all user defined events.\n* `IGNORE_USER_INTERACTION` disables automatically detected selector (click on a `View`), focus, touch, gesture, and keyboard events.\n* `IGNORE_NAVIGATION_INTERACTION` disables automatically detected navigation events. User defined ones are still being sent.\n* `IGNORE_RAGE_CLICKS` disables automatic detection and tracking of <Link to="/docs/sdk/conceptual/event-tracking#rage-clicks-events">rage click events</Link>.\n* `NO_TRACKING` no automatically detected events are tracked. Only user defined events are still tracked.\n'),Object(r.b)(s.k,{visibleOn:"flutter",mdxType:"TextBlock"},'\n* `EventTrackingMode.FULL_TRACKING` this a default state. SDK tracks all automatically detected events along with all user defined events.\n* `EventTrackingMode.IGNORE_USER_INTERACTION` disables automatically detected selector (click on a `View`), focus, touch, gesture and keyboard events.\n* `EventTrackingMode.IGNORE_NAVIGATION_INTERACTION` disables automatically detected navigation events. User defined ones are still being sent.\n* `EventTrackingMode.IGNORE_RAGE_CLICKS` disables automatic detection and tracking of <Link to="/docs/sdk/conceptual/event-tracking#rage-clicks-events">rage click events</Link>.\n* `EventTrackingMode.NO_TRACKING` no automatically detected events are tracked. Only user defined events are still tracked.\n'),Object(r.b)(s.k,{visibleOn:"unity",mdxType:"TextBlock"},'\n* `SmartlookUnity.Smartlook.EventTrackingMode.FULL_TRACKING` this a default state. SDK tracks all automatically detected events along with all user defined events.\n* `SmartlookUnity.Smartlook.EventTrackingMode.IGNORE_USER_INTERACTION` disables automatically detected selector (click on a `View`), focus, touch, gesture and keyboard events.\n* `SmartlookUnity.Smartlook.EventTrackingMode.IGNORE_NAVIGATION_INTERACTION` disables automatically detected navigation events. User defined ones are still being sent.\n* `SmartlookUnity.Smartlook.EventTrackingMode.IGNORE_RAGE_CLICKS` disables automatic detection and tracking of <Link to="/docs/sdk/conceptual/event-tracking#rage-clicks-events">rage click events</Link>.\n* `SmartlookUnity.Smartlook.EventTrackingMode.NO_TRACKING` no automatically detected events are tracked. Only user defined events are still tracked.\n'),Object(r.b)(s.k,{visibleOn:"react",mdxType:"TextBlock"},'\n* `Smartlook.EventTrackingMode.FullTracking` this a default state. SDK tracks all automatically detected events along with all user defined events.\n* `Smartlook.EventTrackingMode.IgnoreUserInteraction` disables automatically detected selector (click on a `View`), focus, touch, gesture and keyboard events.\n* `Smartlook.EventTrackingMode.IgnoreNavigationInteraction` disables automatically detected navigation events. User defined ones are still being sent.\n* `Smartlook.EventTrackingMode.IgnoreRageClicks` disables automatic detection and tracking of <Link to="/docs/sdk/conceptual/event-tracking#rage-clicks-events">rage click events</Link>.\n* `Smartlook.EventTrackingMode.NoTracking` no automatically detected events are tracked. Only user defined events are still tracked.\n'),Object(r.b)(s.k,{visibleOn:"ios",mdxType:"TextBlock"},'\n* `fullTracking`: this a default state. SDK tracks all automatically detected events along with all user defined events.\n* `ignoreUserInteractionEvents`: disables automatically detected selector (click on a `View`), focus, touch, gesture and keyboard events.\n* `ignoreNavigationInteraction`: disables automatically detected navigation events. User defined ones are still being sent.\n* `ignoreRageClicksEvents`: disables automatic detection and tracking of <Link to="/docs/sdk/conceptual/event-tracking#rage-clicks-events">rage click events</Link>.\n* `noTracking`: no automatically detected events are tracked. Only user defined events are still tracked.\n'),Object(r.b)(s.k,{visibleOn:"cordova",mdxType:"TextBlock"},'\n* `Smartlook.EventTrackingMode.FULL_TRACKING` this a default state. SDK tracks all automatically detected events along with all user defined events.\n* `Smartlook.EventTrackingMode.IGNORE_USER_INTERACTION` disables automatically detected selector (click on a `View`), focus, touch, gesture and keyboard events.\n* `Smartlook.EventTrackingMode.IGNORE_NAVIGATION_INTERACTION` disables automatically detected navigation events. User defined ones are still being sent.\n* `Smartlook.EventTrackingMode.IGNORE_RAGE_CLICKS` disables automatic detection and tracking of <Link to="/docs/sdk/conceptual/event-tracking#rage-clicks-events">rage click events</Link>.\n* `Smartlook.EventTrackingMode.NO_TRACKING` no automatically detected events are tracked. Only user defined events are still tracked.\n'),Object(r.b)(s.k,{visibleOn:"ionic",mdxType:"TextBlock"},'\n* `SmartlookEventTrackingMode.FULL_TRACKING()`: this a default state. SDK tracks all automatically detected events along with all user defined events.\n* `SmartlookEventTrackingMode.IGNORE_USER_INTERACTION()`: automatically detected events will not be tracked. User defined events are still enabled.\n* `Smartlook.EventTrackingMode.IGNORE_NAVIGATION_INTERACTION()` disables automatically detected navigation events. User defined ones are still being sent.\n* `Smartlook.EventTrackingMode.IGNORE_RAGE_CLICKS()` disables automatic detection and tracking of <Link to="/docs/sdk/conceptual/event-tracking#rage-clicks-events">rage click events</Link>.\n* `Smartlook.EventTrackingMode.NO_TRACKING()`: no analytic events are enabled.\n'),Object(r.b)(s.k,{visibleOn:"xamarin",mdxType:"TextBlock"},'\n  Tracking modes are defined in the `EventTrackingMode` enumeration:\n* `FullTracking`: this a default state. SDK tracks all automatically detected events along with all user defined events.\n* `IgnoreUserInteraction`: automatically detected events will not be tracked. User defined events are still enabled.\n* `IgnoreNavigationInteraction`: disables automatically detected navigation events. User defined ones are still being sent.\n* `IgnoreRageClicks`: disables automatic detection and tracking of <Link to="/docs/sdk/conceptual/event-tracking#rage-clicks-events">rage click events</Link>.\n* `NoTracking`: no analytic events are enabled.\n'),Object(r.b)(s.k,{visibleOn:"android,cordova,ionic",mdxType:"TextBlock"},"\n### Setup with event tracking modes\nSingle or a combination of event tracking modes can be set right at the SDK setup:  \n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.SetupOptionsBuilder setupOptionsBuilder = new Smartlook.SetupOptionsBuilder(API_KEY)\n        .setEventTrackingModes(List<EventTrackingMode> eventTrackingModes);\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build());\n      ",kotlin:"\nval setupOptionsBuilder = Smartlook.SetupOptionsBuilder(API_KEY)\n        .setEventTrackingModes(eventTrackingModes: List<EventTrackingMode>)\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build())\n      "},cordova:{javascript:"\nSmartlook.setupAndStartRecording({smartlookAPIKey: string, eventTrackingModes: [Smartlook.EventTrackingMode]});\n      "},ionic:{typescript:"\nvar builder = new SmartlookSetupConfigBuilder(smartlookAPIKey: string)\n        .eventTrackingModes(eventTrackingModes: SmartlookEventTrackingModes);\n\nSmartlook.setupAndStartRecording(builder.build());\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"android,ios,cordova,ionic,xamarin,cocos,flutter,unity,react",mdxType:"TextBlock"},"\n### Set event tracking modes\nSingle or a combination of event tracking modes can be set any time after SDK setup by using the following:  \n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.setEventTrackingMode(EventTrackingMode eventTrackingMode);\nSmartlook.setEventTrackingModes(List<EventTrackingMode> eventTrackingModes);\n      ",kotlin:"\nSmartlook.setEventTrackingMode(eventTrackingMode: EventTrackingMode);\nSmartlook.setEventTrackingModes(eventTrackingModes: List<EventTrackingMode>);\n      "},cordova:{javascript:"\nSmartlook.setEventTrackingMode({eventTrackingMode: Smartlook.EventTrackingMode});\nSmartlook.setEventTrackingModes({eventTrackingModes: Smartlook.EventTrackingMode[]});\n      "},ionic:{typescript:"\nSmartlook.setEventTrackingMode(eventTrackingMode: SmartlookEventTrackingMode);\nSMartlook.setEventTrackingModes(eventTrackingModes: SmartlookEventTRackingModes);\n      "},ios:{swift:"\nclass func Smartlook.setEventTrackingMode(to: Smartlook.EventTrackingMode)\nclass func Smartlook.setEventTrackingModes(to: [Smartlook.EventTrackingMode])\n","objective-c":"\n+ (void)setEventTrackingModeTo:(SLEventTrackingMode _Nonnull)eventTrackingMode;\n+ (void)setEventTrackingModesTo:(NSArray<SLEventTrackingMode> * _Nonnull)eventTrackingModes;\n      "},xamarin:{csharp:"\npublic static void SetEventTrackingMode(EventTrackingMode eventTrackingMode)\npublic static void SetEventTrackingModes(EventTrackingMode[] eventTrackingModes)\n      "},cocos:{java:"\nSmartlook.setEventTrackingMode(EventTrackingMode eventTrackingMode);\nSmartlook.setEventTrackingModes(List<EventTrackingMode> eventTrackingModes);\n      ",kotlin:"\nSmartlook.setEventTrackingMode(eventTrackingMode: EventTrackingMode);\nSmartlook.setEventTrackingModes(eventTrackingModes: List<EventTrackingMode>);\n      "},flutter:{dart:"\nSmartlook.setEventTrackingMode(EventTrackingMode eventTrackingMode);\nSmartlook.setEventTrackingModes(List<EventTrackingMode> eventTrackingModes);\n"},unity:{csharp:"\nSmartlookUnity.Smartlook.setEventTrackingMode(EventTrackingMode eventTrackingMode);\nSmartlookUnity.Smartlook.setEventTrackingModes(List<EventTrackingMode> eventTrackingModes);\n"},react:{typescript:"\nSmartlook.setEventTrackingMode(eventTrackingMode: Smartlook.EventTrackingMode);\nSmartlook.setEventTrackingModes(eventTrackingModes: Smartlook.EventTrackingMode[]);\n"}},mdxType:"CodeBlock"}),Object(r.b)(s.c,{kind:"example",snippets:{ionic:{typescript:"\nSmartlook.setEventTrackingMode(SmartlookEventTrackingMode.FULL_TRACKING());\nSmartlook.setEventTrackingModes(new SmartlookEventTrackingModes([SmartlookEventTrackingMode.FULL_TRACKING()]);\n      "},react:{typescript:"\nSmartlook.setEventTrackingMode(Smartlook.EventTrackingMode.IgnoreUserInteraction);\nSmartlook.setEventTrackingModes([Smartlook.EventTrackingMode.IgnoreUserInteraction, Smartlook.EventTrackingMode.IgnoreRageClicks]);\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{kind:"note",visibleOn:"android,ios,cordova,ionic,xamarin",mdxType:"TextBlock"},'\nFurther info about event tracking modes could be found in the <Link to="/docs/sdk/conceptual/event-tracking">Event Tracking</Link> conceptual document.\n\n\nAlso take a look at the [pin code keyboard sample](/docs/sdk/cookbooks/secure-custom-keyboard), demonstrating usage of analytic event modes.\n'),Object(r.b)(s.k,{visibleOn:"android,ios,xamarin",mdxType:"TextBlock"},"\n### List event tracking modes\nAll currently active event tracking modes can be listed by calling:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.currentEventTrackingModes();\n      ",kotlin:"\nSmartlook.currentEventTrackingModes()\n      "},ios:{swift:"\nclass func Smartlook.currentEventTrackingModes() -> [Smartlook.EventTrackingMode]\n","objective-c":"\n+ (nonnull NSArray<SLEventTrackingMode> *)currentEventTrackingModes;\n      "},xamarin:{csharp:"\npublic static EventTrackingMode[] CurrentEventTrackingModes\n      "}},mdxType:"CodeBlock"}),Object(r.b)("h1",{id:"rendering"},"Rendering"),Object(r.b)(s.k,{visibleOn:"unreal",mdxType:"TextBlock"},"\nCurrently not supported by the SDK.\n"),Object(r.b)(s.k,{visibleOn:"android,ios,cordova,ionic,react,flutter,cocos,unity,xamarin",mdxType:"TextBlock"},"\nSDK can use different methods of capturing screen image data. These are called **rendering modes**.\n\n\n## Set rendering mode\n\n\n"),Object(r.b)(s.k,{kind:"important",visibleOn:"cocos",mdxType:"TextBlock"},"\nNot all rendering modes are available on this platform. Only RenderingMode.NO_RENDERING or RenderingMode.NATIVE are available.\n"),Object(r.b)(s.k,{visibleOn:"android,cocos",mdxType:"TextBlock"},"\nA rendering mode can be changed on SDK setup using `builder`:\n"),Object(r.b)(s.k,{visibleOn:"ios,cordova,ionic,xamarin",mdxType:"TextBlock"},"\nA rendering mode can be set on SDK setup, e.g.:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.SetupOptionsBuilder setupOptionsBuilder = new Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(RenderingMode renderingMode);\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build());\n      ",kotlin:"\nval setupOptionsBuilder = Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(renderingMode: RenderingMode)\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build())\n      "},cocos:{java:"\nSmartlook.SetupOptionsBuilder setupOptionsBuilder = new Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(RenderingMode renderingMode);\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build());\n      ",kotlin:"\nval setupOptionsBuilder = Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(renderingMode: RenderingMode)\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build())\n      "},cordova:{javascript:"\nSmartlook.setupAndStartRecording({smartlookAPIKey: string, renderingMode: Smartlook.RenderingMode});\n      "},ionic:{typescript:"\nvar builder = new SmartlookSetupConfigBuilder(smartlookAPIKey: string)\n        .renderingMode(renderingMode: SmartlookRenderingMode);\n\nSmartlook.setupAndStartRecording(builder.build());\n      "},ios:{swift:"\nSmartlook.setup(key: API_KEY, options: [.renderingMode: Smartlook.RenderingMode.wireframe]);\n","objective-c":'\n[Smartlook setupWithKey:@"API_KEY" options:@{ SLSetupOptionRenderingModeOptionsKey: SLRenderingModeOptionBlueprintWireframe }];\n      '}},mdxType:"CodeBlock"}),Object(r.b)(s.c,{kind:"example",snippets:{xamarin:{csharp:'\nAnalytics.SetupOptions smartlookSetupOptions = new Analytics.SetupOptions(\n  renderingMode: Analytics.RenderingMode.Wireframe,\n  renderingModeOption: Analytics.RenderingModeOption.IconBlueprint\n );      \n Smartlook.Analytics.Setup("API_KEY", smartlookSetupOptions);\n      '}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"android,ios,cordova,ionic,xamarin",mdxType:"TextBlock"},"\nOr at anytime during an application run by using thew following:\n"),Object(r.b)(s.k,{visibleOn:"flutter,cocos",mdxType:"TextBlock"},"\nRendering mode can be set anytime during application run using:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.setRenderingMode(RenderingMode renderingMode);\n      ",kotlin:"\nSmartlook.setRenderingMode(renderingMode: RenderingMode)\n      "},cocos:{java:"\nSmartlook.setRenderingMode(RenderingMode String renderingMode);\n      ",kotlin:"\nSmartlook.setRenderingMode(renderingMode: RenderingMode)\n      "},cordova:{javascript:"\nSmartlook.setRenderingMode({renderingMode: Smartlook.RenderingMode});\n      "},ionic:{typescript:"\nsmartlook.setRenderingMode(renderingMode: SmartlookRenderingMode);\n      "},ios:{swift:"\nclass func setRenderingMode(to renderingMode: Smartlook.RenderingMode)\n","objective-c":"\n+ (void)setRenderingModeTo:(nonnull SLRenderingMode)renderingMode;\n      "},flutter:{dart:"\nenum SmartlookRenderingMode { native, no_rendering, wireframe }\n\n\nSmartlook.setRenderingMode(SmartlookRenderingMode renderingMode);\n"},unity:{csharp:"\nSmartlookUnity.Smartlook.SetRenderingMode(RenderingModeType renderingMode);\n"},react:{typescript:"\nSmartlook.setRenderingMode(renderingMode: Smartlook.RenderingMode); // Smartlook.RenderingMode.Native/NoRendering/Wireframe\n"},xamarin:{csharp:"\npublic static void SetRenderingMode(RenderingMode renderingMode, RenderingModeOption? renderingModeOption = null)\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"flutter",mdxType:"TextBlock"},"\nPlease note that on flutter, to fully support **wireframe** mode, you have to add **SmartlookHelperWidget** as the root widget of your app.\n"),Object(r.b)(s.c,{kind:"example",snippets:{flutter:{dart:"\nclass MyApp extends StatelessWidget {\n  @override\n  Widget build(BuildContext context) {\n    return SmartlookHelperWidget(\n      child: MaterialApp(\n        title: 'Flutter App',\n        home: HomeScreen(),\n      ),\n    );\n  }\n}\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.c,{kind:"example",snippets:{ionic:{typescript:"\nSmartlook.setRenderingMode(SmartlookRenderingMode.NATIVE());\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"android,ios,cordova,ionic",mdxType:"TextBlock"},"\nRendering modes available are following:\n"),Object(r.b)(s.k,{visibleOn:"android",mdxType:"TextBlock"},"\n* `RenderingMode.NATIVE`\n* `RenderingMode.WIREFRAME`\n* `RenderingMode.NO_RENDERING`\n"),Object(r.b)(s.c,{snippets:{ios:{swift:"\nSmartlook.RenderingMode.native\nSmartlook.RenderingMode.wireframe\nSmartlook.RenderingMode.noRendering\n","objective-c":"\nSLRenderingMode const SLRenderingModeNative;\nSLRenderingMode const SLRenderingModeWireframe;\nSLRenderingMode const SLRenderingModeNoRendering;\n      "},xamarin:{csharp:"\npublic enum RenderingMode : uint\n{\n  Native = 0,\n  Wireframe = 1,\n  NoRendering = 2,\n}\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"cordova",mdxType:"TextBlock"},"\n* `Smartlook.RenderingMode.NATIVE`\n* `Smartlook.RenderingMode.NO_RENDERING`\n"),Object(r.b)(s.k,{visibleOn:"ionic",mdxType:"TextBlock"},"\n* `SmartlookRenderingMode.NATIVE()`\n* `SmartlookRenderingMode.NO_RENDERING()`\n"),Object(r.b)(s.k,{kind:"note",visibleOn:"android,ios,cordova,ionic,cocos,xamarin",mdxType:"TextBlock"},"\n`NO_RENDERING` mode does not record any screen data, this is beneficial on screens that include sensitive data, [read more](#no-rendering).\n"),Object(r.b)(s.k,{visibleOn:"android,ios,xamarin",mdxType:"TextBlock"},"\n## Current rendering mode\nCurrently active rendering mode can be obtained by calling:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.currentRenderingMode();\n      ",kotlin:"\nSmartlook.currentRenderingMode()\n      "},ios:{swift:"\nclass func currentRenderingMode() -> RenderingMode\n","objective-c":"\n+ (_Nonnull SLRenderingMode)currentRenderingMode;\n      "},xamarin:{csharp:"\npublic static RenderingMode CurrentRenderingMode\n"}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"android,ios,xamarin",mdxType:"TextBlock"},"\n## Set rendering mode option\n`WIREFRAME` rendering mode can be further configured by `renderingModeOption`.\n\n\nThe rendering mode option can be set on setup:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.SetupOptionsBuilder setupOptionsBuilder = new Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(RenderingMode.WIREFRAME)\n        .setRenderingModeOption(RenderingModeOption renderingModeOption);\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build());\n      ",kotlin:"\nval setupOptionsBuilder = Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(RenderingMode.WIREFRAME)\n        .setRenderingModeOption(renderingModeOption: RenderingModeOption);\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build());\n        "},ios:{swift:"\nclass func  Smartlook.setup(key: String,\n                        options: [\n                          .renderingMode:Smartlook.RenderingMode,\n                          .renderingModeOption:Smartlook.RenderingModeOption\n                        ])\n          ","objective-c":"\n+(void)setupWithKey:(nonnull NSString *)key\n            options:@{\n              SLSetupOptionRenderingModeKey:SLRenderingMode,\n              SLSetupOptionRenderingModeOptionsKey:SLRenderingModeOption\n            };\n        "}},mdxType:"CodeBlock"}),Object(r.b)(s.c,{kind:"example",snippets:{xamarin:{csharp:"\nAnalytics.SetupOptions smartlookSetupOptions = new Analytics.SetupOptions(\n  renderingMode: Analytics.RenderingMode,\n  renderingModeOption: Analytics.RenderingModeOption\n );      \n Smartlook.Analytics.Setup(API_KEY, smartlookSetupOptions);\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"android,ios,xamarin",mdxType:"TextBlock"},"\nOr at anytime during an application run by using the following:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.setRenderingMode(RenderingMode.WIREFRAME, RenderingModeOption renderingModeOption);\n      ",kotlin:"\nSmartlook.setRenderingMode(RenderingMode.WIREFRAME, renderingModeOption: RenderingModeOption)\n      "},ios:{swift:"\nclass func setRenderingMode(to renderingMode: Smartlook.RenderingMode, option renderingModeOption: Smartlook.RenderingModeOption?)\n","objective-c":"\n+ (void)setRenderingModeTo:(nonnull SLRenderingMode)renderingMode withOption:(nullable SLRenderingModeOption)renderingModeOption\n      "},xamarin:{csharp:"\npublic static void SetRenderingMode(RenderingMode renderingMode, RenderingModeOption? renderingModeOption = null)\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"android,ios,xamarin",mdxType:"TextBlock"},"\nRendering mode options for `WIREFRAME` rendering mode are following:\n"),Object(r.b)(s.k,{visibleOn:"android",mdxType:"TextBlock"},"\n* `RenderingMode.WIREFRAME`\n* `RenderingMode.BLUEPRINT`\n* `RenderingMode.ICON_BLUEPRINT`\n"),Object(r.b)(s.c,{snippets:{ios:{swift:"\nSmartlook.RenderingModeOption.none\nSmartlook.RenderingModeOption.colorWireframe\nSmartlook.RenderingModeOption.blueprintWireframe\nSmartlook.RenderingModeOption.iconBlueprintWireframe\n","objective-c":"\nSLRenderingModeOption const SLRenderingModeOptionNone;\nSLRenderingModeOption const SLRenderingModeOptionColorWireframe;\nSLRenderingModeOption const SLRenderingModeOptionBlueprintWireframe;\nSLRenderingModeOption const SLRenderingModeOptionIconBlueprintWireframe;\n      "},xamarin:{csharp:"\npublic enum RenderingModeOption : uint\n{\n  None = 0,\n  Wireframe = 1,\n  Blueprint = 2,\n  IconBlueprint = 3,\n}\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"android,ios,xamarin",mdxType:"TextBlock"},"\n## Current rendering mode option\nCurrently active rendering mode option can be obtained by calling:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.currentRenderingModeOption();\n      ",kotlin:"\nSmartlook.currentRenderingModeOption()\n      "},ios:{swift:"\nclass func currentRenderingModeOption() -> RenderingModeOption?\n","objective-c":"\n+ (_Nullable SLRenderingModeOption)currentRenderingModeOption;\n      "},xamarin:{csharp:"\npublic static RenderingModeOption CurrentRenderingModeOption\n"}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"android",mdxType:"TextBlock"},"\n# Network intercepting\nAn applicationâ€™s HTTP traffic can be tracked using the network inceptor provided by the SDK. This feature only currently available for **OkHttp** HTTP/REST communication library.\n"),Object(r.b)(s.k,{kind:"note",visibleOn:"android",mdxType:"TextBlock"},"\nIn case your application is using another HTTP library that allows intercepting, please feel free to submit a feature request on our [github](https://github.com/smartlook/smartlook-android-sdk).\n"),Object(r.b)(s.k,{visibleOn:"android",mdxType:"TextBlock"},"\n## OkHttp interceptor\nSmartlook interceptor can be added as a another `NetworkInterceptor` when creating a `OkHttpClient` like this:\n"),Object(r.b)(s.c,{kind:"example",snippets:{android:{java:"\nOkHttpClient client = new OkHttpClient.Builder()\n    .addNetworkInterceptor(new SmartlookOkHttpInterceptor())\n    .build();\n      ",kotlin:"\nval client = OkHttpClient.Builder()\n    .addNetworkInterceptor(SmartlookOkHttpInterceptor())\n    .build()\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"android",mdxType:"TextBlock"},"\nSmartlook SDK will **not read or send out any body data**, it is reading and sending only these request metadata:\n* **Request URL** that can be stripped of any sensitive data -> read more.\n* **Http method** used for this request.\n* **Request headers** that can be filtered out so they do not leak any sensitive data.\n* **Response headers** that are filtered out so they do not leak any sensitive data.\n* **Protocol** negotiated by this connection.\n* **Duration** between request and response/failure.\n* **Request status** stating if the request was successful or eventually how it failed, can be one of the following:\n  * Ok\n  * Error\n  * Abort\n  * Timeout\n* **Status code** of http response.\n* Flag stating if response was received from the **cache**.\n"),Object(r.b)(s.k,{kind:"note",visibleOn:"android",mdxType:"TextBlock"},"\nAll intercepted requests can be displayed in **dev tools** on every recording.\n"),Object(r.b)(s.k,{visibleOn:"android",mdxType:"TextBlock"},"\n### Url masks\nSensitive parts of request URLs can be hidden using `UrlMask`:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nnew UrlMask(String regex);\nnew UrlMask(String regex, String replaceWith);\n      ",kotlin:"\nUrlMask(regex: String)\nUrlMask(regex: String, replaceWith: String)\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{kind:"note",visibleOn:"android",mdxType:"TextBlock"},"\nIf `replaceWith` `String` is not defined explicitly the default replace `String` is used.\n"),Object(r.b)(s.k,{visibleOn:"android",mdxType:"TextBlock"},"\n`UrlMask`s can be added using `SmartlookOkHttpInterceptor.Builder`:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nnew SmartlookOkHttpInterceptor.Builder()\n                .addUrlMask(UrlMask urlMask)\n                .build();\n      ",kotlin:"\nSmartlookOkHttpInterceptor.Builder()\n                .addUrlMask(urlMask: UrlMask)\n                .build()\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{kind:"example",visibleOn:"android",mdxType:"TextBlock"},'\nIn this example SDK is intercepting a request with a URL containing a sensitive query named `secret`:\n\n\n```https://example.com/page?secret=password&second=query```\n\n\nThe content of this sensitive query can be hidden for intercepting using `UrlMask`:\n<CodeBlock\n  snippets={{\n    android: {\n      java: `\nSmartlookOkHttpInterceptor interceptor = new SmartlookOkHttpInterceptor.Builder()\n        .addUrlMask(new UrlMask("(name=)[^&]+(&*)", "$1&lt;sensitive&gt;$2"))\n        .build();\\n\nOkHttpClient client = new OkHttpClient.Builder()\n        .addNetworkInterceptor(interceptor)\n        .build();\n      `,\n      kotlin: `\nval interceptor = SmartlookOkHttpInterceptor.Builder()\n        .addUrlMask(UrlMask("(name=)[^&]+(&*)", "$1&lt;sensitive&gt;$2"))\n        .build()\\n\nval client = OkHttpClient.Builder()\n        .addNetworkInterceptor(interceptor)\n        .build()\n      `,\n    },\n  }}\n/>\n\n\nLike the above shown `UrlMask` intercepted request, it will have the following URL stored:\n\n\n```https://example.com/page?secret=&lt;sensitive&gt;&second=query```\n'),Object(r.b)(s.k,{visibleOn:"android",mdxType:"TextBlock"},'\n### Sensitive headers\n\n\nIntercepted headers can contain sensitive data, so they need to be filtered out by their name. This can be done using `sensitiveHeaderNameRegexps`, this list of sensitive header names contains these regular expressions by default:\n* `".*csrf.*"`\n* `".*token.*"`\n* `".*auth.*"`\n* `".*key.*"`\n* `".*cookie.*"`\n\n\nA custom list of sensitive header name regular expressions can be defined by the following:\n'),Object(r.b)(s.c,{snippets:{android:{java:"\nnew SmartlookOkHttpInterceptor.Builder()\n        .addSensitiveHeaderNameRegex(String headerRegex)\n        .build();\n      ",kotlin:"\nSmartlookOkHttpInterceptor.Builder()\n        .addSensitiveHeaderNameRegex(headerRegex: String)\n        .build()\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{kind:"important",visibleOn:"android",mdxType:"TextBlock"},"\nIf at least one sensitive header name regex is added, default ones (shown above) are not going to be used.\n"),Object(r.b)("h1",{id:"utility-methods"},"Utility methods"),Object(r.b)(s.k,{visibleOn:"android,cordova,ionic,flutter,unity,react,cocos",mdxType:"TextBlock"},"\n## Install referrer\nWhen an application is installed from the **Google Play Store**, Smartlook SDK **automatically** tracks install referrer.\n\n\nA custom referrer can also be set by using the following:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.setReferrer(String referrer, String source);\n      ",kotlin:"\nSmartlook.setReferrer(referrer: String, source: String)\n      "},cocos:{java:"\nSmartlook.setReferrer(String referrer, String source);\n      ",kotlin:"\nSmartlook.setReferrer(referrer: String, source: String)\n      "},cordova:{javascript:"\nSmartlook.setReferrer({referrer: string, source: string});\n      "},ionic:{typescript:"\nsmartlook.setReferrer(new SmartlookReferrer(referrer: string, source: string))\n      "},flutter:{dart:"\nSmartlook.setReferrer(String referrer, String source);\n"},unity:{csharp:"\nSmartlookUnity.Smartlook.SetReferrer(string referrer, string source);\n"},react:{typescript:"\nSmartlook.setReferrer(referrer: string, source: string);\n"}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{kind:"note",visibleOn:"android,cocos",mdxType:"TextBlock"},"\nReferrer value and source of installation are stored per visitor and can be viewed in the Smartlook Dashboard.\n"),Object(r.b)("h2",{id:"dashboard-session-url"},"Dashboard session URL"),Object(r.b)(s.k,{visibleOn:"unreal",mdxType:"TextBlock"},"\nCurrently not supported by the SDK.\n"),Object(r.b)(s.k,{invisibleOn:"unreal",mdxType:"TextBlock"},"\nA `URL` leading to the Smartlook Dashboard for a currently recorded session can be obtained like this:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.getDashboardSessionUrl(boolean withCurrentTimestamp);\n      ",kotlin:"\nSmartlook.getDashboardSessionUrl(withCurrentTimestamp: Boolean)\n      "},cocos:{java:"\nSmartlook.getDashboardSessionUrl(boolean withCurrentTimestamp);\n      ",kotlin:"\nSmartlook.getDashboardSessionUrl(withCurrentTimestamp: Boolean)\n      "},cordova:{javascript:"\n Smartlook.getDashboardSessionUrl({withCurrentTimestamp: boolean}, successCallback: function(dashboardSessionUrl: string));\n      "},ionic:{typescript:"\nsmartlook.getDashboardSessionUrl(new SmartlookDashboardSessionUrl(withCurrentTimestamp: boolean)): Promise<string>\n      "},ios:{swift:"\nclass func getDashboardSessionURL(withCurrentTimestamp withTimestamp: Bool) -> URL?\n","objective-c":"\n+ (nullable NSURL *)getDashboardSessionURLWithCurrentTimestamp:(BOOL)withTimestamp;\n      "},flutter:{dart:"\nSmartlook.getDashboardSessionUrl(bool withCurrentTimestamp);\n"},unity:{csharp:"\nSmartlookUnity.Smartlook.GetDashboardSessionUrl(bool withCurrentTimestamp);\n"},react:{typescript:"\nSmartlook.getDashboardSessionUrl(withCurrentTimestamp = false): Promise<string>;\n"},xamarin:{csharp:"\npublic static Uri DashboardSessionUri(bool withCurrentTimestamp = false)"}},mdxType:"CodeBlock"}),Object(r.b)(s.c,{kind:"example",snippets:{cordova:{javascript:"\n Smartlook.getDashboardSessionUrl(\n  {withCurrentTimestamp: true},\n  function (dashboardSessionUrl) {\n    alert('Dashboard session URL: ' + dashboardSessionUrl);\n  }\n)\n      "},ionic:{typescript:"\nsmartlook.getDashboardSessionUrl(new SmartlookDashboardSessionUrl(false))).then((dashboardSessionUrl) => {\n  alert(dashboardSessionUrl)\n});\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{invisibleOn:"unreal",mdxType:"TextBlock"},"\nIf `withCurrentTimestamp` is set to `true` link it will include information about the current recording timestamp.\nThis will ensure that the player will start playing the session at the moment when `getDashboardSessionUrl` was called.\n"),Object(r.b)(s.k,{kind:"note",invisibleOn:"unreal",mdxType:"TextBlock"},"\nThis URL can be opened only by someone who has access to your dashboard. This is **not a public shareable link**.\n"),Object(r.b)("h2",{id:"dashboard-visitor-url"},"Dashboard visitor URL"),Object(r.b)(s.k,{visibleOn:"unreal",mdxType:"TextBlock"},"\nCurrently not supported by the SDK.\n"),Object(r.b)(s.k,{invisibleOn:"unreal",mdxType:"TextBlock"},"\nA `URL` leading to the Smartlook Dashboard for a currently recorded visitor can be obtained like this:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.getDashboardVisitorUrl();\n      ",kotlin:"\nSmartlook.getDashboardVisitorUrl()\n      "},cocos:{java:"\nSmartlook.getDashboardVisitorUrl();\n      ",kotlin:"\nSmartlook.getDashboardVisitorUrl()\n      "},cordova:{javascript:"\n Smartlook.getDashboardVisitorUrl(successCallback: function(dashboardSessionUrl: string));\n      "},ionic:{typescript:"\nsmartlook.getDashboardVisitorUrl(): Promise<string>\n      "},ios:{swift:"\nclass func getDashboardVisitorURL() -> URL?","objective-c":"\n+ (nullable NSURL *)getDashboardVisitorURL;\n      "},flutter:{dart:"\nSmartlook.getDashboardVisitorUrl();\n"},unity:{csharp:"\nSmartlookUnity.Smartlook.GetDashboardVisitorUrl();\n"},react:{typescript:"\nSmartlook.getDashboardVisitorUrl(): Promise<string>;\n"},xamarin:{csharp:"\npublic static Uri DashboardVisitorUri\n"}},mdxType:"CodeBlock"}),Object(r.b)(s.c,{kind:"example",snippets:{cordova:{javascript:"\n Smartlook.getDashboardVisitorUrl(\n  function(dashboardVisitorUrl) {\n    alert('Dashboard visitor URL: ' + dashboardVisitorUrl);\n  }\n)\n      "},ionic:{typescript:"\nsmartlook.getDashboardVisitorUrl().then((dashboardVisitorUrl) => {\n  alert(dashboardVisitorUrl)\n});\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{kind:"note",invisibleOn:"unreal",mdxType:"TextBlock"},"\nThis URL can be opened only by someone who has access to your dashboard. This is **not a public sharing link**.\n"),Object(r.b)("h1",{id:"integrations"},"Integrations"),Object(r.b)("h2",{id:"manual-integration"},"Manual integration"),Object(r.b)(s.k,{visibleOn:"android,cordova,ionic,flutter,unity,react,cocos",mdxType:"TextBlock"},"\nSmartlook can be manually integrated into various analytic frameworks using our `IntegrationListener`.\n\n\nListener can be registered like this:\n"),Object(r.b)(s.k,{visibleOn:"ios",mdxType:"TextBlock"},"\nDashboard URL change notifications can be registered to integrate them programmatically into other party analytics frameworks.\n\n\nThe notifications are:\n"),Object(r.b)(s.k,{visibleOn:"xamarin",mdxType:"TextBlock"},"\nApplication can handle dashboard URLs changes and pass the current values to other analytics frameworks by implementing the respective `EventHandler`s:\n"),Object(r.b)(s.c,{kind:"example",snippets:{android:{java:"\nSmartlook.registerIntegrationListener(new IntegrationListener() {\n    @Override\n    public void onSessionReady(@NotNull String dashboardSessionUrl) {\n        AnalyticsTool.trackSession(dashboardSessionUrl);\n    }\n\n    @Override\n    public void onVisitorReady(@NotNull String dashboardVisitorUrl) {\n        AnalyticsTool.trackVisitor(dashboardSessionUrl);\n    }\n});\n      ",kotlin:"\nSmartlook.registerIntegrationListener(object : IntegrationListener {\n    override fun onSessionReady(dashboardSessionUrl: String) {\n      AnalyticsTool.trackSession(dashboardSessionUrl)\n    }\n\n    override fun onVisitorReady(dashboardVisitorUrl: String) {\n      AnalyticsTool.trackVisitor(dashboardSessionUrl)\n    }\n})\n      "},cocos:{java:"\nSmartlook.registerIntegrationListener(new IntegrationListener() {\n    @Override\n    public void onSessionReady(@NotNull String dashboardSessionUrl) {\n        AnalyticsTool.trackSession(dashboardSessionUrl);\n    }\n\n    @Override\n    public void onVisitorReady(@NotNull String dashboardVisitorUrl) {\n        AnalyticsTool.trackVisitor(dashboardSessionUrl);\n    }\n});\n      ",kotlin:"\nSmartlook.registerIntegrationListener(object : IntegrationListener {\n    override fun onSessionReady(dashboardSessionUrl: String) {\n      AnalyticsTool.trackSession(dashboardSessionUrl)\n    }\n\n    override fun onVisitorReady(dashboardVisitorUrl: String) {\n      AnalyticsTool.trackVisitor(dashboardSessionUrl)\n    }\n})\n      "},cordova:{javascript:'\n Smartlook.registerIntegrationListener({\n  onSessionReady: function (dashboardSessionUrl) {\n    TextBlock("Session: " + dashboardSessionUrl);\n  },\n  onVisitorReady: function (dashboardVisitorUrl) {\n    TextBlock("Visitor: " + dashboardVisitorUrl);\n  }\n});\n      '},ionic:{typescript:'\n smartlook.registerIntegrationListener(new SmartlookIntegrationListener(\n  function (dashboardSessionUrl) {\n    alert("Session: " + dashboardSessionUrl);\n  },\n  function (dashboardVisitorUrl) {\n    alert("Visitor: " + dashboardVisitorUrl);\n  }\n));\n      '},flutter:{dart:"\n    class CustomIntegrationListener implements IntegrationListener {\n  void onSessionReady(String dashboardSessionUrl) {\n    print(dashboardSessionUrl);\n  }\n\n\n  void onVisitorReady(String dashboardVisitorUrl) {\n    print(dashboardVisitorUrl);\n  }\n}\n\n\nSmartlook.registerIntegrationListener(new CustomIntegrationListener());\n      "},unity:{csharp:'\n    public class IntegrationListener : SmartlookUnity.IntegrationListener\n{\n    public override void onSessionReady(string dashboardSessionUrl)\n    {\n        Debug.Log("dashboardSessionUrl : " + dashboardSessionUrl);\n    }\n\n\n    public override void onVisitorReady(string dashboardVisitorUrl)\n    {\n        Debug.Log("dashboardVisitorUrl : " + dashboardVisitorUrl);\n    }\n}\n\n\nSmartlookUnity.Smartlook.RegisterIntegrationListener(new IntegrationListener());\n'},react:{typescript:"\nSmartlook.registerIntegrationListener(\n  (visitorUrl: string) => {\n    console.log('app visitor', visitorUrl);\n  },\n  (dashboardUrl: string) => {\n    console.log('app dash', dashboardUrl);\n  },\n);\n"},xamarin:{csharp:"\nvoid c_DashboardSessionUriChanged(object sender, Smartlook.Analytics.DashboardUriChangedEventArgs a)\n{\n  Console.WriteLine(\"AppDelegate: Session Uri changed '{0}''{1}'\", sender, a.dashboardUri);\n}\n \nvoid c_DashboardVisitorUriChanged(object sender, Smartlook.Analytics.DashboardUriChangedEventArgs a)\n{\n  Console.WriteLine(\"AppDelegate: Visitor Uri changed '{0}''{1}'\", sender, a.dashboardUri);\n}\n \nSmartlook.Analytics.DashboardSessionUriChanged += c_DashboardSessionUriChanged;\nSmartlook.Analytics.DashboardVisitorUriChanged += c_DashboardVisitorUriChanged;\n"}},mdxType:"CodeBlock"}),Object(r.b)(s.c,{snippets:{ios:{swift:"\npublic class let dashboardSessionURLChanged: NSNotification.Name\npublic class let dashboardVisitorURLChanged: NSNotification.Name\n      ","objective-c":"\nNSNotificationName const SLDashboardSessionURLChangedNotification;\nNSNotificationName const SLDashboardVisitorURLChangedNotification;\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"android,cordova,ionic,cocos",mdxType:"TextBlock"},"\nListener can be simply unregistered:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.unregisterIntegrationListener();\n      ",kotlin:"\nSmartlook.unregisterIntegrationListener()\n      "},cocos:{java:"\nSmartlook.unregisterIntegrationListener();\n      ",kotlin:"\nSmartlook.unregisterIntegrationListener()\n      "},cordova:{javascript:"\n Smartlook.unregisterIntegrationListener();\n      "},ionic:{typescript:"\n smartlook.unregisterIntegrationListener();\n      "}},mdxType:"CodeBlock"}),Object(r.b)("h3",{id:"integration-samples"},"Integration samples"),Object(r.b)("p",null,"Samples adjusted for specific analytic tools can be found in the ",Object(r.b)("inlineCode",{parentName:"p"},"Integrations documentation:")),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},Object(r.b)(s.e,{to:"/docs/sdk/integrations/amplitude",mdxType:"Link"},"Amplitude")),Object(r.b)("li",{parentName:"ul"},Object(r.b)(s.e,{to:"/docs/sdk/integrations/mixpanel",mdxType:"Link"},"Mixpanel")),Object(r.b)("li",{parentName:"ul"},Object(r.b)(s.e,{to:"/docs/sdk/integrations/heap",mdxType:"Link"},"Heap")),Object(r.b)("li",{parentName:"ul"},Object(r.b)(s.e,{to:"/docs/sdk/integrations/firebase-crashlytics",mdxType:"Link"},"Firebase Crashlytics")),Object(r.b)("li",{parentName:"ul"},Object(r.b)(s.e,{to:"/docs/sdk/integrations/bugsnag",mdxType:"Link"},"Bugsnag"))),Object(r.b)("h2",{id:"automatic-integrations"},"Automatic integrations"),Object(r.b)(s.k,{invisibleOn:"android,ios",mdxType:"TextBlock"},"\nSmartlook SDK automatic integrations into most popular frameworks are in progress.\n"),Object(r.b)(s.k,{visibleOn:"android,ios",mdxType:"TextBlock"},"\nAutomatic integrations provide a simple way of integrating Smartlook into various third-party analytic tools.\n"),Object(r.b)(s.k,{visibleOn:"android,ios",mdxType:"TextBlock"},"\n### Enable integrations\nOne or a list of automatic integrations can be enabled by calling:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.enableIntegration(Integration integration);\nSmartlook.enableIntegrations(List<Integration> integrations);\n      ",kotlin:"\nSmartlook.enableIntegration(integration: Integration)\nSmartlook.enableIntegrations(integrations: List<Integration>)\n      "},ios:{swift:"\npublic class func Smartlook.enable(integrations: [Smartlook.Integration]>)\n      ","objective-c":"\n+ (void)enableIntegrations:(NSArray<SLIntegration *> * _Nonnull)integrations;\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"android,ios",mdxType:"TextBlock"},'\nSpecific `Integration`s are described in the Integrations documentation:\n- <Link to="/docs/sdk/integrations/amplitude">Amplitude</Link>\n- <Link to="/docs/sdk/integrations/mixpanel">Mixpanel</Link>\n- <Link to="/docs/sdk/integrations/heap">Heap</Link>\n- <Link to="/docs/sdk/integrations/firebase-crashlytics">Firebase Crashlytics</Link>\n- <Link to="/docs/sdk/integrations/bugsnag">Bugsnag</Link>\n'),Object(r.b)(s.k,{visibleOn:"android,ios",mdxType:"TextBlock"},"\n### Disable integrations\nEvery currently enabled `Integration` can be disabled:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.disableIntegration(Integration integration);\nSmartlook.disableIntegrations(List<Integration> integrations);\n      ",kotlin:"\nSmartlook.disableIntegration(integration: Integration)\nSmartlook.disableIntegrations(integrations: List<Integration>)\n      "},ios:{swift:"\npublic class func Smartlook.disable(integrations: [Smartlook.Integration])\n      ","objective-c":"\n+ (void)disableIntegrations:(NSArray<SLIntegration *> * _Nonnull)integrations;\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"android,ios",mdxType:"TextBlock"},"\nOr all currently enabled integrations can be disabled using the following:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.disableAllIntegrations();\n      ",kotlin:"\nSmartlook.disableAllIntegrations()\n      "},ios:{swift:"\npublic class func Smartlook.disableAllIntegrations()\n      ","objective-c":"\n+ (void)disableAllIntegrations;\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{kind:"important",visibleOn:"android,ios",mdxType:"TextBlock"},'\nSmartlook SDK tries to disable automatic integration and removes "integrated" URLs from targeted analytic tools. This however is a "best effort" try and cannot be guaranteed to be successful.\n'),Object(r.b)(s.k,{visibleOn:"android,ios",mdxType:"TextBlock"},"\n### List integrations\nAll currently enabled integrations can be listed:\n"),Object(r.b)(s.c,{snippets:{android:{java:"\nSmartlook.currentEnabledIntegrations();\n      ",kotlin:"\nSmartlook.currentEnabledIntegrations()\n      "},ios:{swift:"\npublic class func Smartlook.currentlyEnabledIntegrations()\n      ","objective-c":"\n+ (NSArray<SLIntegration *> *  _Nonnull)currentlyEnabledIntegrations;\n      "}},mdxType:"CodeBlock"}))}void 0!==O&&O&&O===Object(O)&&Object.isExtensible(O)&&!Object.prototype.hasOwnProperty.call(O,"__filemeta")&&Object.defineProperty(O,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/api_reference.mdx"}}),O.isMDXComponent=!0}}]);
//# sourceMappingURL=961f3c8d-4a0face74a421d256096.js.map