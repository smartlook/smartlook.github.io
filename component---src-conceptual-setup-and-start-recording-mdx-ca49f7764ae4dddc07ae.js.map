{"version":3,"sources":["webpack:///../src/conceptual/setup-and-start-recording.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","kind","invisibleOn","snippets","android","java","kotlin","ios","swift","react","js","unity","csharp","unreal","cocos","cordova","javascript","ionic","typescrit","flutter","dart","xamarin","isMDXComponent"],"mappings":"sQAQaA,G,oBAAe,S,8NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,IAAD,CAAOA,QAAQ,SAAf,2BACA,qBAAG,kBAAIC,WAAW,KAAf,4FACH,6KAA4J,6BAAGA,WAAW,KAAQ,CAC9K,KAAQ,wDADgJ,oBAA5J,KAGA,YAAC,IAAD,CAAWC,KAAK,YAAYC,YAAY,MAAMH,QAAQ,aAAtD,kMAGA,kIACA,YAAC,IAAD,CAAWE,KAAK,UAAUE,SAAU,CAClCC,QAAS,CACPC,KAAM,oPAUNC,OAAQ,0NAUVC,IAAK,CACHC,MAAO,8PAUP,8QAWFC,MAAO,CACLC,GAAI,2JASNC,MAAO,CACLC,OAAQ,8SAgBVC,OAAQ,CACND,OAAQ,yBAIVE,MAAO,CACLT,KAAM,kOAUNC,OAAQ,yMAUVS,QAAS,CACPC,WAAY,4NAQdC,MAAO,CACLC,UAAW,kIAMbC,QAAS,CACPC,KAAM,8LAYRC,QAAS,CACPT,OAAQ,iFAMTb,QAAQ,cACX,4KACA,YAAC,IAAD,CAAWE,KAAK,YAAYF,QAAQ,aAApC,qoBAGA,YAAC,IAAD,CAAWE,KAAK,OAAOC,YAAY,UAAUH,QAAQ,aAArD,6XAGA,iBAAQ,CACN,GAAM,iBADR,iBAGA,kNACA,YAAC,IAAD,CAAWE,KAAK,YAAYF,QAAQ,aAApC,8N,4NAOJH,EAAW0B,gBAAiB","file":"component---src-conceptual-setup-and-start-recording-mdx-ca49f7764ae4dddc07ae.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/smartlook.github.io/smartlook.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Code, CodeBlock, TextBlock, Link, MD, Title } from \"components\";\nimport { usePlatforms } from 'hooks';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Title mdxType=\"Title\">Setup & Start Recording</Title>\n    <p><em parentName=\"p\">{`This section deals with how to setup Smartlook SDK and start recording the application.`}</em></p>\n    <p>{`To start recording, just put the following code into the application. Once the application runs on a device or in a simulator, recording will appear `}<a parentName=\"p\" {...{\n        \"href\": \"https://application.smartlook.com/settings/projects\"\n      }}>{`in the dashboard`}</a>{`.`}</p>\n    <TextBlock kind=\"important\" invisibleOn=\"ios\" mdxType=\"TextBlock\">\nSome **Android simulators** are not very reliable when running low-level libraries like Smartlook. Testing on real devices is preferred when debugging an application that utilizes Smartlook.\n    </TextBlock>\n    <p>{`In order to function properly, the setup should happen as soon as possible in the application life cycle:`}</p>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\nimport android.application.Application;\\n\npublic class MyCustomApplication extends Application {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Smartlook.setupAndStartRecording(API_KEY);\n    }\n}\n      `,\n        kotlin: `\nimport android.application.Application;\\n\nclass MyCustomApplication : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        Smartlook.setupAndStartRecording(API_KEY)\n    }\n}\n      `\n      },\n      ios: {\n        swift: `\ninclude Smartlook\n\\n\n...\n\\n\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n   Smartlook.setup(key: API_KEY)\n   Smartlook.startRecording()\n}\n      `,\n        'objective-c': `\n#include Smartlook\n\\n\n...\n\\n\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n   Smartlook.setup(key: API_KEY)\n   Smartlook.startRecording()\n}\n      `\n      },\n      react: {\n        js: `\n//i.e.\ncomponentDidMount() {\n  Smartlook.setupAndStartRecording(API_KEY);\n  var Smartlook = require(\"smartlook-react-native-wrapper\");\n  ...\n}\n`\n      },\n      unity: {\n        csharp: `\npublic class NewBehaviourScript : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n        SmartlookUnity.Smartlook.SetupAndStartRecording(API_KEY);\n    }\n\\n\n    // Update is called once per frame\n    void Update()\n    {\n        ...\n    }\n}`\n      },\n      unreal: {\n        csharp: `\nUNREAL - C#\n      `\n      },\n      cocos: {\n        java: `\npublic class AppActivity extends Cocos2dxActivity {\n    @Override\n    public void onCreate() {\n        ...\n        // DO OTHER INITIALIZATION BELOW\n        Smartlook.setupAndStartRecording(API_KEY);\n    }\n}\n      `,\n        kotlin: `\nclass AppActivity : Cocos2dxActivity() {\n    override fun onCreate() {\n        ...\n        // DO OTHER INITIALIZATION BELOW\n        Smartlook.setupAndStartRecording(API_KEY)\n    }\n}\n      `\n      },\n      cordova: {\n        javascript: `\nif(document.readyState === \"complete\") {\n  document.addEventListener(\"deviceready\", onDeviceReady, false);\n}\\n\nfunction onDeviceReady() {\n    Smartlook.setupAndStartRecording({smartlookAPIKey: API_KEY});\n}    `\n      },\n      ionic: {\n        typescrit: `\nthis.platform.ready().then(() => {\n    this.smartlook.setupAndStartRecording(new SmartlookSetupConfig(API_KEY));\n}\n      `\n      },\n      flutter: {\n        dart: `\n      class _MyAppState extends State<MyApp> {\n  @override\n  void initState() {\n    super.initState();\n    ...\n    Smartlook.setupAndStartRecording(API_KEY);\n    ...\n  }\n}\n   `\n      },\n      xamarin: {\n        csharp: `\nusing Smartlook;\n...\nSmartlook.Analytics.SetupAndStart(API_KEY);\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`This is basically all that is needed to record the sessions. All other events in the application life cycle are handled by Smartlook automatically.`}</p>\n    <TextBlock kind=\"important\" mdxType=\"TextBlock\">{`\n  It may take several minutes before the recordings appear in the Dashboard. In the default setup, recordings are not uploaded when the device is on a mobile network. For the recordings being available immediately, the device must be on WiFi, or mobile uploads must be enabled in [the project dashboard](https://application.smartlook.com/settings/projects). The recording is not streamed, it is uploaded in chunks and then processed on the server. In depth description when the recordings will be availabe in the project dashboard provides <Link to=\"/docs/sdk/conceptual/when-i-will-see-the-recordings-in-dashboard\">this document</Link>.\n`}</TextBlock>\n    <TextBlock kind=\"note\" invisibleOn=\"android\" mdxType=\"TextBlock\">{`\n  When debugging an **iOS** application with Smartlook, a Main Thread Checker warning which might be accompanied by a short application freeze during the application start is encountered. The freeze does not happen in production builds. Details of how to solve this situation provides this <Link to=\"/docs/sdk/cookbooks/ios-main-thread-check-warning\">technical note</Link>.\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"setup-options\"\n    }}>{`Setup Options`}</h2>\n    <p>{`Smartlook recording can be customized by several parameters. Some of the recording customization options can be set by dedicated methods, some others can be also set as startup options.`}</p>\n    <TextBlock kind=\"important\" mdxType=\"TextBlock\">{`\nNot all options are available on all platforms. For a comprehensive list of all the setup options and related details, consult our <Link to=\"/docs/sdk/api-reference/#setup-configuration\">API reference</Link>.\n`}</TextBlock>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}