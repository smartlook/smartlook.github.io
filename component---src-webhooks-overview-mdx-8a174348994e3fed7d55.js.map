{"version":3,"sources":["webpack:///../src/webhooks/overview.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","href","target","visibleOn","src","webhooks_settings_anomaly_1","webhook_settings","parentName","isMDXComponent"],"mappings":"6UAWaA,EAAe,Q,iOAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,iBACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,IAAD,CAAOA,QAAQ,SAAf,YAJK,0OAK8N,iBAAGC,KAAK,+EAAR,aAL9N,iBAML,kBACE,GAAM,YADR,YAGA,kBACE,GAAM,kCADR,mCAGA,oDAA+B,iBAAGA,KAAK,4BAA4BC,OAAO,UAA3C,yBAA/B,0CACA,mBAAKC,UAAU,cAAcC,IAAKC,MAClC,mBAAKF,UAAU,cAAcC,IAAKE,MAClC,uDACA,kBACE,GAAM,gCADR,iCAGA,4HAA2G,uBAA3G,8BAEA,uBAAK,oBAAMC,WAAW,MAClB,UAAa,iBADZ,inBAuBL,kBACE,GAAM,YADR,YAGA,iJAAgI,0BAAYA,WAAW,KAAvB,2BAAhI,KACA,kBACE,GAAM,qBADR,qBAGA,2LACA,uBAAK,oBAAMA,WAAW,MAClB,UAAa,eACb,WAAc,kCACd,MAAS,6BAHR,oO,+NAkBTV,EAAWW,gBAAiB","file":"component---src-webhooks-overview-mdx-8a174348994e3fed7d55.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/smartlook.github.io/smartlook.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Title, Code, TextBlock } from \"components\";\nimport webhook_settings from 'assets/webhook_settings.png';\nimport webhooks_settings_anomaly_1 from 'assets/webhooks_settings_anomaly_1.png';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Title mdxType=\"Title\">Overview</Title>\nWebhooks are essential part of our API. In opposite to the REST API, that returns data upon a request, webhooks deliver data to you proactively whenever something happens in your project. Currently the webhooks can be triggered by <a href=\"https://updates.smartlook.com/worried-about-anomalies-in-your-events-190172\">anomalies</a> in your data.\n    <h1 {...{\n      \"id\": \"cookbook\"\n    }}>{`Cookbook`}</h1>\n    <h3 {...{\n      \"id\": \"1-set-webhook-url-on-anomalies\"\n    }}>{`1. Set webhook URL on anomalies`}</h3>\n    <p>Webhooks you can set in the <a href=\"https://app.smartlook.com\" target=\"_blank\">Smartlook application</a>. Below is screen how to set webhooks.</p>\n    <img visibleOn=\"android,ios\" src={webhooks_settings_anomaly_1} />\n    <img visibleOn=\"android,ios\" src={webhook_settings} />\n    <p>{`Optionally you can set secret.`}</p>\n    <h3 {...{\n      \"id\": \"2-set-api-on-the-server-side\"\n    }}>{`2. Set API on the server side`}</h3>\n    <p>{`Webhooks are sent as a JSON in a POST HTTP request to the endpoint you specified in the first step. `}<br />{`\nExample of webhook body:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"template\": \"Absolute threshold\",\n    \"anomalyEventName\": \"Errors\",\n    \"params\": {\n        \"projectName\": \"Smartlook Project\",\n        \"projectId\": \"1588faqebe0e421503103a97a\",\n        \"organizationId\": \"c314a9fa49ea858dfa4ebe0e\",\n        \"projectTimeZoneId\": \"Europe/Prague\",\n        \"eventId\": \"event_error\",\n        \"funnelId\": null,\n        \"direction\": \"up\",\n        \"threshold\": 1,\n        \"alertType\": \"eventThresholdAbsolute\",\n        \"anomaly\": {\n            \"date\": \"2021-01-01T21:59:59.999Z\",\n            \"eventsCount\": 13,\n            \"eventsCountDifference\": 12\n        }\n    }\n}\n`}</code></pre>\n    <h1 {...{\n      \"id\": \"security\"\n    }}>{`Security`}</h1>\n    <p>{`When your secret token is set, Smartlook uses it to create a hash signature that we attach to each payload in the header `}<inlineCode parentName=\"p\">{`Smartlook-Signature-256`}</inlineCode>{`.`}</p>\n    <h3 {...{\n      \"id\": \"hash-verification\"\n    }}>{`Hash verification`}</h3>\n    <p>{`The Hash-based message authentication codes (HMAC) uses SHA256 hashing function and is digested as a HEX string. Internally the function may looks like following:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-jsx\",\n        \"metastring\": \"title=\\\"/src/components/hmac.js\\\"\",\n        \"title\": \"\\\"/src/components/hmac.js\\\"\"\n      }}>{`const crypto = require('crypto')\n\nconst secret = SECRET_TOKEN\nconst message = request.body\n\nconst signature = crypto\n        .createHmac('sha256', secret)\n        .update(\\`\\${message}\\`)\n        .digest('hex')\n`}</code></pre>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}