(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{GAHV:function(e,n,a){"use strict";a.r(n),a.d(n,"_frontmatter",(function(){return s})),a.d(n,"default",(function(){return y}));var i=a("Fcif"),t=a("+I+c"),l=(a("mXGw"),a("/FXl")),o=a("TjRS"),r=a("+8zC"),p=(a("NRsk"),a("aD51"),["components"]),s={};void 0!==s&&s&&s===Object(s)&&Object.isExtensible(s)&&!Object.prototype.hasOwnProperty.call(s,"__filemeta")&&Object.defineProperty(s,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/cookbook/android_serialization.mdx"}});var m={_frontmatter:s},d=o.a;function y(e){var n=e.components,a=Object(t.a)(e,p);return Object(l.b)(d,Object(i.a)({},m,a,{components:n,mdxType:"MDXLayout"}),Object(l.b)(r.k,{kind:"important",invisibleOn:"android",mdxType:"TextBlock"},"\nThis guide is mainly focused on Android (Java/Kotlin).\n"),Object(l.b)(r.l,{mdxType:"Title"},"Data serialization"),Object(l.b)("p",null,"When using custom events and global event properties you may need to serialize the data to one of SDKâ€™s supported formats:"),Object(l.b)("ul",null,Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"JSONObject")),Object(l.b)("li",{parentName:"ul"},Object(l.b)("inlineCode",{parentName:"li"},"Bundle")),Object(l.b)("li",{parentName:"ul"},"json ",Object(l.b)("inlineCode",{parentName:"li"},"String"))),Object(l.b)("p",null,"For all examples we going to use this data class as an input to the serialization:"),Object(l.b)(r.b,{snippets:{java:"\npublic class Employee {\n    private String name;\n    private String id;\n    private double salary;\n\n    public Employee(String name, String id, double salary) {\n        this.name = name;\n        this.id = id;\n        this.salary = salary;\n    }\n\n    public String getName() {\n        return name;\n    }\n\n    public String getId() {\n        return id;\n    }\n\n    public double getSalary() {\n        return salary;\n    }\n}\n",kotlin:"\ndata class Employee(val name: String,\n                    val id: String,\n                    salary: Double)\n"},mdxType:"Code"}),Object(l.b)("h2",{id:"serialize-as-an-jsonobject"},"Serialize as an JSONObject"),Object(l.b)(r.b,{snippets:{java:'\nEmployee employee = new Employee("John Dough", "#123456", 1000);\n\nJSONObject serializedEmployee = new JSONObject();\n\ntry {\n    serializedEmployee.put("name", employee.name);\n    serializedEmployee.put("id", employee.id);\n    serializedEmployee.put("salary", employee.salary);\n} catch (JSONException e) {\n    e.printStackTrace();\n}\n',kotlin:'\nval employee = Employee("John Dough", "#123456", 1000)\n\nval serializedEmployee = JSONObject()\n\ntry {\n    serializedEmployee.put("name", employee.name)\n    serializedEmployee.put("id", employee.id)\n    serializedEmployee.put("salary", employee.salary)\n} catch (e: JSONException) {\n    e.printStackTrace()\n}\n'},mdxType:"Code"}),Object(l.b)("h2",{id:"serialize-as-a-bundle"},"Serialize as a Bundle"),Object(l.b)(r.b,{snippets:{java:'\nEmployee employee = new Employee("John Dough", "#123456", 1000);\n\nBundle serializedEmployee = new Bundle();\nserializedEmployee.putString("name", employee.name);\nserializedEmployee.putString("id", employee.id);\nserializedEmployee.putDouble("salary", employee.salary);\n',kotlin:'\nval employee = Employee("John Dough", "#123456", 1000)\n\nval serializedEmployee = new Bundle().apply{\n    putString("name", employee.name)\n    putString("id", employee.id)\n    putDouble("salary", employee.salary)\n}\n'},mdxType:"Code"}),Object(l.b)("h2",{id:"serialize-as-a-json-string"},"Serialize as a json String"),Object(l.b)("p",null,"If you are using ",Object(l.b)("inlineCode",{parentName:"p"},"Gson")," (or any other similar library) you might prefer this way of serializing data for SDK API methods."),Object(l.b)(r.b,{snippets:{java:'\nEmployee employee = new Employee("John Dough", "#123456", 1000);\nString serializedEmployee = gson.toJson(employee);\n',kotlin:'\nval employee = Employee("John Dough", "#123456", 1000)\nval serializedEmployee = gson.toJson(employee)\n'},mdxType:"Code"}))}void 0!==y&&y&&y===Object(y)&&Object.isExtensible(y)&&!Object.prototype.hasOwnProperty.call(y,"__filemeta")&&Object.defineProperty(y,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/cookbook/android_serialization.mdx"}}),y.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-cookbook-android-serialization-mdx-5d67bf737c679d242882.js.map