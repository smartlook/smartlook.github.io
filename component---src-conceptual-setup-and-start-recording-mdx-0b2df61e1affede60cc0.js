(window.webpackJsonp=window.webpackJsonp||[]).push([[15],{"3YZ9":function(e,n,t){"use strict";t.r(n),t.d(n,"_frontmatter",(function(){return c})),t.d(n,"default",(function(){return d}));var o=t("Fcif"),i=t("+I+c"),a=(t("mXGw"),t("/FXl")),r=t("TjRS"),s=t("+8zC"),c=(t("NRsk"),t("aD51"),{});void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/conceptual/setup-and-start-recording.mdx"}});var p={_frontmatter:c},l=r.a;function d(e){var n=e.components,t=Object(i.a)(e,["components"]);return Object(a.b)(l,Object(o.a)({},p,t,{components:n,mdxType:"MDXLayout"}),Object(a.b)(s.k,{mdxType:"Title"},"Setup & Start Recording"),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"This section deals with how to setup Smartlook SDK and start recording the application.")),Object(a.b)("p",null,"To start recording, just put the following code into the application. Once the application runs on a device or in a simulator, recording will appear ",Object(a.b)("a",Object(o.a)({parentName:"p"},{href:"https://application.smartlook.com/settings/projects"}),"in the dashboard"),"."),Object(a.b)(s.j,{kind:"important",invisibleOn:"ios",mdxType:"TextBlock"},"Some **Android simulators** are not very reliable when running low-level libraries like Smartlook. Testing on real devices is preferred when debugging an application that utilizes Smartlook."),Object(a.b)("p",null,"In order to function properly, the setup should happen as soon as possible in the application life cycle:"),Object(a.b)(s.c,{kind:"example",snippets:{android:{java:"\nimport android.application.Application;\n\npublic class MyCustomApplication extends Application {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Smartlook.setupAndStartRecording(API_KEY);\n    }\n}\n      ",kotlin:"\nimport android.application.Application;\n\nclass MyCustomApplication : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        Smartlook.setupAndStartRecording(API_KEY)\n    }\n}\n      "},ios:{swift:"\ninclude Smartlook\n\n\n...\n\n\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n   Smartlook.setup(key: API_KEY)\n   Smartlook.startRecording()\n}\n      ","objective-c":"\n#include Smartlook\n\n\n...\n\n\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n   Smartlook.setup(key: API_KEY)\n   Smartlook.startRecording()\n}\n      "},react:{js:'\n//i.e.\ncomponentDidMount() {\n  var Smartlook = require("smartlook-react-native-wrapper");\n  Smartlook.setupAndStartRecording(API_KEY);\n  ...\n}\n'},unity:{csharp:'\npublic class NewBehaviourScript : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n        SmartlookUnity.SetupOptionsBuilder builder = new SmartlookUnity.SetupOptionsBuilder("API_KEY");\n        SmartlookUnity.Smartlook.SetupAndStartRecording(builder.Build());\n    }\n\n\n    // Update is called once per frame\n    void Update()\n    {\n        ...\n    }\n}'},unreal:{csharp:"\nUNREAL - C#\n      "},cocos:{java:"\npublic class AppActivity extends Cocos2dxActivity {\n    @Override\n    public void onCreate() {\n        ...\n        // DO OTHER INITIALIZATION BELOW\n        Smartlook.setupAndStartRecording(API_KEY);\n    }\n}\n      ",kotlin:"\nclass AppActivity : Cocos2dxActivity() {\n    override fun onCreate() {\n        ...\n        // DO OTHER INITIALIZATION BELOW\n        Smartlook.setupAndStartRecording(API_KEY)\n    }\n}\n      "},cordova:{javascript:'\nif(document.readyState === "complete") {\n  document.addEventListener("deviceready", onDeviceReady, false);\n}\n\nfunction onDeviceReady() {\n    Smartlook.setupAndStartRecording({smartlookAPIKey: API_KEY});\n}    '},ionic:{typescrit:"\nthis.platform.ready().then(() => {\n    this.smartlook.setupAndStartRecording(new SmartlookSetupConfig(API_KEY));\n}\n      "},flutter:{dart:"\n      class _MyAppState extends State<MyApp> {\n  @override\n  void initState() {\n    super.initState();\n    ...\n    SetupOptions options = (\n      new SetupOptionsBuilder('API_KEY')\n    ).build();\n    Smartlook.setupAndStartRecording(options);\n    ...\n  }\n}\n   "},xamarin:{csharp:"\nusing Smartlook;\n...\nSmartlook.Analytics.SetupAndStart(API_KEY);\n      "}},mdxType:"CodeBlock"}),Object(a.b)("p",null,"This is basically all that is needed to record the sessions. All other events in the application life cycle are handled by Smartlook automatically."),Object(a.b)(s.j,{kind:"important",mdxType:"TextBlock"},'\n  It may take several minutes before the recordings appear in the Dashboard. In the default setup, recordings are not uploaded when the device is on a mobile network. For the recordings being available immediately, the device must be on WiFi, or mobile uploads must be enabled in [the project dashboard](https://application.smartlook.com/settings/projects). The recording is not streamed, it is uploaded in chunks and then processed on the server. In depth description when the recordings will be availabe in the project dashboard provides <Link to="/docs/sdk/conceptual/when-i-will-see-the-recordings-in-dashboard">this document</Link>.\n'),Object(a.b)(s.j,{kind:"note",invisibleOn:"android",mdxType:"TextBlock"},'\n  When debugging an **iOS** application with Smartlook, a Main Thread Checker warning which might be accompanied by a short application freeze during the application start is encountered. The freeze does not happen in production builds. Details of how to solve this situation provides this <Link to="/docs/sdk/cookbooks/ios-main-thread-check-warning">technical note</Link>.\n'),Object(a.b)("h2",{id:"setup-options"},"Setup Options"),Object(a.b)("p",null,"Smartlook recording can be customized by several parameters. Some of the recording customization options can be set by dedicated methods, some others can be also set as startup options."),Object(a.b)(s.j,{kind:"important",mdxType:"TextBlock"},'\nNot all options are available on all platforms. For a comprehensive list of all the setup options and related details, consult our <Link to="/docs/sdk/api-reference/#setup-configuration">API reference</Link>.\n'))}void 0!==d&&d&&d===Object(d)&&Object.isExtensible(d)&&!d.hasOwnProperty("__filemeta")&&Object.defineProperty(d,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/conceptual/setup-and-start-recording.mdx"}}),d.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-conceptual-setup-and-start-recording-mdx-0b2df61e1affede60cc0.js.map