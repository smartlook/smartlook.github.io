{"version":3,"sources":["webpack:///../src/api_reference.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","visibleOn","invisibleOn","src","unreal_enable","width","kind","snippets","android","java","kotlin","cordova","javascript","ionic","typescript","ios","swift","flutter","dart","unity","csharp","react","cocos","xamarin","unreal_settings","parentName","unreal_bp_startendsession","unreal","cpp","xml","html","source","unreal_bp_setuserid","unreal_bp_recordevent","to","isMDXComponent"],"mappings":"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","file":"961f3c8d-a3ea666bb33979bf7aed.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/smartlook.github.io/smartlook.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Code, CodeBlock, TextBlock, Link, Image } from \"components\";\nimport { usePlatforms } from 'hooks';\nimport native_rendering_mode from 'assets/rendering_native.png';\nimport wireframe_rendering_mode from 'assets/rendering_wireframe.png';\nimport no_rendering_mode from 'assets/rendering_no_rendering.png';\nimport blueprint_rendering_mode from 'assets/rendering_blueprint.png';\nimport icon_blueprint_rendering_mode from 'assets/rendering_icon_blueprint.png';\nimport unreal_blueprint from 'assets/unreal_blueprint.png';\nimport unreal_bp_startendsession from 'assets/unreal_bp_startendsession.png';\nimport unreal_bp_setuserid from 'assets/unreal_bp_setuserid.png';\nimport unreal_bp_recordevent from 'assets/unreal_bp_recordevent.png';\nimport unreal_enable from 'assets/unreal_enable.png';\nimport unreal_settings from 'assets/unreal_settings.png';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <h1 {...{\n      \"id\": \"lifecycle--recording\"\n    }}>{`Lifecycle & Recording`}</h1>\n    <TextBlock visibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nSmartlook Unreal Engine 4 SDK uses UE4's built in Analytics APIs. Because of this, some APIs available on Smartlook SDKs for other platforms are not available on UE4 SDK. You can learn more about UE4 Analytics APIs here:\n* [UE4 Blueprint Analytics API Reference](https://docs.unrealengine.com/en-US/BlueprintAPI/Analytics/index.html)\n* [UE4 C++ Analytics API Reference](https://docs.unrealengine.com/en-US/API/Runtime/Analytics/Interfaces/IAnalyticsProvider/index.html)\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"sdk-setup-on-application-start\"\n    }}>{`SDK setup (on application start)`}</h2>\n    <TextBlock invisibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nSmartlook SDK **setup** needs to be called only **once during an application’s lifetime** and it should be called **on application startup**. There is **no need to stop** recording explicitly **on application closure**, SDK will stop itself automatically.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nThe best place to setup the SDK is in \\`onCreate()\\` method of your \\`Application\\` class:\n`}</TextBlock>\n    <TextBlock visibleOn=\"cocos\" mdxType=\"TextBlock\">{`\nThe best place to setup the SDK is in \\`onCreate()\\` method of your \\`AppActivity\\` class:\n`}</TextBlock>\n    <TextBlock visibleOn=\"cordova\" mdxType=\"TextBlock\">{`\nThe best place to setup the SDK is in [deviceready](https://cordova.apache.org/docs/en/5.1.1/cordova/events/events.deviceready.html) callback:\n`}</TextBlock>\n    <TextBlock visibleOn=\"ionic\" mdxType=\"TextBlock\">{`\nThe best place to setup the SDK is in [platform ready](https://ionicframework.com/docs/v3/api/platform/Platform/#ready) callback:\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nThe best place to setup the SDK is in \\`didFinishLaunchingWithOptions\\` method of the \\`ApplicationDelegate\\`:\n`}</TextBlock>\n    <TextBlock visibleOn=\"xamarin\" mdxType=\"TextBlock\">{`\nThe best place to setup the SDK is in \\`didFinishLaunchingWithOptions\\` method of the \\`ApplicationDelegate\\` on **iOS** and in \\`onCreate()\\` method of your \\`Application\\` class on Android:\n`}</TextBlock>\n    <TextBlock visibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nSDK is configured automatically by enabling Smartlook Plugin in Plugin settings:\n`}</TextBlock>\n    <Image visibleOn=\"unreal\" src={unreal_enable} width=\"100%\" mdxType=\"Image\" />\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\nimport android.app.Application;\\n\npublic class MyCustomApplication extends Application {\n    @Override\n    public void onCreate() {\n        super.onCreate();\n        Smartlook.setupAndStartRecording(API_KEY);\n    }\n}\n      `,\n        kotlin: `\nimport android.app.Application;\\n\nclass MyCustomApplication : Application() {\n    override fun onCreate() {\n        super.onCreate()\n        Smartlook.setupAndStartRecording(API_KEY)\n    }\n}\n      `\n      },\n      cordova: {\n        javascript: `\nif(document.readyState === \"complete\") {\n  document.addEventListener(\"deviceready\", onDeviceReady, false);\n}\\n\nfunction onDeviceReady() {\n    Smartlook.setupAndStartRecording({smartlookAPIKey: \"API_KEY\"});\n}\n      `\n      },\n      ionic: {\n        typescript: `\nthis.platform.ready().then(() => {\n  var setupConfig = new SmartlookSetupConfigBuilder(\"API_KEY\");\n  this.smartlook.setupAndStartRecording(setupConfig.build());\n}\n      `\n      },\n      ios: {\n        swift: `\nimport Smartlook\\n\nfunc application(_ application: UIApplication, didFinishLaunchingWithOptions launchOptions: [UIApplication.LaunchOptionsKey: Any]?) -> Bool {\n  let smartlookConfig = Smartlook.SetupConfiguration(key: \"API_KEY\")\n  Smartlook.setupAndStartRecording(configuration: smartlookConfig)\n  // other initialization stuff\n  return true\n}\n      `,\n        'objective-c': `\n#import <Smartlook/Smartlook.h>\\n\n- (BOOL)application:(UIApplication *)application didFinishLaunchingWithOptions:(NSDictionary *)launchOptions {\n  SLSetupConfiguration *slConfig = [[SLSetupConfiguration alloc] initWithKey:@\"API_KEY\"];\n  [Smartlook setupAndStartRecordingWithConfiguration:slConfig];\n  // other initialization stuff\n  return YES;\n}\n      `\n      },\n      flutter: {\n        dart: `\nimport 'package:smartlook/smartlook.dart';\n\\n\nclass _MyAppState extends State<MyApp> {\n  @override\n  void initState() {\n    super.initState();\n    ...\n    SetupOptions options = (\n      new SetupOptionsBuilder('API_KEY')\n      ).build();\n    Smartlook.setupAndStartRecording(options);\n    ...\n    }\n}\n`\n      },\n      unity: {\n        csharp: `\npublic class NewBehaviourScript : MonoBehaviour\n{\n    // Start is called before the first frame update\n    void Start()\n    {\n        SmartlookUnity.SetupOptionsBuilder builder = new SmartlookUnity.SetupOptionsBuilder(\"API_KEY\");\n        SmartlookUnity.Smartlook.SetupAndStartRecording(builder.Build());\n    }\n\\n\n    // Update is called once per frame\n    void Update()\n    {\n        ...\n    }\n}\n`\n      },\n      react: {\n        typescript: `\nimport Smartlook from 'smartlook-react-native-wrapper';\nSmartlook.setupAndStartRecording(\"API_KEY\");\n`\n      },\n      cocos: {\n        java: `\npublic class AppActivity extends Cocos2dxActivity {\n    @Override\n    public void onCreate() {\n        ...\n        // DO OTHER INITIALIZATION BELOW\n        Smartlook.setupAndStartRecording(API_KEY);\n    }\n}\n      `,\n        kotlin: `\nclass AppActivity : Cocos2dxActivity() {\n    override fun onCreate() {\n        ...\n        // DO OTHER INITIALIZATION BELOW\n        Smartlook.setupAndStartRecording(API_KEY)\n    }\n}\n      `\n      },\n      xamarin: {\n        csharp: `\nusing Smartlook;\n...\nSmartlook.Analytics.SetupAndStart(\"API_KEY\");\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\nSDK can be set up later than in Application class, typically when the Application is fetching an API key, please take a look [here](/docs/sdk/cookbooks/android-setup-outside-application-class).\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,cordova,ionic,flutter,unity,react,xamarin,ios\" mdxType=\"TextBlock\">{`\nThe easiest way of setting up the SDK is with \\`setupAndStartRecording()\\` method:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setupAndStartRecording(@NotNull String apiKey);\n      `,\n        kotlin: `\nSmartlook.setupAndStartRecording(@NotNull apiKey: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setupAndStartRecording({smartlookAPIKey: string});\n      `\n      },\n      ionic: {\n        typescript: `\n  var setupConfig = new SmartlookSetupConfigBuilder(\"API_KEY\");\n  this.smartlook.setupAndStartRecording(setupConfig.build());\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.setupAndStartRecording(SetupOptions options);\n      `\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.SetupAndStartRecording(string apiKey);\n      `\n      },\n      react: {\n        typescript: `\nSmartlook.setupAndStartRecording(optionsOrAPIKey: Smartlook.SetupOptions | string) ;\n    `\n      },\n      xamarin: {\n        csharp: `\nstatic public void SetupAndStart(string key, SetupOptions options = new SetupOptions())`\n      },\n      ios: {\n        swift: `\nclass func Smartlook.setupAndStartRecording(configuration: Smartlook.SetupConfiguration)\n      `,\n        'objective-c': `\n+ (void)setupWithConfiguration:(nonnull SLSetupConfiguration *)configuration;\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android,cordova,ionic,flutter,unity,react,xamarin,ios\" mdxType=\"TextBlock\">{`\nIt will set the SDK up and also start the recording. SDK can be setup without starting the recording using the following:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setup(@NotNull String apiKey);\n      `,\n        kotlin: `\nSmartlook.setup(@NotNull apiKey: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setup({smartlookAPIKey: string});\n      `\n      },\n      ionic: {\n        typescript: `\n  var setupConfig = new SmartlookSetupConfigBuilder(\"API_KEY\");\n  this.smartlook.setup(setupConfig.build());\n      `\n      },\n      ios: {\n        swift: `\nclass func Smartlook.setup(configuration: Smartlook.SetupConfiguration)\n      `,\n        'objective-c': `\n+ (void)setupWithConfiguration:(nonnull SLSetupConfiguration *)configuration;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.setup(SetupOptions options);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.Setup(string apiKey);\n`\n      },\n      react: {\n        typescript: `\nSmartlook.setup(optionsOrAPIKey: Smartlook.SetupOptions | string);\n`\n      },\n      xamarin: {\n        csharp: `\nstatic public void Setup(string key, SetupOptions options = new SetupOptions())`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\nSmartlook SDK needs to be initialized with an API key that can be acquired in the Smartlook Dashboard.\n`}</TextBlock>\n    <TextBlock invisibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nAnd then the recording can be started by calling:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.startRecording();\n      `,\n        kotlin: `\nSmartlook.startRecording()\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.startRecording();\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.startRecording();\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.startRecording();\n      `\n      },\n      ios: {\n        swift: `\nclass func startRecording()\n      `,\n        'objective-c': `\n+ (void)startRecording;\n`\n      },\n      flutter: {\n        dart: `\nSmartlook.startRecording();\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.StartRecording();\n`\n      },\n      react: {\n        typescript: `\nSmartlook.startRecording();\n`\n      },\n      xamarin: {\n        csharp: `\npublic static void StartRecording()\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"setup-configuration\"\n    }}>{`Setup configuration`}</h3>\n    <TextBlock visibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nYou can start recording automatically by ticking the \\`Start Recording\\` option in Smartlook plugin settings. You can also provide the desired <Link to=\"/docs/sdk/conceptual/screen-recording-quality\" platform=\"unreal\">framerate</Link>:\n`}</TextBlock>\n    <Image visibleOn=\"unreal\" src={unreal_settings} width=\"100%\" mdxType=\"Image\" />\n    <TextBlock visibleOn=\"ios,android,cordova,ionic,react,flutter,cocos,xamarin\" mdxType=\"TextBlock\">{`\nSome recording parameters can be configured on setup:\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\n| Parameter                                    | Required | Description                                                                                                                                        | Default value                   |\n|----------------------------------------------|----------|----------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------|\n| apiKey                                       | yes      | Unique 40-character key identifying your app (can be found in the dashboard).                                                                      | \"\"                              |\n| fps                                          | no       | Recorded video frame rate (allowed values between 2 and 10). Note that by setting this value settings from the dashboard will be overridden!       | 2                               |\n| experimental                                 | no       | If set to true it enables some experimental features such as TextureView/Maps/MapBox recording, etc.                                               | false                           |\n| activity                                     | no       | Actual activity reference is required when setting the SDK outside of the Application class.                                                       | null                            |\n| [renderingMode](#rendering)                  | no       | Defines the way SDK is going to capture screen image data.                                                                                         | RenderingMode.NATIVE            |\n| [renderingModeOption](#rendering)            | no       | Further customization of the rendering mode.                                                                                                       | null                            |\n| [eventTrackingModes](#event-tracking-modes)  | no       | Event tracking modes can be used to disable some automatically detected events.                                                                    | EventTrackingMode.FULL_TRACKING |\n| useAdaptiveFramerate                         | no       | Adaptive frame rate is an optimization that keeps the SDK from capturing redundant screenshots when the application is idle.                       | true                            |\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nSmartlook can be setup using and instance of \\`SetupConfiguration\\` object. The object has a mandatory \\`apiKey\\` property, other property values are optional.\\n\nSome of the parameters could be also set in your project settings in Smartlook portal. It is advisible to use the projects settings when available there and use this setup configuration for testing and evaluating only.\n\\n\n| Property                                    | Type                   | Default value | Description\n|---------------------------------------------|------------------------|---------------|----------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| apiKey                                      | string                 | -             | The API key of the project. Set it in the object \\`init(key:)\\` initializator.                                                                                                                                                                     |\n| framerate                                   | int                    | 2             | Recorded video frame rate (allowed values between 2 and 10). Note that by setting this value settings from the dashboard will be overridden!                                                                                                       |\n| useAdaptiveFramerate                        | bool                   | true          | By default, Smartlook adapts its recording framerate to the frequency of UI changes in order to lower its footprint in app performace. For details, see <Link to=\"/docs/sdk/conceptual/screen-recording-quality\">Screen Recording Quality</Link>. |\n| [renderingMode](#rendering)                 | RenderingMode          | native        | Define the way SDK is going to capture screen image data.                                                                                                                                                                                          |\n| [renderingModeOption](#rendering)           | RenderingModeOption    | none          | Further customize the rendering mode.                                                                                                                                                                                                              |\n| [eventTrackingModes](#event-tracking-modes) | [EventTrackingMode]    | full tracking | Sets which types of events are tracking by Smartlook                                                                                                                                                                                               |\n| resetSession                                | bool                   | false         | Start recording with new session                                                                                                                                                                                                                   |\n| resetSessionAndUser                         | bool                   | false         | Start nrecording with new session and reset user                                                                                                                                                                                                   |\n| [enableIntegrations](#integrations)         | [Integration]          | -             | Array of enabled 3rd party integrations.                                                                                                                                                                                                           |\n`}</TextBlock>\n    <TextBlock visibleOn=\"cordova\" mdxType=\"TextBlock\">{`\n| Parameter                                   | Required | Description                                                                                                                                  | Default value                     |\n|---------------------------------------------|----------|----------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------|\n| apiKey                                      | yes      | Unique 40-character key identifying your app (can be found in the dashboard).                                                                | \"\"                                |\n| fps                                         | no       | Recorded video frame rate (allowed values between 2 and 10). Note that by setting this value settings from the dashboard will be overridden! | 2                                 |\n| [renderingMode](#rendering)                 | no       | Defines the way SDK is going to capture screen image data.                                                                                   | RenderingMode.NATIVE              |\n| startNewSession                             | no       | Set this to true to force start of new session on setup.                                                                                     | false                             |\n| startNewSessionAndUser                      | no       | Set this to true to force start of new session and create new visitor on setup.                                                              | false                             |\n| [eventTrackingModes](#event-tracking-modes) | no       | Event tracking modes can be used to disable some automatically detected events.                                                              | [EventTrackingMode.FULL_TRACKING] |\n`}</TextBlock>\n    <TextBlock visibleOn=\"ionic\" mdxType=\"TextBlock\">{`\n| Parameter                                   | Required | Description                                                                                                                                            | Default value                       |\n|---------------------------------------------|----------|--------------------------------------------------------------------------------------------------------------------------------------------------------|-------------------------------------|\n| apiKey                                      | yes      | Unique 40-character key identifying your app (can be found in the dashboard).                                                                          | \"\"                                  |\n| fps                                         | no       | Recorded video frame rate (allowed values between 2 and 10). Note that by setting this value settings from the dashboard will be overridden!           | 2                                   |\n| [renderingMode](#rendering)                 | no       | Define the way SDK is going to capture screen image data.                                                                                              | SmartlookRenderingMode.NATIVE       |\n| startNewSession                             | no       | If set to true SDK forces start of new session on setup.                                                                                               | false                               |\n| startNewSessionAndUser                      | no       | If set to true SDK forces start of new session and creates new visitor on setup.                                                                       | false                               | \n| [eventTrackingModes](#event-tracking-modes) | no       | Event tracking modes can be used to disable some automatically detected events.                                                                        | [EventTrackingMode.FULL_TRACKING()] |\n`}</TextBlock>\n    <TextBlock visibleOn=\"flutter,react,unity\" mdxType=\"TextBlock\">{`\n| Parameter              | Required | Description                                                                                                                                            | Default value        |\n|------------------------|----------|--------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|\n| apiKey                 | yes      | Unique 40-character key identifying your app (can be found in the dashboard).                                                                          | \"\"                   |\n| fps                    | no       | Recorded video frame rate (allowed values between 2 and 10). Note that by setting this value settings from the dashboard will be overridden!           | 2                    |\n| startNewSession        | no       | If set to true SDK forces start of new session on setup.                                                                                               | false                |\n| startNewSessionAndUser | no       | If set to true SDK forces start of new session and creates new visitor on setup.                                                                       | false                |\n`}</TextBlock>\n    <TextBlock visibleOn=\"cocos\" mdxType=\"TextBlock\">{`\n| Parameter              | Required | Description                                                                                                                                            | Default value        |\n|------------------------|----------|--------------------------------------------------------------------------------------------------------------------------------------------------------|----------------------|\n| apiKey                 | yes      | Unique 40-character key identifying your app (can be found in the dashboard).                                                                          | \"\"                   |\n| fps                    | no       | Recorded video frame rate (allowed values between 2 and 10). Note that by setting this value settings from the dashboard will be overridden!           | 2                    |\n`}</TextBlock>\n    <TextBlock visibleOn=\"xamarin\" mdxType=\"TextBlock\">\nAll setup options are optional and can be set using properties of an instance of `SetupOptions` class.\n    </TextBlock>\n    <TextBlock visibleOn=\"xamarin\" mdxType=\"TextBlock\">{`\n| Parameter                                   | Type                   | Default value | Description                                                                                                                                 \n|---------------------------------------------|------------------------|---------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| EnableCrashlytics                           | bool                   | false         | Enables Firebase Crashlytics integration                                                                                                                                                                                                  |\n| Framerate                                   | int                    | 2             | Recorded video frame rate (allowed values between 2 and 10). Note that by setting this value settings from the dashboard will be overridden!                                                                                              |\n| UseAdaptiveFramerate                        | bool                   | true          | By defaults, Smartlook adapts its recording framerate to the frequency of UI changes in order to lower its footprint in app performace. For details, see <Link to=\"/docs/sdk/conceptual/screen-recording-quality\">Screen Recording Quality</Link>. |\n| [RenderingMode](#rendering)                 | RenderingMode          | native        | Define the way SDK is going to capture screen image data.                                                                                                                                                                                 |\n| [RenderingModeOption](#rendering)           | RenderingModeOption    | none          | Further customize the rendering mode.                                                                                                                                                                                                     |\n| [EventTrackingModes](#event-tracking-modes) | EventTrackingMode      | all events    | Event tracking modes can be used to disable some automatically detected events.                                                                                                                                                           |\n| StartNewSession                             | bool                   | false         | Always start new session with Smartlook setup.                                                                                                                                                                                            |\n| StartNewSessionAndResetUser                 | bool                   | false         | Always start new session and reset user woth Smartlook setup.                                                                                                                                                                             |\n`}</TextBlock>\n    <CodeBlock snippets={{\n      xamarin: {\n        csharp: `\npublic struct SetupOptions\n{\n  public int? Framerate;\n  public bool? EnableCrashlytics;\n  public RenderingMode? RenderingMode;\n  public RenderingModeOption? RenderingModeOption;\n  public EventTrackingMode? EventTrackingMode;\n  public bool? StartNewSession;\n  public bool? StartNewSessionAndResetUser;\n}`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"example\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\nFull SDK setup configuration can be done with \\`SetupOptionsBuilder\\`, that provides methods for setting any of the setup parameters shown above.\n<CodeBlock\n  snippets={{\n    android: {\n      java: \\`\nSmartlook.SetupOptionsBuilder builder = new Smartlook.SetupOptionsBuilder(@NotNull String apiKey)\n        .setFps(int fps)\n        .setExperimental(boolean experimental)\n        .useAdaptiveFramerate(boolean enabled)\n        .setActivity(@NonNull Activity activity)\n        .setRenderingMode(RenderingMode renderingMode)\n        .setRenderingMode(RenderingModeOption renderingModeOption)\n        .setEventTrackingModes(List<EventTrackingMode> eventTrackingMode);\\\\n\nSmartlook.setupAndStartRecording(builder.build());\n      \\`,\n      kotlin: \\`\nval builder = Smartlook.SetupOptionsBuilder(@NotNull apiKey: String)\n        .setFps(fps: Int)\n        .setExperimental(experimental: Boolean)\n        .useAdaptiveFramerate(enabled: Boolean)\n        .setActivity(@NonNull activity: Activity)\n        .setRenderingMode(renderingMode: RenderingMode)\n        .setRenderingMode(renderingModeOption: RenderingModeOption)\n        .setEventTrackingModes(eventTrackingModes: List<EventTrackingMode>)\\\\n\nSmartlook.setupAndStartRecording(builder.build())\n      \\`,\n    },\n  }}\n/>\n\\n\nLast line can be replaced with \\`Smartlook.setup(builder.build())\\` so the recording can be started later.\n`}</TextBlock>\n    <TextBlock kind=\"example\" visibleOn=\"cocos\" mdxType=\"TextBlock\">{`\nFull SDK setup configuration can be done with \\`SetupOptionsBuilder\\`, that provides methods for settting any of the setup parameters shown above.\n<CodeBlock\n  snippets={{\n    cocos: {\n      java: \\`\nSmartlook.SetupOptionsBuilder builder = new Smartlook.SetupOptionsBuilder(@NotNull String apiKey)\n        .setFps(int fps);\\\\n\nSmartlook.setupAndStartRecording(builder.build());\n      \\`,\n      kotlin: \\`\nval builder = Smartlook.SetupOptionsBuilder(@NotNull apiKey: String)\n        .setFps(fps: Int);\\\\n\nSmartlook.setupAndStartRecording(builder.build())\n      \\`,\n    },\n  }}\n/>\n`}</TextBlock>\n    <TextBlock visibleOn=\"unity\" mdxType=\"TextBlock\">{`\nFull SDK setup configuration can be done with optional \\`fps\\` method parameter.\n`}</TextBlock>\n    <CodeBlock snippets={{\n      unity: {\n        csharp: `\nSmartlookUnity.SetupOptionsBuilder builder = new SmartlookUnity.SetupOptionsBuilder(\"API_KEY\");\nbuilder.\n  .SetFps(2)\n  .SetStartNewSession(true);\nSmartlookUnity.Smartlook.SetupAndStartRecording(builder.Build());\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"flutter\" mdxType=\"TextBlock\">{`\nFull SDK setup configuration can be done with optional \\`fps\\` method parameter.\n`}</TextBlock>\n    <CodeBlock snippets={{\n      flutter: {\n        dart: `\nSetupOptions options = (\n  new SetupOptionsBuilder('API_KEY')\n    ..Fps = 2\n    ..StartNewSession = true\n  ).build();\nSmartlook.setupAndStartRecording(options);\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"react\" mdxType=\"TextBlock\">{`\nFull SDK setup configuration can be done with optional \\`fps\\` method parameter.\n`}</TextBlock>\n    <CodeBlock snippets={{\n      react: {\n        typescript: `\nSmartlook.setupAndStartRecording({ smartlookAPIKey: token, fps: 2, startNewSessionAndUser: true });\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <CodeBlock kind=\"example\" snippets={{\n      cordova: {\n        javascript: `\nSmartlook.setup({\n  smartlookAPIKey: \"API_KEY\",\n  fps: 2,\n  renderingMode: Smartlook.RenderingMode.NATIVE,\n  startNewSession: true,\n  eventTrackingModes: [EventTrackingMode.FULL_TRACKING]\n});\\n\nSmartlook.setupAndStartRecording({\n  smartlookAPIKey: \"API_KEY\",\n  fps: 2,\n  renderingMode: Smartlook.RenderingMode.NATIVE,\n  startNewSessionAndUser: true,\n  eventTrackingModes: [EventTrackingMode.FULL_TRACKING]\n});\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"example\" visibleOn=\"ionic\" mdxType=\"TextBlock\">{`\nFull SDK setup configuration can be done with \\`SmartlookSetupConfigBuilder\\`, that provides methods for setting any of the setup parameters shown above.\n<CodeBlock\n  snippets={{\n    ionic: {\n      typescript: \\`\nvar builder = new SmartlookSetupConfigBuilder(smartlookAPIKey: string)\n        .fps(fps: number)\n        .renderingMode(renderingMode: SmartlookRenderingMode)\n        .startNewSession(startNewSession: boolean)\n        .startNewSessionAndUser(startNewSessionAndUser: boolean)\n        .eventTrackingModes(eventTrackingModes: SmartlookEventTrackingModes);\\\\n\nSmartlook.setupAndStartRecording(builder.build());\n      \\`,\n    },\n  }}\n/>\n\\n\nLast line can be replaced with \\`Smartlook.setup(builder.build())\\` so the recording can be started later.\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"start-and-stop-recording\"\n    }}>{`Start and stop recording`}</h2>\n    <p>{`Recording can be `}<strong parentName=\"p\">{`started`}</strong>{` or `}<strong parentName=\"p\">{`stopped`}</strong>{` at any time, the only requirement is that the SDK is set up.`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.startRecording();\nSmartlook.stopRecording();\n      `,\n        kotlin: `\nSmartlook.startRecording()\nSmartlook.stopRecording()\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.startRecording();\nSmartlook.stopRecording();\n      `,\n        kotlin: `\nSmartlook.startRecording()\nSmartlook.stopRecording()\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.startRecording();\nSmartlook.stopRecording();\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.startRecording();\nsmartlook.stopRecording();\n      `\n      },\n      ios: {\n        swift: `\nclass func startRecording()\nclass func stopRecording()\n`,\n        'objective-c': `\n+ (void)startRecording;\n+ (void)stopRecording;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.startRecording();\nSmartlook.stopRecording();\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.StartRecording();\nSmartlookUnity.Smartlook.StopRecording();\n`\n      },\n      react: {\n        typescript: `\nSmartlook.startRecording();\nSmartlook.stopRecording();\n`\n      },\n      xamarin: {\n        csharp: `\npublic static void StartRecording()\npublic static void StopRecording()\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nBlueprint:\n`}</TextBlock>\n    <Image visibleOn=\"unreal\" src={unreal_bp_startendsession} width=\"381px\" mdxType=\"Image\" />\n    <TextBlock visibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nC++:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      unreal: {\n        cpp: `\n#include \"Runtime/Analytics/Analytics/Public/Analytics.h\"\n#include \"Runtime/Analytics/Analytics/Public/Interfaces/IAnalyticsProvider.h\"\\n\nFAnalytics::Get().GetDefaultConfiguredProvider()->StartSession());\nFAnalytics::Get().GetDefaultConfiguredProvider()->EndSession());\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock invisibleOn=\"unreal\" kind=\"note\" mdxType=\"TextBlock\">{`\n\\`stopRecording()\\` **doesn't need to be called** on application closure. **Recording is stopped automatically**.\n`}</TextBlock>\n    <TextBlock visibleOn=\"unreal\" kind=\"note\" mdxType=\"TextBlock\">{`\n\\`EndSession()\\` **doesn't need to be called** on application closure. **Recording is stopped automatically**.\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"check-if-sdk-is-recording\"\n    }}>{`Check if SDK is recording`}</h2>\n    <TextBlock visibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nCurrently not supported by the SDK.\n`}</TextBlock>\n    <TextBlock invisibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nCheck if SDK is currently recording can be handy when using \\`startRecording()\\` and \\`stopRecording()\\` methods. Simply call:\n`}</TextBlock>\n    <TextBlock invisibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nCheck if SDK is currently recording can be handy when using \\`startRecording()\\` and \\`stopRecording()\\` methods. Simply call:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.isRecording();\n      `,\n        kotlin: `\nSmartlook.isRecording()\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.isRecording();\n      `,\n        kotlin: `\nSmartlook.isRecording()\n      `\n      },\n      cordova: {\n        typescript: `\nSmartlook.isRecording(isRecording: function(isRecording: string))\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.isRecording(): promise<boolean>;\n      `\n      },\n      ios: {\n        swift: `\nclass func isRecording() -> Bool\n`,\n        'objective-c': `\n+ (BOOL)isRecording;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.isRecording();\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.IsRecording();\n`\n      },\n      react: {\n        typescript: `\nSmartlook.isRecording(): Promise<boolean>;\n`\n      },\n      xamarin: {\n        csharp: `\npublic static bool IsRecording\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <CodeBlock kind=\"example\" snippets={{\n      cordova: {\n        javascript: `\nSmartlook.isRecording(\n    function(isRecording){\n        //check here\n    }\n)\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.isRecording().then((isRecording) => {\n  alert(isRecording)\n});\n      `\n      },\n      react: {\n        typescript: `\nSmartlook.isRecording().then((isRecording: boolean) => {\n  alert(isRecording);\n});\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"ios,android,cocos,xamarin,react\" mdxType=\"TextBlock\">{`\n## Reset session\nCurrent session can be ended and a new session created by calling:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.resetSession(boolean resetUser);\n      `,\n        kotlin: `\nSmartlook.resetSession(resetUser: Boolean)\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.resetSession(boolean resetUser);\n      `,\n        kotlin: `\nSmartlook.resetSession(resetUser: Boolean)\n      `\n      },\n      xamarin: {\n        csharp: `\npublic static void ResetSession(bool resetUser = false)\n      `\n      },\n      react: {\n        typescript: `\nSmartlook.resetSession(resetUser: boolean);\n      `\n      },\n      ios: {\n        swift: `\nclass func resetSession(resetUser: Bool)\n`,\n        'objective-c': `\n+ (void)resetSessionAndUser:(BOOL)resetUser\n    `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android,cocos,xamarin,react,ios\" mdxType=\"TextBlock\">{`\nIf \\`resetUser\\` is set to \\`true\\`, SDK will create a new visitor during the reset. This is especially beneficial when a new user needs to be identified (typically after logout).\\n\nA new session can be created on SDK setup:\n`}</TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\nSmartlook.SetupOptionsBuilder builder = new Smartlook.SetupOptionsBuilder(API_KEY)\n        .startNewSession();\\n\nSmartlook.setupAndStartRecording(builder.build());\n      `,\n        kotlin: `\nval builder = Smartlook.SetupOptionsBuilder(API_KEY)\n        .startNewSession()\\n\nSmartlook.setupAndStartRecording(builder.build())\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.SetupOptionsBuilder builder = new Smartlook.SetupOptionsBuilder(API_KEY)\n        .startNewSession();\\n\nSmartlook.setupAndStartRecording(builder.build());\n      `,\n        kotlin: `\nval builder = Smartlook.SetupOptionsBuilder(API_KEY)\n        .startNewSession()\\n\nSmartlook.setupAndStartRecording(builder.build())\n      `\n      },\n      xamarin: {\n        csharp: `\nAnalytics.SetupOptions smartlookSetupOptions = new Analytics.SetupOptions(startNewSession: true);\nSmartlook.Analytics.Setup(API_KEY, smartlookSetupOptions);\n`\n      },\n      ios: {\n        swift: `\nlet setupConfig = Smartlook.SetupConfiguration(key: \"API_KEY\")\nsetupConfig.resetSession = true         // to reset just the session\nsetupConfig.resetSessionAndUser = true  // alternatively, to reset user and implicitly the session, too\nSmartlook.setupAndStartRecording(configuration: setupConfig)\n`,\n        'objective-c': `\nSLSetupConfiguration *slConfig = [[SLSetupConfiguration alloc] initWithKey:@\"API_KEY\"];\nslConfig.resetSession = YES;         // to reset just the session\nslConfig.resetSessionAndUser = YES;  // alternatively, to reset user and implicitly the session, too\n[Smartlook setupAndStartRecordingWithConfiguration:slConfig];\n    `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android,cocos,xamarin,react\" mdxType=\"TextBlock\">{`\nA new visitor can also be created on SDK setup:\n`}</TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\nSmartlook.SetupOptionsBuilder builder = new Smartlook.SetupOptionsBuilder(API_KEY)\n        .startNewSessionAndUser();\\n\nSmartlook.setupAndStartRecording(builder.build());\n      `,\n        kotlin: `\nval builder = Smartlook.SetupOptionsBuilder(API_KEY)\n        .startNewSessionAndUser()\\n\nSmartlook.setupAndStartRecording(builder.build())\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.SetupOptionsBuilder builder = new Smartlook.SetupOptionsBuilder(API_KEY)\n        .startNewSessionAndUser();\\n\nSmartlook.setupAndStartRecording(builder.build());\n      `,\n        kotlin: `\nval builder = Smartlook.SetupOptionsBuilder(API_KEY)\n        .startNewSessionAndUser()\\n\nSmartlook.setupAndStartRecording(builder.build())\n      `\n      },\n      xamarin: {\n        csharp: `\nAnalytics.SetupOptions smartlookSetupOptions = new Analytics.SetupOptions(startNewSessionAndResetUser: true);\nSmartlook.Analytics.Setup(\"API_KEY\", smartlookSetupOptions);\n      `\n      },\n      react: {\n        typescript: `\nSmartlook.setupAndStartRecording({ smartlookAPIKey: API_KEY, startNewSessionAndUser: true });\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <h1 {...{\n      \"id\": \"sensitive-data-hiding\"\n    }}>{`Sensitive data hiding`}</h1>\n    <TextBlock invisibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nWhen using **native** rendering mode, **SDK can record sensitive data in your application**.\\n\nIn order to protect user privacy, Smartlook can be configured so that the sensitive data is not recorded.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios,react,xamarin\" mdxType=\"TextBlock\">{`\nSmartlook attempts to hide selected sensitive UI element automatically. It can be also instructed to hide or show particular UI components. Alternatively, using one of the **wireframe** rendering modes records screen in a schematic way, showing no user data. The last possibility is to stop screen capturing altogether by using **no rendering** mode.\n`}</TextBlock>\n    <TextBlock kind=\"important\" visibleOn=\"android,ios,react,xamarin,cordova,ionic\" mdxType=\"TextBlock\">{`\nSensitive elements are **hidden locally** on the device; no sensitive data are transferred over the network and stored in the dashboard.\n`}</TextBlock>\n    <TextBlock visibleOn=\"flutter,unity,cocos\" mdxType=\"TextBlock\">{`\nOn this platform, selectively hiding sensitive parts of the screen is not possible.\\n\nTo hide sensitive data, screen capturing must be stopped completelly by using **no recording** mode.\n`}</TextBlock>\n    <TextBlock visibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nUE4 SDK does not support hiding sensitive parts of the screen at the moment.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios,react,xamarin\" mdxType=\"TextBlock\">{`\n## Blacklisted views\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios,react,xamarin\" mdxType=\"TextBlock\">{`\nAny view can be hidden in the recording by marking it as a **blacklisted** view. A specific view can be marked as blacklisted by calling:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.registerBlacklistedView(View view);\nSmartlook.registerBlacklistedViews(List<View> views);\n      `,\n        kotlin: `\nSmartlook.registerBlacklistedView(view: View)\nSmartlook.registerBlacklistedViews(views: List<View>)\n      `\n      },\n      ios: {\n        swift: `\nclass func registerBlacklisted(object: Any)\n`,\n        'objective-c': `\n+ (void)registerBlacklistedObject:(nonnull id)object;\n      `\n      },\n      react: {\n        typescript: `\nSmartlook.registerBlacklistedView(ref: ComponentOrHandle));\n`\n      },\n      xamarin: {\n        csharp: `\npublic static void RegisterBlacklistedObject(object @object)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <CodeBlock kind=\"example\" snippets={{\n      ios: {\n        swift: `\nSmartlook.registerBlacklisted(object: someView)\n`,\n        'objective-c': `\n[Smartlook registerBlacklistedObject:self.someView];\n    `\n      },\n      xamarin: {\n        csharp: `\nSmartlook.Analytics.RegisterBlacklistedObject(SomeView);\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nOr can be tagged directly in an \\`xml\\` layout file:\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nOr can be tagged directly by an \\`UIView\\` property added by Smartlook:\n`}</TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        xml: `\n<View>\n    <tag android:id=\"@id/smartlook_blacklisted_view\" android:value=\"\"/>\n</View>\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <CodeBlock snippets={{\n      ios: {\n        swift: `\nvar slSensitive: Bool\n`,\n        'objective-c': `\n@property (nonatomic, assign) IBInspectable BOOL slSensitive;\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <CodeBlock kind=\"example\" snippets={{\n      ios: {\n        swift: `\nsomeView.slSensitive = true\n`,\n        'objective-c': `\nself.someView.slSensitive = YES;\n    `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nNote also, that there is a small workaround that makes  \\`slSensitive\\` property of \\`UIView\\` inspectable in Xcode Interface Builder, i.e., it is not necessary creating an \\`@IBOutlet\\` for a view that is designed in the Interface Builder just in order to set its sensitivity. See our <Link to=\"/docs/sdk/cookbooks/how-to-make-smartlook-properties-inspectable\">How to make Smartlook properties inspectable</Link> cookbook.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios,react,xamarin\" mdxType=\"TextBlock\">{`\nIf a specific view no longer needs to be blacklisted:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.unregisterBlacklistedView(View view);\nSmartlook.unregisterBlacklistedViews(List<View> views);\n      `,\n        kotlin: `\nSmartlook.unregisterBlacklistedView(view: View)\nSmartlook.unregisterBlacklistedViews(views: List<View>)\n      `\n      },\n      ios: {\n        swift: `\nclass func registerBlacklisted(object: Any)\n`,\n        'objective-c': `\n+ (void)unregisterBlacklistedObject:(nonnull id)object\n      `\n      },\n      react: {\n        javascript: `\nSmartlook.unregisterBlacklistedView(ref);\n`\n      },\n      xamarin: {\n        csharp: `\nSmartlook.Analytics.UnregisterBlacklistedObject(object @object);\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" visibleOn=\"android,ios,xamarin\" mdxType=\"TextBlock\">{`\nA blacklisted view is hidden on recording by a single color rectangle. The color of this rectangle can be configured by calling:\n<CodeBlock\n  snippets={{\n    android: {\n      java: \\`\nSmartlook.setBlacklistedItemsColor(@ColorInt int color);\n      \\`,\n      kotlin: \\`\nSmartlook.setBlacklistedItemsColor(@ColorInt color: Int);\n      \\`,\n    },\n    ios: {\n      swift: \\`\nclass func setBlacklistedItem(color: UIColor)\n      \\`,\n      'objective-c': \\`\n+ (void)setBlacklistedItemsColor:(nonnull UIColor *)color;\n      \\`,\n    },\nxamarin: {\n      csharp: \\`\n        public static void SetBlacklistedItemsColor(float red, float green, float blue);\n      \\`,\n    },\n  }}\n/>\nThis is applied for all blacklisted objects.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios,react,xamarin\" mdxType=\"TextBlock\">{`\n## Blacklisted classes\n`}</TextBlock>\n    <TextBlock visibleOn=\"react\" mdxType=\"TextBlock\">{`\nNote that \\`UITextView\\`, \\`UITextField\\`, \\`WKWebView\\` on iOS and \\`EditText\\`, \\`WebView\\` on Android are blacklisted by default. Specific instances of these classes can be recorded using whitelist. \n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nSometimes it can be beneficial to blacklist all instances of a given \\`Class\\` that extends a \\`View\\` rather than blacklisting a specific \\`View\\`’s instances:\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nSometimes it can be beneficial to blacklist all instances of a **\\`UIView\\` subclass** or all \\`UIView\\` subclasses that conform some **protocol**:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.registerBlacklistedClass(Class class);\nSmartlook.registerBlacklistedClasses(List<Class> classes);\n      `,\n        kotlin: `\nSmartlook.registerBlacklistedClass(class: Class)\nSmartlook.registerBlacklistedClasses(classes: List<Class>)\n      `\n      },\n      ios: {\n        swift: `\n// Note: the object can be UIView instance, UIView subclass or a Protocol,\n// see examples below\nclass func registerBlacklisted(object: Any)\n`,\n        'objective-c': `\n// Note: the object can be UIView instance, UIView subclass or a Protocol\n// see examples below\n+ (void)registerBlacklistedObject:(nonnull id)object;\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <CodeBlock kind=\"example\" snippets={{\n      ios: {\n        swift: `\n// Note: the object can be UIView instance, UIView subclass or a Protocol\nsomeView.slSensitive = true\nSmartlook.registerBlacklisted(object: someView)\nSmartlook.registerBlacklisted(object: SensitiveDataViewClass.self)\nSmartlook.registerBlacklisted(object: SensitiveProtocol.self)\n`,\n        'objective-c': `\n// Note: the object can be UIView instance, UIView subclass or a Protocol\nself.someView.slSensitive = true\n[Smartlook registerBlacklistedObject:self.someView];\n[Smartlook registerBlacklistedObject:SensitiveDataViewClass.class];\n[Smartlook registerBlacklistedObject:@protocol(SensitiveProtocol)];\n    `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nAny blacklisted classes can be removed:\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nNote that for convenience, **some classes are blacklisted by default**: \\`UITextView\\`, \\`UITextField\\` and \\`WKWebView\\`.\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nAny of the blacklisted objects can be removed:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.unregisterBlacklistedClass(Class class);\nSmartlook.unregisterBlacklistedClasses(List<Class> classes);\n      `,\n        kotlin: `\nSmartlook.unregisterBlacklistedClass(class: Class)\nSmartlook.unregisterBlacklistedClasses(classes: List<Class>)\n      `\n      },\n      ios: {\n        swift: `\nclass func unregisterBlacklisted(object: Any)\n`,\n        'objective-c': `\n+ (void)unregisterBlacklistedObject:(nonnull id)object\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nNote that for convenience, **some classes are blacklisted by default**: \\`UITextView\\`, \\`UITextField\\` and \\`WKWebView\\`.\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"xamarin\" mdxType=\"TextBlock\">{`\nNote that for convenience, **some classes are blacklisted by default**: \\`UITextView\\`, \\`UITextField\\` and \\`WKWebView\\` on iOS, \\`EditText\\` and \\`WebView\\` on Android.\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\nNote that \\`EditText\\` and \\`WebView\\` are **blacklisted by default** and can be removed using \\`Smartlook.unregisterBlacklistedClass()\\`.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios,react,xamarin\" mdxType=\"TextBlock\">{`\n## Whitelisted views\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios,xamarin,react\" mdxType=\"TextBlock\">{`\nA specific view can be whitelisted so it is recorded even if it is an instance of a blacklisted class:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.registerWhitelistedView(View view);\nSmartlook.registerWhitelistedViews(List<View> views);\n      `,\n        kotlin: `\nSmartlook.registerWhitelistedView(view: View)\nSmartlook.registerWhitelistedViews(views: List<View>)\n      `\n      },\n      ios: {\n        swift: `\nclass func registerWhitelisted(object: Any)\n`,\n        'objective-c': `\n+ (void)registerWhitelistedObject:(nonnull id)object;\n      `\n      },\n      react: {\n        javascript: `\nSmartlook.registerWhitelistedView(ref);\n    `\n      },\n      xamarin: {\n        csharp: `\npublic static void RegisterWhitelistedObject(object @object)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nOr it can be tagged as whitelisted directly in an \\`xml\\` layout file:\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nOr it can be tagged directly by an \\`UIView\\` property added by Smartlook:\n`}</TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        xml: `\n<View>\n  <tag android:id=\"@id/smartlook_whitelisted_view\" android:value=\"\"/>\n</View>\n    `\n      },\n      ios: {\n        swift: `\nsomeView.slSensitive = false\n      `,\n        'objective-c': `\nself.someView.slSensitive = NO;\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nNote also, that there is a small workaround that makes  \\`slSensitive\\` property of \\`UIView\\` inspectable in Xcode Interface Builder, i.e., it is not necessary creating an \\`@IBOutlet\\` for a view that is designed in the Interface Builder just in order to set its sensitivity. See our <Link to=\"/docs/sdk/cookbooks/how-to-make-smartlook-properties-inspectable\">How to make Smartlook properties inspectable</Link> cookbook.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios,xamarin,react\" mdxType=\"TextBlock\">{`\nA specific view can be removed from a whitelist by calling:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.unregisterWhitelistedView(View view);\nSmartlook.unregisterWhitelistedViews(List<View> views);\n      `,\n        kotlin: `\nSmartlook.unregisterWhitelistedView(view: View)\nSmartlook.unregisterWhitelistedViews(views: List<View>)\n      `\n      },\n      ios: {\n        swift: `\nclass func unregisterWhitelisted(object: Any)\n`,\n        'objective-c': `\n+ (void)unregisterWhitelistedObject:(nonnull id)object;\n      `\n      },\n      react: {\n        javascript: `\nSmartlook.unregisterWhitelistedView(ref);\n    `\n      },\n      xamarin: {\n        csharp: `\npublic static void UnregisterWhitelistedObject(object @object)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"cordova,ionic\" mdxType=\"TextBlock\">{`\n## Hidden elements\nSensitive elements can be blacklisted by marking them with \\`.smartlook-hide\\` css class:\n`}</TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      cordova: {\n        html: `\n<div class='smartlook-hide'>\n   This will be hidden.\n</div>\n      `\n      },\n      ionic: {\n        html: `\n<div class='smartlook-hide'>\n   This will be hidden.\n</div>\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" visibleOn=\"cordova,ionic\" mdxType=\"TextBlock\">{`\n**All inputs** are **hidden** by default except for \\`button\\` and \\`submit\\` types.\n`}</TextBlock>\n    <TextBlock visibleOn=\"cordova,ionic\" mdxType=\"TextBlock\">{`\n## Shown elements\nHidden inputs that are hidden by default will be recorded if marked with \\`.smartlook-show\\` css class:\n`}</TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      cordova: {\n        html: `\n<input type=\"text\" class='smartlook-show'>\n      `\n      },\n      ionic: {\n        html: `\n<input type=\"text\" class='smartlook-show'>\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"react\" mdxType=\"TextBlock\">{`\n## Declarative way to handle sensitive views in React Native\nTo simplify handling of sensitive/not sensitive views in React Native we have prepared nice declarative ways to do it.\n#### Using SmartlookSensitiveComponent\nYou can wrap the component to the SmartlookSensitiveComponent and control, if it's hidden or not with \\`isSensitive\\` prop.\nJust be sure that you are not passing functional component as children! Eg. wrap it to [React.forwardRef](https://reactjs.org/docs/forwarding-refs.html) first.\nSee the example in \\`example/src/components/Button.tsx\\`.\n`}</TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      react: {\n        typescript: `\nimport { SmartlookSensitiveComponent } from 'smartlook-react-native-wrapper';\n// Blacklisting\n<SmartlookSensitiveComponent isSensitive={true}>\n  <Button title=\"Blacklisted button\" />\n</SmartlookSensitiveComponent>\n// Whitelisting\n<SmartlookSensitiveComponent isSensitive={false}>\n  <TextInput\n    style={{height: 40}}\n    defaultValue=\"Whitelisted input\"\n  />\n</SmartlookSensitiveComponent>\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"react\" mdxType=\"TextBlock\">{`\n#### Using useSmartlookSensitiveRef hook\nThe another way to handle sensitive views is with \\`useSmartlookSensitiveRef\\` hook.\n`}</TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      react: {\n        typescript: `\nimport { WebView } from 'react-native-webview';\nimport { useSmartlookSensitiveRef } from 'smartlook-react-native-wrapper';\\n\nconst isWebViewSensitive = false;\nconst ref = useSmartlookSensitiveRef<WebView>(isWebViewSensitive);\\n\n<WebView ref={ref} source={{ html: \"...\" }} />\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <h2 {...{\n      \"id\": \"no-rendering\"\n    }}>{`No Rendering`}</h2>\n    <TextBlock visibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nSometimes the whole screen consists of sensitive data. In these cases it is beneficial to not record any screen data. In Unreal SDK the only way to handle these situations is to stop session recording and resuming recording when sensitive data is no longer displayed.\n`}</TextBlock>\n    <TextBlock invisibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nSometimes the whole screen consists of sensitive data. In these cases it is beneficial to not record any screen data.\nThis can be done by switching to \\`no rendering\\` rendering mode:\n`}</TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\nSmartlook.setRenderingMode(RenderingMode.NO_RENDERING);\n      `,\n        kotlin: `\nSmartlook.setRenderingMode(RenderingMode.NO_RENDERING)\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.setRenderingMode(RenderingMode.NO_RENDERING);\n      `,\n        kotlin: `\nSmartlook.setRenderingMode(RenderingMode.NO_RENDERING)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setRenderingMode({renderingMode: Smartlook.RenderingMode.NO_RENDERING})\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.setRenderingMode(SmartlookRenderingMode.NO_RENDERING());\n      `\n      },\n      ios: {\n        swift: `\nSmartlook.setRenderingMode(to: .noRendering)\n      `,\n        'objective-c': `\n[Smartlook setRenderingModeTo:SLRenderingModeNoRendering];\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.setRenderingMode(SmartlookRenderingMode.no_rendering);\n      `\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.SetRenderingMode(RenderingModeType.no_rendering);\n    `\n      },\n      react: {\n        typescript: `\nSmartlook.setRenderingMode(Smartlook.RenderingMode.NoRendering);\n    `\n      },\n      xamarin: {\n        csharp: `\nSmartlook.Analytics.SetRenderingMode(Smartlook.Analytics.RenderingMode.None);\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" visibleOn=\"android,ios,react,xamarin\" mdxType=\"TextBlock\">{`\nSDK provides rendering modes that hide sensitive information by simplifying the rendered screen for recording. This can be advantageous because all user interaction is still being recorded, but all sensitive data are not rendered by design. Read more about rendering modes [in conceptual documentation](/docs/sdk/conceptual/handling-sensitive-data#recording-modes-handling-sensitive-data-at-the-whole-screen-level).\n`}</TextBlock>\n    <TextBlock kind=\"important\" invisibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nSome screens can leak sensitive data even through automatically detected touch events. More about this issue in [secure custom keyboard example](/docs/sdk/cookbooks/secure-custom-keyboard).\n`}</TextBlock>\n    <TextBlock invisibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nWhen an application is no longer displaying sensitive data, the screen rendering mode can be set back to the preferred variant:\n`}</TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\nSmartlook.setRenderingMode(RenderingMode.NATIVE);\n      `,\n        kotlin: `\nSmartlook.setRenderingMode(RenderingMode.NATIVE)\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.setRenderingMode(RenderingMode.NATIVE);\n      `,\n        kotlin: `\nSmartlook.setRenderingMode(RenderingMode.NATIVE)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setRenderingMode({renderingMode: Smartlook.RenderingMode.NATIVE})\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.setRenderingMode(SmartlookRenderingMode.NATIVE());\n      `\n      },\n      ios: {\n        swift: `\nSmartlook.setRenderingMode(to: .native)\n      `,\n        'objective-c': `\n[Smartlook setRenderingModeTo:SLRenderingModeNative];\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.setRenderingMode(SmartlookRenderingMode.native);\n      `\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.SetRenderingMode(RenderingModeType.native);\n    `\n      },\n      react: {\n        typescript: `\nSmartlook.setRenderingMode(Smartlook.RenderingMode.Native);\n    `\n      },\n      xamarin: {\n        csharp: `\nSmartlook.Analytics.SetRenderingMode(Smartlook.Analytics.RenderingMode.Native);\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android,ios,react,xamarin\" mdxType=\"TextBlock\">{`\n## WebView blacklisting/whitelisting\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nWhen an application has some parts displayed using \\`WebView\\` and theese parts should be recorded, then the \\`WebView\\` recording needs to be enabled by removing \\`WebView\\` from the list of blacklisted classes:\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nWhen an application has some parts displayed using \\`WKWebView\\` and theese parts should be recorded, then the \\`WKWebView\\` recording needs to be enabled by removing \\`WKWebView\\` from the  list of blacklisted classes:\n`}</TextBlock>\n    <TextBlock visibleOn=\"react\" mdxType=\"TextBlock\">{`\nWhen an application has some parts displayed using \\`WebView\\` and theese parts should be recorded, then the \\`WebView\\` recording needs to be enabled by adding the given view reference to whitelist:\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"ios\" mdxType=\"TextBlock\">{`\n\\`UIWebView\\` class is obsolete and no longer supported by Apple. Thus, its instances and their content are not specifically handled by Smartlook from the \\`sensitivity\\` point of view.\n`}</TextBlock>\n    <TextBlock visibleOn=\"xamarin\" mdxType=\"TextBlock\">{`\nWhen an application has some parts displayed using a **WebView** (\\`WKWebView\\` on iOS, \\`WebView\\` on Android) and theese parts should be recorded, then the **WebView** recording needs to be enabled by removing the respective components from the blacklist:\n`}</TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\nSmartlook.unregisterBlacklistedClass(WebView.class);\n      `,\n        kotlin: `\nSmartlook.registerBlacklistedClass(WebView::class.java)\n      `\n      },\n      ios: {\n        swift: `\nSmartlook.unregisterBlacklisted(object: WKWebView.class)\n      `,\n        'objective-c': `\n[Smartlook unregisterBlacklistedObject:WKWebView.class];\n      `\n      },\n      react: {\n        typescript: `\n// The full example can be seen in \\`example/src/screens/WebViewScreen.tsx\\`\nimport { WebView } from 'react-native-webview';\nimport { useSmartlookSensitiveRef } from 'smartlook-react-native-wrapper';\\n\nconst isWebViewSensitive = false;\nconst ref = useSmartlookSensitiveRef<WebView>(isWebViewSensitive);\\n\n<WebView ref={ref} source={{ html: \"...\" }} />\n    `\n      },\n      xamarin: {\n        csharp: `\nSmartlook.Analytics.UnregisterBlaclistedObject(MyWebView);\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android,ios,xamarin,react\" mdxType=\"TextBlock\">{`\nIf \\`WebView\\` is being recorded, **all sensitive elements** on the displayed web page should be marked as sensitive so that they **are hidden**. This can be done by marking sensitive HTML elements with \\`.smartlook-hide\\` css class:\n<Code\n  kind=\"example\"\n  snippets={{\n    html: \\`\n<div class='smartlook-hide'>\n   This will be hidden.\n</div>\n\\`,\n  }}\n/>\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios,xamarin,react\" mdxType=\"TextBlock\">{`\nAll inputs are hidden by default except for \\`button\\` and \\`submit\\` types. If some hidden inputs should be recorded they can be marked with \\`.smartlook-show\\` css class:\n<Code\n  visibleOn=\"andoid,ios,xamarin\"\n  kind=\"example\"\n  snippets={{\n    html: \\`\n<input type=\"text\" class='smartlook-show'>\n\\`,\n  }}\n/>\n`}</TextBlock>\n    <h1 {...{\n      \"id\": \"user-identification\"\n    }}>{`User Identification`}</h1>\n    <p>{`User identifier can be specified by calling:`}</p>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setUserIdentifier(@NonNull String identifier);\n      `,\n        kotlin: `\nSmartlook.setUserIdentifier(@NonNull identifier: String)\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.setUserIdentifier(@NonNull String identifier);\n      `,\n        kotlin: `\nSmartlook.setUserIdentifier(@NonNull identifier: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setUserIdentifier({identifier: string})\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.setUserIdentifier(new SmartlookUserIdentifier(identifier: string));\n      `\n      },\n      ios: {\n        swift: `\nclass func setUserIdentifier(_ userIdentifier: String?)\n      `,\n        'objective-c': `\n+ (void)setUserIdentifier:(nullable NSString*)userIdentifier;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.setUserIdentifier(String key);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.SetUserIdentifier(string userIdentifier);\n    `\n      },\n      react: {\n        typescript: `\nSmartlook.setUserIdentifier(userIdentifier: string, userProperties = {}); // userProperties is optional\n    `\n      },\n      xamarin: {\n        csharp: `\nstatic public void SetUserIdentifier(string identifier, Dictionary<string, string> userProperies = null)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nBlueprint:\n`}</TextBlock>\n    <Image visibleOn=\"unreal\" source={unreal_bp_setuserid} width=\"180px\" mdxType=\"Image\" />\n    <TextBlock visibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nC++:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      unreal: {\n        cpp: `\n#include \"Runtime/Analytics/Analytics/Public/Analytics.h\"\n#include \"Runtime/Analytics/Analytics/Public/Interfaces/IAnalyticsProvider.h\"\\n\nFAnalytics::Get().GetDefaultConfiguredProvider()->SetUserID(TEXT(\"Custom User ID\"));\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" mdxType=\"TextBlock\">{`\nIdentifiers can be found in the Dashboard and are very useful for finding specific user’s recordings.\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"user-properties\"\n    }}>{`User properties`}</h2>\n    <CodeBlock kind=\"example\" snippets={{\n      unity: {\n        csharp: `\n      public class PlayerState : MonoBehaviour\n{\n    public string playerName;\n    public int lives;\n    public float health;\n}\n...\nSmartlookUnity.Smartlook.SetUserIdentifier(\"played_id\", JsonUtility.ToJson(somePlayerStateInstance));\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <CodeBlock kind=\"example\" snippets={{\n      react: {\n        javascript: `\n  Smartlook.setUserIdentifier(\"user_id\", { \"property_key\" : \"property_value\"});\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <CodeBlock kind=\"example\" snippets={{\n      flutter: {\n        dart: `\n  Smartlook.setUserIdentifier('user_id', { \"property_key\" : \"property_value\"});\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android,cocos\" mdxType=\"TextBlock\">{`\nAdditional user information such as \\`name\\`, \\`email\\`, etc., can be set using \\`UserProperties\\` helper class and its methods.\n`}</TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\nUserProperties userProperties = new UserProperties()\n   .putEmail(\"sample@email.com\")\n   .putName(\"John Doe\");\\n\nSmartlook.setUserProperties(userProperties);\n      `,\n        kotlin: `\nval userProperties = UserProperties()\n    .putEmail(\"sample@email.com\")\n    .putName(\"John Doe\")\\n\nSmartlook.setUserProperties(userProperties)\n      `\n      },\n      cocos: {\n        java: `\nUserProperties userProperties = new UserProperties();\nuserProperties.putEmail(\"sample@email.com\");\nuserProperties.putName(\"John Doe\");\nSmartlook.setUserProperties(userProperties);\n      `,\n        kotlin: `\nval userProperties = UserProperties().apply {\n    putEmail(\"sample@email.com\")\n    putName(\"John Doe\")\n}\nSmartlook.setUserProperties(userProperties)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" visibleOn=\"android,cocos\" mdxType=\"TextBlock\">{`\nNote that \\`email\\` or \\`name\\` property will be displayed in the list of visitors in the Smartlook Dashboard. Otherwise the \\`identifier\\` is used.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,cocos\" mdxType=\"TextBlock\">{`\nIf there is no suitable helper method for specific properties, \\`put()\\` method can be used. This method accepts a combination of \\`key\\` and \\`value\\`.\n`}</TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\nUserProperties userProperties = new UserProperties().put(\"key\", \"value\");\\n\nSmartlook.setUserProperties(userProperties);\n      `,\n        kotlin: `\nval userProperties = UserProperties().put(\"key\", \"value\")\\n\nSmartlook.setUserProperties(userProperties)\n      `\n      },\n      cocos: {\n        java: `\nUserProperties userProperties = new UserProperties();\nuserProperties.put(\"key\", \"value\");\nSmartlook.setUserProperties(userProperties);\n      `,\n        kotlin: `\nval userProperties = UserProperties()\nuserProperties.put(\"key\", \"value\")\nSmartlook.setUserProperties(userProperties)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android,cocos\" mdxType=\"TextBlock\">{`\nAll helper and \\`put()\\` methods have optional parameters \\`immutable\\` if set to **true**, the value that has been set for the key is going to be immutable.\nThis means it cannot be set again (a new value will **not override** the old one).\n`}</TextBlock>\n    <TextBlock visibleOn=\"cordova,ionic\" mdxType=\"TextBlock\">{`\nAdditional user information, such as \\`name\\`, \\`email\\` and other custom properties can be set by calling:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      cordova: {\n        javascript: `\nSmartlook.setUserIdentifier({\n  identifier: string,\n  sessionProperties: object\n})\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.setUserIdentifier(new SmartlookUserIdentifier(identifier: string, sessionProperties: object));\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <CodeBlock kind=\"example\" snippets={{\n      cordova: {\n        javascript: `\nSmartlook.setUserIdentifier({\n  identifier: \"sample_identifier\",\n  sessionProperties: {\n    name: \"John\",\n    email: \"john@example.com\"\n  }\n})\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.setUserIdentifier(new SmartlookUserIdentifier(\"sample_identifier\", {name: \"John\" email: \"john@example.com\"}));\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"ios,xamarin\" mdxType=\"TextBlock\">{`\nAdditional custom properties can be added to each recording session by calling:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      ios: {\n        swift: `\nclass func setSessionProperty(value: String, forName name: String)\n`,\n        'objective-c': `\n+ (void)setSessionPropertyValue:(nonnull NSString *)value forName:(nonnull NSString *)name;\n`\n      },\n      xamarin: {\n        csharp: `\npublic static void SetSessionProperty(string name, string value, PropertyOptions options = PropertyOptions.Defaults)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"ios,xamarin\" mdxType=\"TextBlock\">{`\nThese properties can be seen in the Dashboard at Visitor details.\n\\n\nIf session property should be protected against accidental further changes it can be set as immutable. Immutable property value cannot be changed once it is set.\n`}</TextBlock>\n    <CodeBlock snippets={{\n      ios: {\n        swift: `\nstatic var immutable: SLPropertyOption\n\\n\nclass func setSessionProperty(value: String, forName name: String, options: SLPropertyOption)\n`,\n        'objective-c': `\ntypedef NS_OPTIONS(NSUInteger, SLPropertyOption) {\n    SLPropertyOptionDefaults    = 0,\n    SLPropertyOptionImmutable   = 1 << 0\n};\n+ (void)setSessionPropertyValue:(nonnull NSString *)value forName:(nonnull NSString *)name withOptions:(SLPropertyOption)options;\n`\n      },\n      xamarin: {\n        csharp: `\n[Flags]\npublic enum PropertyOptions : uint\n{\n  Defaults = 0,\n  Immutable = 1 << 0\n}\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <CodeBlock kind=\"example\" snippets={{\n      ios: {\n        swift: `\nSmartlook.setSessionProperty(value: \"immutable-value\", forName: \"my-property\", options: .immutable)\n      `,\n        'objective-c': `\n[Smartlook setSessionPropertyValue:@\"immutable-value\" forName:@\"my-property\" withOptions:SLPropertyOptionImmutable];\n      `\n      },\n      xamarin: {\n        csharp: `\nSmartlook.Analytics.SetSessionProperty(\"immutable-prop\", \"immutable-value\", Smartlook.Analytics.PropertyOptions.Immutable);\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nAdditional custom properties can be added to each recording session by using UE4 Analytics APIs:\\n\n\\n\nBlueprint:\n* [Start Session with Attributes](https://docs.unrealengine.com/en-US/BlueprintAPI/Analytics/StartSessionwithAttributes/index.html)\n* [Set Build Info](https://docs.unrealengine.com/en-US/BlueprintAPI/Analytics/SetBuildInfo/index.html)\n* [Set Gender](https://docs.unrealengine.com/en-US/BlueprintAPI/Analytics/SetGender/index.html)\n* [Set Location](https://docs.unrealengine.com/en-US/BlueprintAPI/Analytics/SetLocation/index.html)\n* [Set Age](https://docs.unrealengine.com/en-US/BlueprintAPI/Analytics/SetAge/index.html)\n\\n\nC++:\n* [Start Session with Attributes](https://docs.unrealengine.com/en-US/API/Runtime/Analytics/Interfaces/IAnalyticsProvider/StartSession/2/index.html)\n* [Set Build Info](https://docs.unrealengine.com/en-US/API/Runtime/Analytics/Interfaces/IAnalyticsProvider/SetBuildInfo/index.html)\n* [Set Gender](https://docs.unrealengine.com/en-US/API/Runtime/Analytics/Interfaces/IAnalyticsProvider/SetGender/index.html)\n* [Set Location](https://docs.unrealengine.com/en-US/API/Runtime/Analytics/Interfaces/IAnalyticsProvider/SetLocation/index.html)\n* [Set Age](https://docs.unrealengine.com/en-US/API/Runtime/Analytics/Interfaces/IAnalyticsProvider/SetAge/index.html)\n`}</TextBlock>\n    <h1 {...{\n      \"id\": \"analytics\"\n    }}>{`Analytics`}</h1>\n    <TextBlock visibleOn=\"android, ios, react, xamarin\" mdxType=\"TextBlock\">{`\nSome analytic events are recorded out-of-box:\n* Activity/Fragment changes\n* Focus changes\n* Clicked views\n* Application crashes\n* For everything else, custom events can be used\n`}</TextBlock>\n    <TextBlock visibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nUnreal SDK does not track any events automatically like other SDKs. It is needed to use Custom Events.\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\nNames of some automatically detected events can be customized.\n`}</TextBlock>\n    <TextBlock visibleOn=\"cordova,ionic\" mdxType=\"TextBlock\">{`\nOn web based frameworks SDK is not able to autodetect all events like on native frameworks. With that said it is still able to detect Application crashes.\nFor everything else custom events need to be used.\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"custom-event\"\n    }}>{`Custom event`}</h2>\n    <TextBlock invisibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nA simple custom event can be created by calling:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.trackCustomEvent(@NonNull String eventName);\n      `,\n        kotlin: `\nSmartlook.trackCustomEvent(@NonNull eventName: String)\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.trackCustomEvent(@NonNull String eventName);\n      `,\n        kotlin: `\nSmartlook.trackCustomEvent(@NonNull eventName: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.trackCustomEvent({name: string})\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.trackCustomEvent(new SmartlookCustomEvent(name: string));\n      `\n      },\n      ios: {\n        swift: `\nclass func trackCustomEvent(name eventName: String)\n`,\n        'objective-c': `\n+ (void)trackCustomEventWithName:(nonnull NSString*)eventName;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.trackCustomEvent(String eventName);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.TrackCustomEvent(string eventName);\n`\n      },\n      react: {\n        typescript: `\nSmartlook.trackCustomEvent(name: string);\n`\n      },\n      xamarin: {\n        csharp: `\npublic static void TrackCustomEvent(string name, Dictionary<string, string> eventProperties = null)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android,cocos\" mdxType=\"TextBlock\">{`\nAdditional data serialized as \\`JSONObject\\`, \\`Bundle\\`, \\`String\\` with valid json format or key/value pair can be added to a custom event:\n`}</TextBlock>\n    <TextBlock visibleOn=\"cordova,ionic\" mdxType=\"TextBlock\">{`\nAddition data passed as a \\`object\\` can be added to custom event:\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios,xamarin\" mdxType=\"TextBlock\">{`\nCustom event also accepts a dictionary of string key/values as event properties.\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.trackCustomEvent(@NonNull String eventName, JSONObject eventProperties);\nSmartlook.trackCustomEvent(@NonNull String eventName, Bundle eventProperties);\nSmartlook.trackCustomEvent(@NonNull String eventName, String validJsonString);\nSmartlook.trackCustomEvent(@NonNull String eventName, @NotNull String key, String value);\n      `,\n        kotlin: `\nSmartlook.trackCustomEvent(@NonNull eventName: String, eventProperties: JSONObject);\nSmartlook.trackCustomEvent(@NonNull eventName: String, eventProperties: Bundle);\nSmartlook.trackCustomEvent(@NonNull eventName: String, validJsonString: String);\nSmartlook.trackCustomEvent(@NonNull eventName: String, @NotNull key: String, value: String);\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.trackCustomEvent(@NonNull String eventName, JSONObject eventProperties);\nSmartlook.trackCustomEvent(@NonNull String eventName, Bundle eventProperties);\nSmartlook.trackCustomEvent(@NonNull String eventName, String validJsonString);\nSmartlook.trackCustomEvent(@NonNull String eventName, @NotNull String key, String value);\n      `,\n        kotlin: `\nSmartlook.trackCustomEvent(@NonNull eventName: String, eventProperties: JSONObject);\nSmartlook.trackCustomEvent(@NonNull eventName: String, eventProperties: Bundle);\nSmartlook.trackCustomEvent(@NonNull eventName: String, validJsonString: String);\nSmartlook.trackCustomEvent(@NonNull eventName: String, @NotNull key: String, value: String);\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.trackCustomEvent({name: string, eventProperties: object})\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.trackCustomEvent(new SmartlookCustomEvent(name: string, eventProperties: object));\n      `\n      },\n      ios: {\n        swift: `\nSmartlook.trackCustomEvent(name: String, props: [String : String]?)\n`,\n        'objective-c': `\n+ (void)trackCustomEventWithName:(nonnull NSString*)eventName props:(nullable NSDictionary<NSString*, NSString*>*)props;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.trackCustomEvent(String eventName, [Object map = null]);\n`\n      },\n      unity: {\n        csharp: `\n    //json string, obtained for example with JsonUtility.ToJson(param)\nSmartlookUnity.TrackCustomEvent(string eventName, string properties);\n`\n      },\n      react: {\n        typescript: `\nSmartlook.trackCustomEvent(name: string, properties = {});;\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <CodeBlock kind=\"example\" snippets={{\n      cordova: {\n        javascript: `\nSmartlook.trackCustomEvent({\n  name: \"sample_event\",\n  eventProperties: {\n    id: \"sample_id\",\n    text: \"sample text\"\n  }\n})\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.trackCustomEvent(new SmartlookCustomEvent(\"sample_event\", eventProperties: {\n    id: \"sample_id\",\n    text: \"sample text\"\n  }\n));\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock invisibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nA simple custom event can be created by using:\n`}</TextBlock>\n    <TextBlock visibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nBlueprint:\n`}</TextBlock>\n    <Image visibleOn=\"unreal\" src={unreal_bp_recordevent} width=\"206px\" mdxType=\"Image\" />\n    <TextBlock visibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nC++:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      unreal: {\n        cpp: `\n#include \"Runtime/Analytics/Analytics/Public/Analytics.h\"\n#include \"Runtime/Analytics/Analytics/Public/Interfaces/IAnalyticsProvider.h\"\\n\nFAnalytics::Get().GetDefaultConfiguredProvider()->RecordEvent(TEXT(\"Custom Event Name\"));\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nAdditional custom event APIs:\\n\n\\n\nBlueprint:\n* [Record Event with Attributes](https://docs.unrealengine.com/en-US/BlueprintAPI/Analytics/RecordEventwithAttributes/index.html)\n* [Record Error](https://docs.unrealengine.com/en-US/BlueprintAPI/Analytics/RecordError/index.html)\n* [Record Error with Attributes](https://docs.unrealengine.com/en-US/BlueprintAPI/Analytics/RecordErrorwithAttributes/index.html)\n* [Record Currency Purchase (with Attributes)](https://docs.unrealengine.com/en-US/BlueprintAPI/Analytics/RecordCurrencyPurchase/index.html)\n* [Record Currency Given (with Attributes)](https://docs.unrealengine.com/en-US/BlueprintAPI/Analytics/RecordCurrencyGiven/index.html)\n* [Record Item Purchase(with Attributes)](https://docs.unrealengine.com/en-US/BlueprintAPI/Analytics/RecordItemPurchase/index.html)\n* [Record Progress (with Attributes)](https://docs.unrealengine.com/en-US/BlueprintAPI/Analytics/RecordProgress/index.html)\n\\n\nC++:\n* [Record Event with Attributes](https://docs.unrealengine.com/en-US/API/Runtime/Analytics/Interfaces/IAnalyticsProvider/RecordEvent/2/index.html)\n* [Record Error](https://docs.unrealengine.com/en-US/API/Runtime/Analytics/Interfaces/IAnalyticsProvider/RecordError/1/index.html)\n* [Record Error with Attributes](https://docs.unrealengine.com/en-US/API/Runtime/Analytics/Interfaces/IAnalyticsProvider/RecordError/2/index.html)\n* [Record Currency Purchase (with Attributes)](https://docs.unrealengine.com/en-US/API/Runtime/Analytics/Interfaces/IAnalyticsProvider/RecordCurrencyPurchase/1/index.html)\n* [Record Currency Given (with Attributes)](https://docs.unrealengine.com/en-US/API/Runtime/Analytics/Interfaces/IAnalyticsProvider/RecordCurrencyGiven/1/index.html)\n* [Record Item Purchase](https://docs.unrealengine.com/en-US/API/Runtime/Analytics/Interfaces/IAnalyticsProvider/RecordItemPurchase/1/index.html)\n* [Record Progress (with Attributes)](https://docs.unrealengine.com/en-US/API/Runtime/Analytics/Interfaces/IAnalyticsProvider/RecordProgress/1/index.html)\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"android,cordova,ionic,cocos\" mdxType=\"TextBlock\">{`\nEvent properties will effectively use only flat objects.\nIn case an object that includes objects or arrays as a child elements is used, these elements are going to be ignored.\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"navigation-event\"\n    }}>{`Navigation event`}</h2>\n    <TextBlock invisibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nScreen/navigation transitions can be manually tracked by calling:\n`}</TextBlock>\n    <TextBlock visibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nScreen/navigation transitions can be manually tracked by using Custom Events.\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.trackNavigationEvent(@NotNull String name, ViewState viewState);\n      `,\n        kotlin: `\nSmartlook.trackNavigationEvent(@NotNull name: String, viewState: ViewState)\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.trackNavigationEvent(@NotNull String name, ViewState viewState);\n      `,\n        kotlin: `\nSmartlook.trackNavigationEvent(@NotNull name: String, viewState: ViewState)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.trackNavigationEvent({name: string, viewState: Smartlook.ViewState})\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.trackNavigationEvent(new SmartlookNavigationEvent(name: string, viewState: SmartlookViewState));\n      `\n      },\n      ios: {\n        swift: `\nstatic let enter: Smartlook.NavigationEventType\nstatic let exit: Smartlook.NavigationEventType\n\\n\nSmartlook.trackNavigationEvent(withControllerId controllerId: String, type: Smartlook.NavigationEventType)\n`,\n        'objective-c': `\nSLNavigationType const _Nonnull SLNavigationTypeEnter;\nSLNavigationType const _Nonnull SLNavigationTypeExit;\n\\n\n+ (void)trackNavigationEventWithControllerId:(nonnull NSString *)controllerId type:(nonnull SLNavigationType)type;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.trackNavigationEvent(String key, SmartlookNavigationEventType type);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.TrackNavigationEvent(string screenName, NavigationEventType direction);\n`\n      },\n      react: {\n        typescript: `\nSmartlook.trackNavigationEvent(screenName: string, viewState: Smartlook.ViewState);\n`\n      },\n      xamarin: {\n        csharp: `\npublic enum NavigationEventType\n{\n  Enter,\n  Exit\n}\n         \npublic static void TrackNavigationEvent(string identifier, NavigationEventType type = NavigationEventType.Enter)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android,cocos\" mdxType=\"TextBlock\">{`\nwhere \\`viewState\\` can be either \\`ViewState.START\\` or \\`ViewState.STOP\\`.\n`}</TextBlock>\n    <TextBlock visibleOn=\"cordova\" mdxType=\"TextBlock\">{`\nwhere \\`viewState\\` can be either \\`Smartlook.ViewState.START\\` or \\`Smartlook.ViewState.STOP\\`.\n`}</TextBlock>\n    <TextBlock visibleOn=\"ionic\" mdxType=\"TextBlock\">{`\nwhere \\`viewState\\` can be either \\`SmartlookViewState.START\\` or \\`SmartlookViewState.STOP\\`.\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios,xamarin\" mdxType=\"TextBlock\">{`\nwhere the \\`type\\` could flag the event as either \\`enter\\` or \\`exit\\` of the navigation controller.\n`}</TextBlock>\n    <TextBlock kind=\"important\" visibleOn=\"flutter\" mdxType=\"TextBlock\">{`\nNavigation events need to be tracked manually, because Flutter applications typically consist of single activity.\nManual tracking needs to be implemented so **mobile heatmaps work correctly**.\n`}</TextBlock>\n    <TextBlock kind=\"important\" visibleOn=\"unity\" mdxType=\"TextBlock\">{`\nNavigation events need to be tracked manually, because Unity applications typically consist of single activity.\nManual tracking needs to be implemented so **mobile heatmaps work correctly**.\n`}</TextBlock>\n    <TextBlock kind=\"important\" visibleOn=\"cocos\" mdxType=\"TextBlock\">{`\nNavigation events need to be tracked manually, because Cocos applications typically consist of single activity.\nManual tracking needs to be implemented so **mobile heatmaps work correctly**.\n`}</TextBlock>\n    <TextBlock kind=\"important\" visibleOn=\"cordova, ionic\" mdxType=\"TextBlock\">{`\nNavigation events need to be tracked manually, because web technology based applications typically consist of single activity.\nManual tracking needs to be implemented so **mobile heatmaps work correctly**.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nIt can be explicitly specified if the navigation event happened between \\`Activities\\` or \\`Fragments\\`:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.trackNavigationEvent(@NotNull String name, ViewType type, ViewState viewState);\n      `,\n        kotlin: `\nSmartlook.trackNavigationEvent(@NotNull name: String, type: ViewType, viewState: ViewState)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nwhere \\`viewType\\` is one of \\`ViewType.ACTIVITY\\` or \\`ViewType.FRAGMENT\\`.\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"timed-event\"\n    }}>{`Timed event`}</h2>\n    <TextBlock invisibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nDuration of any time-sensitive or long-running actions in the application can be measured using timed events.\nA timed event can be started by using the following:\n`}</TextBlock>\n    <TextBlock visibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nCurrently not supported by the SDK.\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.startTimedCustomEvent(@NotNull String eventName);\nSmartlook.startTimedCustomEvent(@NotNull String eventName, JSONObject eventProperties);\nSmartlook.startTimedCustomEvent(@NotNull String eventName, Bundle eventProperties);\nSmartlook.startTimedCustomEvent(@NotNull String eventName, String eventPropertiesJson);\n      `,\n        kotlin: `\nSmartlook.startTimedCustomEvent(@NotNull eventName: String)\nSmartlook.startTimedCustomEvent(@NotNull eventName: String, eventProperties: JSONObject)\nSmartlook.startTimedCustomEvent(@NotNull eventName: String, eventProperties: Bundle)\nSmartlook.startTimedCustomEvent(@NotNull eventName: String, eventPropertiesJson: String)\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.startTimedCustomEvent(@NotNull String eventName);\nSmartlook.startTimedCustomEvent(@NotNull String eventName, JSONObject eventProperties);\nSmartlook.startTimedCustomEvent(@NotNull String eventName, Bundle eventProperties);\nSmartlook.startTimedCustomEvent(@NotNull String eventName, String eventPropertiesJson);\n      `,\n        kotlin: `\nSmartlook.startTimedCustomEvent(@NotNull eventName: String)\nSmartlook.startTimedCustomEvent(@NotNull eventName: String, eventProperties: JSONObject)\nSmartlook.startTimedCustomEvent(@NotNull eventName: String, eventProperties: Bundle)\nSmartlook.startTimedCustomEvent(@NotNull eventName: String, eventPropertiesJson: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.startTimedCustomEvent({name: string}, successCallback: function(eventId: string));\nSmartlook.startTimedCustomEvent({name: string, eventProperties: object}, successCallback: function(eventId: string));\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.startTimedCustomEvent(new SmartlookTimedCustomEventStart(name: string)): promise<string>;\nsmartlook.startTimedCustomEvent(new SmartlookTimedCustomEventStart(name: string, eventProperties: object)): promise<string>;\n      `\n      },\n      ios: {\n        swift: `\nSmartlook.startTimedCustomEvent(name: String, props: [String : String]?) -> Any\n`,\n        'objective-c': `\n+ (id _Nonnull)startTimedCustomEventWithName:(nonnull NSString*)eventName props:(nullable NSDictionary<NSString*, NSString*>*)props;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.startTimedCustomEvent(String eventName, [Object map = null]);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.StartTimedCustomEvent(string eventName);\nSmartlookUnity.Smartlook.StartTimedCustomEvent(string eventName, string properties)\n`\n      },\n      react: {\n        javascript: `\nSmartlook.startTimedCustomEvent(\"sample_timed_event\", {prop: \"propValue\"});\n`\n      },\n      xamarin: {\n        csharp: `\npublic static string StartTimedCustomEvent(string name, Dictionary<string, string> eventProperties = null)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock invisibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nThis will not send out any events but will return a unique \\`eventId\\` that **needs to be stored** and it is then used to stop/cancel a custom timed event.\nTo send out an event with a duration, stop needs to be called:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.stopTimedCustomEvent(@NotNull String eventId);\nSmartlook.stopTimedCustomEvent(@NotNull String eventId, JSONObject eventProperties);\nSmartlook.stopTimedCustomEvent(@NotNull String eventId, Bundle eventProperties);\nSmartlook.stopTimedCustomEvent(@NotNull String eventId, String eventPropertiesJson);\n      `,\n        kotlin: `\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String)\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String, eventProperties: JSONObject)\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String, eventProperties: Bundle)\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String, eventPropertiesJson: String)\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.stopTimedCustomEvent(@NotNull String eventId);\nSmartlook.stopTimedCustomEvent(@NotNull String eventId, JSONObject eventProperties);\nSmartlook.stopTimedCustomEvent(@NotNull String eventId, Bundle eventProperties);\nSmartlook.stopTimedCustomEvent(@NotNull String eventId, String eventPropertiesJson);\n      `,\n        kotlin: `\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String)\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String, eventProperties: JSONObject)\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String, eventProperties: Bundle)\nSmartlook.stopTimedCustomEvent(@NotNull eventId: String, eventPropertiesJson: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.stopTimedCustomEvent({eventId: string});\nSmartlook.stopTimedCustomEvent({eventId: string, eventProperties: object});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.stopTimedCustomEvent(new SmartlookTimedCustomEventStop(eventId: string));\nsmartlook.stopTimedCustomEvent(new SmartlookTimedCustomEventStop(eventId: string, eventProperties: object));\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.stopTimedCustomEvent(String key, [Object map = null]);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.StopTimedCustomEvent(string eventId);\nSmartlookUnity.Smartlook.StopTimedCustomEvent(string eventId, string properties);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.stopTimedCustomEvent(\"event_id\", {prop: \"propValue\"});\n`\n      },\n      xamarin: {\n        csharp: `\npublic static void TrackTimedCustomEvent(string eventId, Dictionary<string, string> eventProperties = null)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock invisibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nwith corresponding \\`eventId\\` obtained from \\`startTimedCustomEvent\\`.\n`}</TextBlock>\n    <TextBlock kind=\"note\" invisibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nProperties set in start will be **merged** with properties set in stop/cancel. Properties from stop/cancel have a higher priority and will rewrite conflicting properties from the start.\n`}</TextBlock>\n    <TextBlock invisibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nIn case a given action failed \\`cancelTimedCustomEvent()\\` can be called instead of \\`stopTimedCustomEvent()\\` it has an extra field used for the **reason** of any failure:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason);\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason, JSONObject eventProperties);\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason, Bundle eventProperties);\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason, String eventPropertiesJson);\n      `,\n        kotlin: `\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String)\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String, eventProperties: JSONObject)\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String, eventProperties: Bundle)\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String, eventPropertiesJson: String)\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason);\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason, JSONObject eventProperties);\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason, Bundle eventProperties);\nSmartlook.cancelTimedCustomEvent(@NotNull String eventId, String reason, String eventPropertiesJson);\n      `,\n        kotlin: `\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String)\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String, eventProperties: JSONObject)\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String, eventProperties: Bundle)\nSmartlook.cancelTimedCustomEvent(@NotNull eventId: String, reason: String, eventPropertiesJson: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.cancelTimedCustomEvent({eventId: string, reason: string});\nSmartlook.cancelTimedCustomEvent({eventId: string, reason: string, eventProperties: object});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.cancelTimedCustomEvent(new SmartlookTimedCustomEventCancel(eventId: string, reason: string));\nsmartlook.cancelTimedCustomEvent(new SmartlookTimedCustomEventCancel(eventId: string, reason: string, eventProperties: object));\n      `\n      },\n      ios: {\n        swift: `\n// to track successfull events\nSmartlook.trackTimedCustomEvent(eventId: Any, props: [String : String]?)\n// to track event cancellation\nSmartlook.trackTimedCustomEventCancel(eventId: Any, reason: String?, props: [String : String]?)\n`,\n        'objective-c': `\n// to track successfull events\n+ (void)trackTimedCustomEventWithEventId:(id _Nonnull)eventId props:(nullable NSDictionary<NSString*, NSString*>*)props;\n// to track event cancellation\n+ (void)trackTimedCustomEventCancelWithEventId:(id _Nonnull)eventId reason:(NSString *_Nullable)reason props:(nullable NSDictionary<NSString*, NSString*>*)props;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.cancelTimedCustomEvent(String key, String reason, [Object map = null]);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.CancelTimedCustomEvent(string eventId, string reason);\nSmartlookUnity.Smartlook.CancelTimedCustomEvent(string eventId, string reason, string properties);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.stopTimedCustomEvent(\"event_id\", \"reason\", {prop: \"propValue\"});\n`\n      },\n      xamarin: {\n        csharp: `\npublic static void TrackTimedCustomEventCancel(string eventId, string reason = null, Dictionary<string, string> eventProperties = null)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"example\" visibleOn=\"android,cordova,ionic,ios,cocos,xamarin\" mdxType=\"TextBlock\">{`\nTypical use of timed event might look like this:\n<CodeBlock\n  snippets={{\n    android: {\n      java: \\`\nString eventID = Smartlook.startTimedCustomEvent(\"duration_event\");\nThread.sleep(1000); //long running operation\nSmartlook.stopTimedCustomEvent(eventId);\n      \\`,\n      kotlin: \\`\nval eventID = Smartlook.startTimedCustomEvent(\"duration_event\")\nThread.sleep(1000) //long running operation\nSmartlook.stopTimedCustomEvent(eventId)\n      \\`,\n    },\n    cocos: {\n      java: \\`\nString eventID = Smartlook.startTimedCustomEvent(\"duration_event\");\nThread.sleep(1000); //long running operation\nSmartlook.stopTimedCustomEvent(eventId);\n      \\`,\n      kotlin: \\`\nval eventID = Smartlook.startTimedCustomEvent(\"duration_event\")\nThread.sleep(1000) //long running operation\nSmartlook.stopTimedCustomEvent(eventId)\n      \\`,\n    },\n    cordova: {\n      javascript: \\`\nSmartlook.startTimedCustomEvent({name: \"duration_event\"}, function(eventId) {\n  setTimeout(function() {\n    Smartlook.stopTimedCustomEvent({eventId: eventId});\n  }, 1000);\n});\n      \\`,\n    },\n    ionic: {\n      typescript: \\`\nsmartlook.startTimedCustomEvent(new SmartlookTimedCustomEventStart(\"duration_event\")).then((eventId) => {\n  setTimeout(function() {\n    smartlook.stopTimedCustomEvent(new SmartlookTimedCustomEventStop(eventId));\n  }, 1000);\n});\n      \\`,\n    },\n    ios: {\n      swift: \\`\nlet eventRef = Smartlook.startTimedCustomEvent(\"duration_event\");\n// some lenghty operation\nSmartlook.trackTimedCustomEvent(eventRef);\n      \\`,\n      'objective-c': \\`\nid eventRef = [Smartlook startTimedCustomEventWithName:@\"duration_event\"];\n// some lenghty operation\n[Smartlook trackTimedCustomEventCancelWithEventId:eventRef];\n      \\`,\n    },\nxamarin: {\n      csharp: \\`\ntimedEventId = Smartlook.Analytics.StartTimedCustomEvent(\"TIMED_EVENT\", new Dictionary<string, string>() { { \"PROP_1\", \"START_VALUE_1\" }, { \"PROP_2\", \"START_VALUE_2\" } });\nSystem.Threading.Thread.Sleep(1000);\nSmartlook.Analytics.TrackTimedCustomEvent(timedEventId, new Dictionary<string, string>() { { \"PROP_1\", \"TRACK_VALUE_1\" } });\n        \\`,\n    },\n  }}\n/>\n\\n \n`}</TextBlock>\n    <TextBlock invisibleOn=\"ios,unreal\" mdxType=\"TextBlock\">{`\nIn this case the \\`duration_event\\` will have duration a property set to circa 1000ms.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\n## Customize automatic event detection\nFor some automatically detected events SDK tries to figure out the name from the application context:\n* **click event** - Event name consists of \\`Activity\\` name, \\`View\\` class (Button, etc.) and the \\`id\\`.\n* **navigation event** - Event name is set as \\`Activity\\`/\\`Fragment\\` name.\n\\n\nBut sometimes it's impossible to name an event with an easy to read and descriptive name. Because of this, SDK provides an option to personalize event names.\n\\n\n### Name click events\nSo a detected click on a given view has a custom event name instead of an id it can be tagged directly in the XML layout file:\n`}</TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        xml: `\n<View>\n    <tag android:id=\"@id/smartlook_custom_name\" android:value=\"custom_name\"/>\n</View>\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\nIf View has \\`smartlook_custom_name\\` set, clicking on this view will trigger an event with the name consisting of \\`Activity\\` name, \\`View\\` class (\\`Button\\`, etc.) and \\`smartlook_custom_name\\`.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\n### Name navigation events\nCustom names for navigation events can be set in two different ways. \\`Activity\\`/\\`Fragment\\` can implement \\`SmartlookNamedController\\` interface:\n`}</TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\npublic class SettingsActivity extends AppCompatActivity implements SmartlookNamedController {\n    @NotNull\n    @Override\n    public String getCustomName() {\n        return \"custom_activity_name\";\n    }\n}\n      `,\n        kotlin: `\nclass SettingsActivity : AppCompatActivity(), SmartlookNamedController {\n    @NotNull\n    override fun getCustomName(): String {\n        return \"custom_activity_name\";\n    }\n}\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nOr \\`Activity\\`/\\`Fragment\\` root view can be tagged directly in \\`XML\\` layout file:\n`}</TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        xml: `\n<?xml version=\"1.0\" encoding=\"utf-8\"?>\n<View>\n\t<tag android:id=\"@id/smartlook_custom_controller_name\" android:value=\"custom_name\"/>\\n\n\t<!-- child views -->\n</View>\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <h2 {...{\n      \"id\": \"global-event-properties\"\n    }}>{`Global event properties`}</h2>\n    <TextBlock visibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nCurrently not supported by the SDK.\n`}</TextBlock>\n    <TextBlock invisibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nExtra properties can be attached to every event, these properties are called **global event properties**.\nGlobal event properties can be set by calling:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setGlobalEventProperties(JSONObject globalEventProperties, boolean immutable);\nSmartlook.setGlobalEventProperties(Bundle globalEventProperties, boolean immutable);\nSmartlook.setGlobalEventProperties(String globalEventPropertiesJson, boolean immutable);\nSmartlook.setGlobalEventProperty(@NotNull String key, @NotNull String value, boolean immutable);\n      `,\n        kotlin: `\nSmartlook.setGlobalEventProperties(globalEventProperties: JSONObject, immutable: Boolean)\nSmartlook.setGlobalEventProperties(globalEventProperties: Bundle, immutable: Boolean)\nSmartlook.setGlobalEventProperties(globalEventPropertiesJson: String, immutable: Boolean)\nSmartlook.setGlobalEventProperty(@NotNull key: String, @NotNull value: String, immutable: Boolean)\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.setGlobalEventProperties(JSONObject globalEventProperties, boolean immutable);\nSmartlook.setGlobalEventProperties(Bundle globalEventProperties, boolean immutable);\nSmartlook.setGlobalEventProperties(String globalEventPropertiesJson, boolean immutable);\nSmartlook.setGlobalEventProperty(@NotNull String key, @NotNull String value, boolean immutable);\n      `,\n        kotlin: `\nSmartlook.setGlobalEventProperties(globalEventProperties: JSONObject, immutable: Boolean)\nSmartlook.setGlobalEventProperties(globalEventProperties: Bundle, immutable: Boolean)\nSmartlook.setGlobalEventProperties(globalEventPropertiesJson: String, immutable: Boolean)\nSmartlook.setGlobalEventProperty(@NotNull key: String, @NotNull value: String, immutable: Boolean)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setGlobalEventProperties({globalEventProperties: object, immutable: boolean});\nSmartlook.setGlobalEventProperty({key: string, value: string, immutable: boolean});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.setGlobalEventProperties(new SmartlookGlobalEventProperties(globalEventProperties: object, immutable: boolean));\nsmartlook.setGlobalEventProperty(new SmartlookGlobalEventProperty(key: string, value: string, immutable: boolean));\n      `\n      },\n      ios: {\n        swift: `\nclass func setGlobalEventProperty(value: String, forName name: String)\n\\n\nstatic var immutable: SLPropertyOption\nclass func setGlobalEventProperty(value: String, forName name: String, options: SLPropertyOption)\n`,\n        'objective-c': `\n+ (void)setGlobalEventPropertyValue:(nonnull NSString *)value forName:(nonnull NSString *)name;\n\\n\ntypedef NS_OPTIONS(NSUInteger, SLPropertyOption) {\n    SLPropertyOptionDefaults    = 0,\n    SLPropertyOptionImmutable   = 1 << 0\n};\n+ (void)setGlobalEventPropertyValue:(nonnull NSString *)value forName:(nonnull NSString *)name withOptions:(SLPropertyOption)options;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.setGlobalEventProperty(String key, String value, bool immutable)\nSmartlook.setGlobalEventProperties(Object map, bool immutable)\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.SetGlobalEventProperty(string key, string value, bool immutable);\nSmartlookUnity.Smartlook.SetGlobalEventProperties(string properties, bool immutable);\n`\n      },\n      react: {\n        typescript: `\nSmartlook.setGlobalEventProperty(key: string, value: string, immutable = false);\nSmartlook.setGlobalEventProperties(properties: {}, immutable = false)\n`\n      },\n      xamarin: {\n        csharp: `\npublic enum PropertyOptions : uint\n{\n  Defaults = 0,\n  Immutable = 1 << 0\n}\n        \npublic static void SetGlobalEventProperty(string name, string value, PropertyOptions options = PropertyOptions.Defaults)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <CodeBlock kind=\"example\" snippets={{\n      cordova: {\n        javascript: `\nSmartlook.setGlobalEventProperties({\n  globalEventProperties: {\n    global: \"property\",\n    sample: \"test\"\n  },\n  immutable: true\n});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.setGlobalEventProperties(new GlobalEventProperties({sample: \"property\"}, true);\nsmartlook.setGLobalEventProperty(new setGlobalEventProperty(\"sample\", \"property\", true);\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <CodeBlock kind=\"example\" snippets={{\n      ios: {\n        swift: `\nSmartlook.setGlobalEventProperty(value: \"value\", forName: \"my-property\");\nSmartlook.setGlobalEventProperty(value: \"immutable-value\", forName: \"my-immutable-property\", options: .immutable)\n      `,\n        'objective-c': `\n[Smartlook setGlobalEventPropertyValue:@\"value\" forName:@\"my-property\"];\n[Smartlook setGlobalEventPropertyValue:@\"immutable-value\" forName:@\"my-immutable-property\" withOptions:SLPropertyOptionImmutable];\n    `\n      },\n      xamarin: {\n        csharp: `\nSmartlook.Analytics.SetGlobalEventProperty(\"prop1\", \"value1\");\nSmartlook.Analytics.SetGlobalEventProperty(\"immutable-prop\", \"immutable value\", Smartlook.Analytics.PropertyOptions.Immutable);\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock invisibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nProperties set to be **immutable** have the **highest** priority and once set they **cannot be overridden** (only removed).\n`}</TextBlock>\n    <TextBlock kind=\"note\" invisibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nGlobal event properties have higher a priority so in the merging process they will override custom properties with the same key.\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"remove-global-event-properties\"\n    }}>{`Remove global event properties`}</h2>\n    <TextBlock visibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nCurrently not supported by the SDK.\n`}</TextBlock>\n    <TextBlock invisibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nA global property with a given key can be removed:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.removeGlobalEventProperty(String propertyKey);\n      `,\n        kotlin: `\nSmartlook.removeGlobalEventProperty(propertyKey: String)\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.removeGlobalEventProperty(String propertyKey);\n      `,\n        kotlin: `\nSmartlook.removeGlobalEventProperty(propertyKey: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.removeGlobalEventProperty({key: string});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.removeGlobalEventProperty(SmartlookGlobalEventPropertyKey(key: string))\n      `\n      },\n      ios: {\n        swift: `\nSmartlook.removeGlobalEventProperty(forName: String)\n`,\n        'objective-c': `\n+ (void)removeGlobalEventPropertyForName:(nonnull NSString *)name;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.removeGlobalEventProperty(String key)\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.RemoveGlobalEventProperty(string key);\n`\n      },\n      react: {\n        typescript: `\nSmartlook.removeGlobalEventProperty(key: string);\n`\n      },\n      xamarin: {\n        csharp: `\npublic static void RemoveGlobalEventProperty(string name)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock invisibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nOr all global event properties can be removed at once:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.removeAllGlobalEventProperties();\n      `,\n        kotlin: `\nSmartlook.removeAllGlobalEventProperties()\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.removeAllGlobalEventProperties();\n      `,\n        kotlin: `\nSmartlook.removeAllGlobalEventProperties()\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.removeAllGlobalEventProperties();\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.removeAllGlobalEventProperties()\n      `\n      },\n      ios: {\n        swift: `\nSmartlook.clearGlobalEventProperties()\n`,\n        'objective-c': `\n+ (void)clearGlobalEventProperties;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.removeAllGlobalEventProperties()\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.RemoveAllGlobalEventProperties();\n`\n      },\n      react: {\n        javascript: `\nSmartlook.removeAllGlobalEventProperties();\n`\n      },\n      xamarin: {\n        csharp: `\npublic static void ClearGlobalEventProperties()\n              `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" invisibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nGlobal event properties are stored until they are not removed or the app is uninstalled.\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"event-tracking-modes\"\n    }}>{`Event tracking modes`}</h2>\n    <TextBlock visibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nCurrently not supported by the SDK.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios,cordova,ionic,xamarin,cocos,flutter,unity,react\" mdxType=\"TextBlock\">{`\nIt can be beneficial to disable some automatically detected events due to security or usability reasons. This can be done using **event tracking modes**:\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,cocos\" mdxType=\"TextBlock\">{`\n* \\`FULL_TRACKING\\` this a default state. SDK tracks all automatically detected events along with all user defined events.\n* \\`IGNORE_USER_INTERACTION\\` disables automatically detected selector (click on a \\`View\\`), focus, touch, gesture, and keyboard events.\n* \\`IGNORE_NAVIGATION_INTERACTION\\` disables automatically detected navigation events. User defined ones are still being sent.\n* \\`IGNORE_RAGE_CLICKS\\` disables automatic detection and tracking of <Link to=\"/docs/sdk/conceptual/event-tracking#rage-clicks-events\">rage click events</Link>.\n* \\`NO_TRACKING\\` no automatically detected events are tracked. Only user defined events are still tracked.\n`}</TextBlock>\n    <TextBlock visibleOn=\"flutter\" mdxType=\"TextBlock\">{`\n* \\`EventTrackingMode.FULL_TRACKING\\` this a default state. SDK tracks all automatically detected events along with all user defined events.\n* \\`EventTrackingMode.IGNORE_USER_INTERACTION\\` disables automatically detected selector (click on a \\`View\\`), focus, touch, gesture and keyboard events.\n* \\`EventTrackingMode.IGNORE_NAVIGATION_INTERACTION\\` disables automatically detected navigation events. User defined ones are still being sent.\n* \\`EventTrackingMode.IGNORE_RAGE_CLICKS\\` disables automatic detection and tracking of <Link to=\"/docs/sdk/conceptual/event-tracking#rage-clicks-events\">rage click events</Link>.\n* \\`EventTrackingMode.NO_TRACKING\\` no automatically detected events are tracked. Only user defined events are still tracked.\n`}</TextBlock>\n    <TextBlock visibleOn=\"unity\" mdxType=\"TextBlock\">{`\n* \\`SmartlookUnity.Smartlook.EventTrackingMode.FULL_TRACKING\\` this a default state. SDK tracks all automatically detected events along with all user defined events.\n* \\`SmartlookUnity.Smartlook.EventTrackingMode.IGNORE_USER_INTERACTION\\` disables automatically detected selector (click on a \\`View\\`), focus, touch, gesture and keyboard events.\n* \\`SmartlookUnity.Smartlook.EventTrackingMode.IGNORE_NAVIGATION_INTERACTION\\` disables automatically detected navigation events. User defined ones are still being sent.\n* \\`SmartlookUnity.Smartlook.EventTrackingMode.IGNORE_RAGE_CLICKS\\` disables automatic detection and tracking of <Link to=\"/docs/sdk/conceptual/event-tracking#rage-clicks-events\">rage click events</Link>.\n* \\`SmartlookUnity.Smartlook.EventTrackingMode.NO_TRACKING\\` no automatically detected events are tracked. Only user defined events are still tracked.\n`}</TextBlock>\n    <TextBlock visibleOn=\"react\" mdxType=\"TextBlock\">{`\n* \\`Smartlook.EventTrackingMode.FullTracking\\` this a default state. SDK tracks all automatically detected events along with all user defined events.\n* \\`Smartlook.EventTrackingMode.IgnoreUserInteraction\\` disables automatically detected selector (click on a \\`View\\`), focus, touch, gesture and keyboard events.\n* \\`Smartlook.EventTrackingMode.IgnoreNavigationInteraction\\` disables automatically detected navigation events. User defined ones are still being sent.\n* \\`Smartlook.EventTrackingMode.IgnoreRageClicks\\` disables automatic detection and tracking of <Link to=\"/docs/sdk/conceptual/event-tracking#rage-clicks-events\">rage click events</Link>.\n* \\`Smartlook.EventTrackingMode.NoTracking\\` no automatically detected events are tracked. Only user defined events are still tracked.\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">{`\n* \\`fullTracking\\`: this a default state. SDK tracks all automatically detected events along with all user defined events.\n* \\`ignoreUserInteractionEvents\\`: disables automatically detected selector (click on a \\`View\\`), focus, touch, gesture and keyboard events.\n* \\`ignoreNavigationInteraction\\`: disables automatically detected navigation events. User defined ones are still being sent.\n* \\`ignoreRageClicksEvents\\`: disables automatic detection and tracking of <Link to=\"/docs/sdk/conceptual/event-tracking#rage-clicks-events\">rage click events</Link>.\n* \\`noTracking\\`: no automatically detected events are tracked. Only user defined events are still tracked.\n`}</TextBlock>\n    <TextBlock visibleOn=\"cordova\" mdxType=\"TextBlock\">{`\n* \\`Smartlook.EventTrackingMode.FULL_TRACKING\\` this a default state. SDK tracks all automatically detected events along with all user defined events.\n* \\`Smartlook.EventTrackingMode.IGNORE_USER_INTERACTION\\` disables automatically detected selector (click on a \\`View\\`), focus, touch, gesture and keyboard events.\n* \\`Smartlook.EventTrackingMode.IGNORE_NAVIGATION_INTERACTION\\` disables automatically detected navigation events. User defined ones are still being sent.\n* \\`Smartlook.EventTrackingMode.IGNORE_RAGE_CLICKS\\` disables automatic detection and tracking of <Link to=\"/docs/sdk/conceptual/event-tracking#rage-clicks-events\">rage click events</Link>.\n* \\`Smartlook.EventTrackingMode.NO_TRACKING\\` no automatically detected events are tracked. Only user defined events are still tracked.\n`}</TextBlock>\n    <TextBlock visibleOn=\"ionic\" mdxType=\"TextBlock\">{`\n* \\`SmartlookEventTrackingMode.FULL_TRACKING()\\`: this a default state. SDK tracks all automatically detected events along with all user defined events.\n* \\`SmartlookEventTrackingMode.IGNORE_USER_INTERACTION()\\`: automatically detected events will not be tracked. User defined events are still enabled.\n* \\`Smartlook.EventTrackingMode.IGNORE_NAVIGATION_INTERACTION()\\` disables automatically detected navigation events. User defined ones are still being sent.\n* \\`Smartlook.EventTrackingMode.IGNORE_RAGE_CLICKS()\\` disables automatic detection and tracking of <Link to=\"/docs/sdk/conceptual/event-tracking#rage-clicks-events\">rage click events</Link>.\n* \\`Smartlook.EventTrackingMode.NO_TRACKING()\\`: no analytic events are enabled.\n`}</TextBlock>\n    <TextBlock visibleOn=\"xamarin\" mdxType=\"TextBlock\">{`\n  Tracking modes are defined in the \\`EventTrackingMode\\` enumeration:\n* \\`FullTracking\\`: this a default state. SDK tracks all automatically detected events along with all user defined events.\n* \\`IgnoreUserInteraction\\`: automatically detected events will not be tracked. User defined events are still enabled.\n* \\`IgnoreNavigationInteraction\\`: disables automatically detected navigation events. User defined ones are still being sent.\n* \\`IgnoreRageClicks\\`: disables automatic detection and tracking of <Link to=\"/docs/sdk/conceptual/event-tracking#rage-clicks-events\">rage click events</Link>.\n* \\`NoTracking\\`: no analytic events are enabled.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,cordova,ionic\" mdxType=\"TextBlock\">{`\n### Setup with event tracking modes\nSingle or a combination of event tracking modes can be set right at the SDK setup:  \n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.SetupOptionsBuilder setupOptionsBuilder = new Smartlook.SetupOptionsBuilder(API_KEY)\n        .setEventTrackingModes(List<EventTrackingMode> eventTrackingModes);\\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build());\n      `,\n        kotlin: `\nval setupOptionsBuilder = Smartlook.SetupOptionsBuilder(API_KEY)\n        .setEventTrackingModes(eventTrackingModes: List<EventTrackingMode>)\\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build())\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setupAndStartRecording({smartlookAPIKey: string, eventTrackingModes: [Smartlook.EventTrackingMode]});\n      `\n      },\n      ionic: {\n        typescript: `\nvar builder = new SmartlookSetupConfigBuilder(smartlookAPIKey: string)\n        .eventTrackingModes(eventTrackingModes: SmartlookEventTrackingModes);\\n\nSmartlook.setupAndStartRecording(builder.build());\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android,ios,cordova,ionic,xamarin,cocos,flutter,unity,react\" mdxType=\"TextBlock\">{`\n### Set event tracking modes\nSingle or a combination of event tracking modes can be set any time after SDK setup by using the following:  \n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setEventTrackingMode(EventTrackingMode eventTrackingMode);\nSmartlook.setEventTrackingModes(List<EventTrackingMode> eventTrackingModes);\n      `,\n        kotlin: `\nSmartlook.setEventTrackingMode(eventTrackingMode: EventTrackingMode);\nSmartlook.setEventTrackingModes(eventTrackingModes: List<EventTrackingMode>);\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setEventTrackingMode({eventTrackingMode: Smartlook.EventTrackingMode});\nSmartlook.setEventTrackingModes({eventTrackingModes: Smartlook.EventTrackingMode[]});\n      `\n      },\n      ionic: {\n        typescript: `\nSmartlook.setEventTrackingMode(eventTrackingMode: SmartlookEventTrackingMode);\nSMartlook.setEventTrackingModes(eventTrackingModes: SmartlookEventTRackingModes);\n      `\n      },\n      ios: {\n        swift: `\nclass func Smartlook.setEventTrackingMode(to: Smartlook.EventTrackingMode)\nclass func Smartlook.setEventTrackingModes(to: [Smartlook.EventTrackingMode])\n`,\n        'objective-c': `\n+ (void)setEventTrackingModeTo:(SLEventTrackingMode _Nonnull)eventTrackingMode;\n+ (void)setEventTrackingModesTo:(NSArray<SLEventTrackingMode> * _Nonnull)eventTrackingModes;\n      `\n      },\n      xamarin: {\n        csharp: `\npublic static void SetEventTrackingMode(EventTrackingMode eventTrackingMode)\npublic static void SetEventTrackingModes(EventTrackingMode[] eventTrackingModes)\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.setEventTrackingMode(EventTrackingMode eventTrackingMode);\nSmartlook.setEventTrackingModes(List<EventTrackingMode> eventTrackingModes);\n      `,\n        kotlin: `\nSmartlook.setEventTrackingMode(eventTrackingMode: EventTrackingMode);\nSmartlook.setEventTrackingModes(eventTrackingModes: List<EventTrackingMode>);\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.setEventTrackingMode(EventTrackingMode eventTrackingMode);\nSmartlook.setEventTrackingModes(List<EventTrackingMode> eventTrackingModes);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.setEventTrackingMode(EventTrackingMode eventTrackingMode);\nSmartlookUnity.Smartlook.setEventTrackingModes(List<EventTrackingMode> eventTrackingModes);\n`\n      },\n      react: {\n        typescript: `\nSmartlook.setEventTrackingMode(eventTrackingMode: Smartlook.EventTrackingMode);\nSmartlook.setEventTrackingModes(eventTrackingModes: Smartlook.EventTrackingMode[]);\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <CodeBlock kind=\"example\" snippets={{\n      ionic: {\n        typescript: `\nSmartlook.setEventTrackingMode(SmartlookEventTrackingMode.FULL_TRACKING());\nSmartlook.setEventTrackingModes(new SmartlookEventTrackingModes([SmartlookEventTrackingMode.FULL_TRACKING()]);\n      `\n      },\n      react: {\n        typescript: `\nSmartlook.setEventTrackingMode(Smartlook.EventTrackingMode.IgnoreUserInteraction);\nSmartlook.setEventTrackingModes([Smartlook.EventTrackingMode.IgnoreUserInteraction, Smartlook.EventTrackingMode.IgnoreRageClicks]);\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" visibleOn=\"android,ios,cordova,ionic,xamarin\" mdxType=\"TextBlock\">{`\nFurther info about event tracking modes could be found in the <Link to=\"/docs/sdk/conceptual/event-tracking\">Event Tracking</Link> conceptual document.\n\\n\nAlso take a look at the [pin code keyboard sample](/docs/sdk/cookbooks/secure-custom-keyboard), demonstrating usage of analytic event modes.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios,xamarin\" mdxType=\"TextBlock\">{`\n### List event tracking modes\nAll currently active event tracking modes can be listed by calling:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.currentEventTrackingModes();\n      `,\n        kotlin: `\nSmartlook.currentEventTrackingModes()\n      `\n      },\n      ios: {\n        swift: `\nclass func Smartlook.currentEventTrackingModes() -> [Smartlook.EventTrackingMode]\n`,\n        'objective-c': `\n+ (nonnull NSArray<SLEventTrackingMode> *)currentEventTrackingModes;\n      `\n      },\n      xamarin: {\n        csharp: `\npublic static EventTrackingMode[] CurrentEventTrackingModes\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <h1 {...{\n      \"id\": \"rendering\"\n    }}>{`Rendering`}</h1>\n    <TextBlock visibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nCurrently not supported by the SDK.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios,cordova,ionic,react,flutter,cocos,unity,xamarin\" mdxType=\"TextBlock\">{`\nSDK can use different methods of capturing screen image data. These are called **rendering modes**.\n\\n\n## Set rendering mode\n\\n\n`}</TextBlock>\n    <TextBlock kind=\"important\" visibleOn=\"flutter,cocos\" mdxType=\"TextBlock\">{`\nNot all rendering modes are available on this platform. Only RenderingMode.NO_RENDERING or RenderingMode.NATIVE are available.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,cocos\" mdxType=\"TextBlock\">{`\nA rendering mode can be changed on SDK setup using \\`builder\\`:\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios,cordova,ionic,xamarin\" mdxType=\"TextBlock\">{`\nA rendering mode can be set on SDK setup, e.g.:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.SetupOptionsBuilder setupOptionsBuilder = new Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(RenderingMode renderingMode);\\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build());\n      `,\n        kotlin: `\nval setupOptionsBuilder = Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(renderingMode: RenderingMode)\\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build())\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.SetupOptionsBuilder setupOptionsBuilder = new Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(RenderingMode renderingMode);\\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build());\n      `,\n        kotlin: `\nval setupOptionsBuilder = Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(renderingMode: RenderingMode)\\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build())\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setupAndStartRecording({smartlookAPIKey: string, renderingMode: Smartlook.RenderingMode});\n      `\n      },\n      ionic: {\n        typescript: `\nvar builder = new SmartlookSetupConfigBuilder(smartlookAPIKey: string)\n        .renderingMode(renderingMode: SmartlookRenderingMode);\\n\nSmartlook.setupAndStartRecording(builder.build());\n      `\n      },\n      ios: {\n        swift: `\nSmartlook.setup(key: API_KEY, options: [.renderingMode: Smartlook.RenderingMode.wireframe]);\n`,\n        'objective-c': `\n[Smartlook setupWithKey:@\"API_KEY\" options:@{ SLSetupOptionRenderingModeOptionsKey: SLRenderingModeOptionBlueprintWireframe }];\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <CodeBlock kind=\"example\" snippets={{\n      xamarin: {\n        csharp: `\nAnalytics.SetupOptions smartlookSetupOptions = new Analytics.SetupOptions(\n  renderingMode: Analytics.RenderingMode.Wireframe,\n  renderingModeOption: Analytics.RenderingModeOption.IconBlueprint\n );      \n Smartlook.Analytics.Setup(\"API_KEY\", smartlookSetupOptions);\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android,ios,cordova,ionic,xamarin\" mdxType=\"TextBlock\">{`\nOr at anytime during an application run by using thew following:\n`}</TextBlock>\n    <TextBlock visibleOn=\"flutter,cocos\" mdxType=\"TextBlock\">{`\nRendering mode can be set anytime during application run using:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setRenderingMode(RenderingMode renderingMode);\n      `,\n        kotlin: `\nSmartlook.setRenderingMode(renderingMode: RenderingMode)\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.setRenderingMode(RenderingMode String renderingMode);\n      `,\n        kotlin: `\nSmartlook.setRenderingMode(renderingMode: RenderingMode)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setRenderingMode({renderingMode: Smartlook.RenderingMode});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.setRenderingMode(renderingMode: SmartlookRenderingMode);\n      `\n      },\n      ios: {\n        swift: `\nclass func setRenderingMode(to renderingMode: Smartlook.RenderingMode)\n`,\n        'objective-c': `\n+ (void)setRenderingModeTo:(nonnull SLRenderingMode)renderingMode;\n      `\n      },\n      flutter: {\n        dart: `\nenum SmartlookRenderingMode { native, no_rendering }\n\\n\nSmartlook.setRenderingMode(SmartlookRenderingMode renderingMode);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.SetRenderingMode(RenderingModeType renderingMode);\n`\n      },\n      react: {\n        typescript: `\nSmartlook.setRenderingMode(renderingMode: Smartlook.RenderingMode); // Smartlook.RenderingMode.Native/NoRendering/Wireframe\n`\n      },\n      xamarin: {\n        csharp: `\npublic static void SetRenderingMode(RenderingMode renderingMode, RenderingModeOption? renderingModeOption = null)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <CodeBlock kind=\"example\" snippets={{\n      ionic: {\n        typescript: `\nSmartlook.setRenderingMode(SmartlookRenderingMode.NATIVE());\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android,ios,cordova,ionic\" mdxType=\"TextBlock\">{`\nRendering modes available are following:\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\n* \\`RenderingMode.NATIVE\\`\n* \\`RenderingMode.WIREFRAME\\`\n* \\`RenderingMode.NO_RENDERING\\`\n`}</TextBlock>\n    <CodeBlock snippets={{\n      ios: {\n        swift: `\nSmartlook.RenderingMode.native\nSmartlook.RenderingMode.wireframe\nSmartlook.RenderingMode.noRendering\n`,\n        'objective-c': `\nSLRenderingMode const SLRenderingModeNative;\nSLRenderingMode const SLRenderingModeWireframe;\nSLRenderingMode const SLRenderingModeNoRendering;\n      `\n      },\n      xamarin: {\n        csharp: `\npublic enum RenderingMode : uint\n{\n  Native = 0,\n  Wireframe = 1,\n  NoRendering = 2,\n}\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"cordova\" mdxType=\"TextBlock\">{`\n* \\`Smartlook.RenderingMode.NATIVE\\`\n* \\`Smartlook.RenderingMode.NO_RENDERING\\`\n`}</TextBlock>\n    <TextBlock visibleOn=\"ionic\" mdxType=\"TextBlock\">{`\n* \\`SmartlookRenderingMode.NATIVE()\\`\n* \\`SmartlookRenderingMode.NO_RENDERING()\\`\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"android,ios,cordova,ionic,cocos,xamarin\" mdxType=\"TextBlock\">{`\n\\`NO_RENDERING\\` mode does not record any screen data, this is beneficial on screens that include sensitive data, [read more](#no-rendering).\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios,xamarin\" mdxType=\"TextBlock\">{`\n## Current rendering mode\nCurrently active rendering mode can be obtained by calling:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.currentRenderingMode();\n      `,\n        kotlin: `\nSmartlook.currentRenderingMode()\n      `\n      },\n      ios: {\n        swift: `\nclass func currentRenderingMode() -> RenderingMode\n`,\n        'objective-c': `\n+ (_Nonnull SLRenderingMode)currentRenderingMode;\n      `\n      },\n      xamarin: {\n        csharp: `\npublic static RenderingMode CurrentRenderingMode\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android,ios,xamarin\" mdxType=\"TextBlock\">{`\n## Set rendering mode option\n\\`WIREFRAME\\` rendering mode can be further configured by \\`renderingModeOption\\`.\n\\n\nThe rendering mode option can be set on setup:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.SetupOptionsBuilder setupOptionsBuilder = new Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(RenderingMode.WIREFRAME)\n        .setRenderingModeOption(RenderingModeOption renderingModeOption);\\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build());\n      `,\n        kotlin: `\nval setupOptionsBuilder = Smartlook.SetupOptionsBuilder(API_KEY)\n        .setRenderingMode(RenderingMode.WIREFRAME)\n        .setRenderingModeOption(renderingModeOption: RenderingModeOption);\\n\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build());\n        `\n      },\n      ios: {\n        swift: `\nclass func  Smartlook.setup(key: String,\n                        options: [\n                          .renderingMode:Smartlook.RenderingMode,\n                          .renderingModeOption:Smartlook.RenderingModeOption\n                        ])\n          `,\n        'objective-c': `\n+(void)setupWithKey:(nonnull NSString *)key\n            options:@{\n              SLSetupOptionRenderingModeKey:SLRenderingMode,\n              SLSetupOptionRenderingModeOptionsKey:SLRenderingModeOption\n            };\n        `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <CodeBlock kind=\"example\" snippets={{\n      xamarin: {\n        csharp: `\nAnalytics.SetupOptions smartlookSetupOptions = new Analytics.SetupOptions(\n  renderingMode: Analytics.RenderingMode,\n  renderingModeOption: Analytics.RenderingModeOption\n );      \n Smartlook.Analytics.Setup(API_KEY, smartlookSetupOptions);\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android,ios,xamarin\" mdxType=\"TextBlock\">{`\nOr at anytime during an application run by using the following:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setRenderingMode(RenderingMode.WIREFRAME, RenderingModeOption renderingModeOption);\n      `,\n        kotlin: `\nSmartlook.setRenderingMode(RenderingMode.WIREFRAME, renderingModeOption: RenderingModeOption)\n      `\n      },\n      ios: {\n        swift: `\nclass func setRenderingMode(to renderingMode: Smartlook.RenderingMode, option renderingModeOption: Smartlook.RenderingModeOption?)\n`,\n        'objective-c': `\n+ (void)setRenderingModeTo:(nonnull SLRenderingMode)renderingMode withOption:(nullable SLRenderingModeOption)renderingModeOption\n      `\n      },\n      xamarin: {\n        csharp: `\npublic static void SetRenderingMode(RenderingMode renderingMode, RenderingModeOption? renderingModeOption = null)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android,ios,xamarin\" mdxType=\"TextBlock\">{`\nRendering mode options for \\`WIREFRAME\\` rendering mode are following:\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\n* \\`RenderingMode.WIREFRAME\\`\n* \\`RenderingMode.BLUEPRINT\\`\n* \\`RenderingMode.ICON_BLUEPRINT\\`\n`}</TextBlock>\n    <CodeBlock snippets={{\n      ios: {\n        swift: `\nSmartlook.RenderingModeOption.none\nSmartlook.RenderingModeOption.colorWireframe\nSmartlook.RenderingModeOption.blueprintWireframe\nSmartlook.RenderingModeOption.iconBlueprintWireframe\n`,\n        'objective-c': `\nSLRenderingModeOption const SLRenderingModeOptionNone;\nSLRenderingModeOption const SLRenderingModeOptionColorWireframe;\nSLRenderingModeOption const SLRenderingModeOptionBlueprintWireframe;\nSLRenderingModeOption const SLRenderingModeOptionIconBlueprintWireframe;\n      `\n      },\n      xamarin: {\n        csharp: `\npublic enum RenderingModeOption : uint\n{\n  None = 0,\n  Wireframe = 1,\n  Blueprint = 2,\n  IconBlueprint = 3,\n}\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android,ios,xamarin\" mdxType=\"TextBlock\">{`\n## Current rendering mode option\nCurrently active rendering mode option can be obtained by calling:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.currentRenderingModeOption();\n      `,\n        kotlin: `\nSmartlook.currentRenderingModeOption()\n      `\n      },\n      ios: {\n        swift: `\nclass func currentRenderingModeOption() -> RenderingModeOption?\n`,\n        'objective-c': `\n+ (_Nullable SLRenderingModeOption)currentRenderingModeOption;\n      `\n      },\n      xamarin: {\n        csharp: `\npublic static RenderingModeOption CurrentRenderingModeOption\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\n## Interactive player - BETA\nApart from video or wireframe data, SDK can also send additional data needed for the interactive player. Currently this BETA functionality is accessible via builder. Read more about this interactive player's feature [in conceptual documentation](/docs/sdk/conceptual/interactive-player).:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.SetupOptionsBuilder setupOptionsBuilder = new Smartlook.SetupOptionsBuilder(API_KEY)\n        .enableWebGLRecording(WebGLRecordingMode webGLRecordingMode);\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build());\n      `,\n        kotlin: `\nval setupOptionsBuilder = Smartlook.SetupOptionsBuilder(API_KEY)\n        .enableWebGLRecording(webGLRecordingMode: WebGLRecordingMode);\nSmartlook.setupAndStartRecording(setupOptionsBuilder.build());\n        `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nWebGL modes available are the following:\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\n* \\`WebGLRecordingMode.WEBGL_ONLY\\`\n* \\`WebGLRecordingMode.WEBGL_HYBRID\\`\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\n\\`WEBGL_ONLY\\` mode does not record any screen data, similar to \\`NO_RENDERING\\`, however you’ll be able to inspect the app's structure in our interactive player. \\`WEBGL_HYBRID\\` mode sends video or wireframe data and WebGL-related data as well. [read more](#no-rendering).\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\n# Network intercepting\nAn application’s HTTP traffic can be tracked using the network inceptor provided by the SDK. This feature only currently available for **OkHttp** HTTP/REST communication library.\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\nIn case your application is using another HTTP library that allows intercepting, please feel free to submit a feature request on our [github](https://github.com/smartlook/smartlook-android-sdk).\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\n## OkHttp interceptor\nSmartlook interceptor can be added as a another \\`NetworkInterceptor\\` when creating a \\`OkHttpClient\\` like this:\n`}</TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\nOkHttpClient client = new OkHttpClient.Builder()\n    .addNetworkInterceptor(new SmartlookOkHttpInterceptor())\n    .build();\n      `,\n        kotlin: `\nval client = OkHttpClient.Builder()\n    .addNetworkInterceptor(SmartlookOkHttpInterceptor())\n    .build()\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nSmartlook SDK will **not read or send out any body data**, it is reading and sending only these request metadata:\n* **Request URL** that can be stripped of any sensitive data -> read more.\n* **Http method** used for this request.\n* **Request headers** that can be filtered out so they do not leak any sensitive data.\n* **Response headers** that are filtered out so they do not leak any sensitive data.\n* **Protocol** negotiated by this connection.\n* **Duration** between request and response/failure.\n* **Request status** stating if the request was successful or eventually how it failed, can be one of the following:\n  * Ok\n  * Error\n  * Abort\n  * Timeout\n* **Status code** of http response.\n* Flag stating if response was received from the **cache**.\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\nAll intercepted requests can be displayed in **dev tools** on every recording.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\n### Url masks\nSensitive parts of request URLs can be hidden using \\`UrlMask\\`:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nnew UrlMask(String regex);\nnew UrlMask(String regex, String replaceWith);\n      `,\n        kotlin: `\nUrlMask(regex: String)\nUrlMask(regex: String, replaceWith: String)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\nIf \\`replaceWith\\` \\`String\\` is not defined explicitly the default replace \\`String\\` is used.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\n\\`UrlMask\\`s can be added using \\`SmartlookOkHttpInterceptor.Builder\\`:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nnew SmartlookOkHttpInterceptor.Builder()\n                .addUrlMask(UrlMask urlMask)\n                .build();\n      `,\n        kotlin: `\nSmartlookOkHttpInterceptor.Builder()\n                .addUrlMask(urlMask: UrlMask)\n                .build()\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"example\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\nIn this example SDK is intercepting a request with a URL containing a sensitive query named \\`secret\\`:\n\\n\n\\`\\`\\`https://example.com/page?secret=password&second=query\\`\\`\\`\n\\n\nThe content of this sensitive query can be hidden for intercepting using \\`UrlMask\\`:\n<CodeBlock\n  snippets={{\n    android: {\n      java: \\`\nSmartlookOkHttpInterceptor interceptor = new SmartlookOkHttpInterceptor.Builder()\n        .addUrlMask(new UrlMask(\"(name=)[^&]+(&*)\", \"$1&lt;sensitive&gt;$2\"))\n        .build();\\\\n\nOkHttpClient client = new OkHttpClient.Builder()\n        .addNetworkInterceptor(interceptor)\n        .build();\n      \\`,\n      kotlin: \\`\nval interceptor = SmartlookOkHttpInterceptor.Builder()\n        .addUrlMask(UrlMask(\"(name=)[^&]+(&*)\", \"$1&lt;sensitive&gt;$2\"))\n        .build()\\\\n\nval client = OkHttpClient.Builder()\n        .addNetworkInterceptor(interceptor)\n        .build()\n      \\`,\n    },\n  }}\n/>\n\\n\nLike the above shown \\`UrlMask\\` intercepted request, it will have the following URL stored:\n\\n\n\\`\\`\\`https://example.com/page?secret=&lt;sensitive&gt;&second=query\\`\\`\\`\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\n### Sensitive headers\n\\n\nIntercepted headers can contain sensitive data, so they need to be filtered out by their name. This can be done using \\`sensitiveHeaderNameRegexps\\`, this list of sensitive header names contains these regular expressions by default:\n* \\`\".*csrf.*\"\\`\n* \\`\".*token.*\"\\`\n* \\`\".*auth.*\"\\`\n* \\`\".*key.*\"\\`\n* \\`\".*cookie.*\"\\`\n\\n\nA custom list of sensitive header name regular expressions can be defined by the following:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nnew SmartlookOkHttpInterceptor.Builder()\n        .addSensitiveHeaderNameRegex(String headerRegex)\n        .build();\n      `,\n        kotlin: `\nSmartlookOkHttpInterceptor.Builder()\n        .addSensitiveHeaderNameRegex(headerRegex: String)\n        .build()\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"important\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\nIf at least one sensitive header name regex is added, default ones (shown above) are not going to be used.\n`}</TextBlock>\n    <h1 {...{\n      \"id\": \"utility-methods\"\n    }}>{`Utility methods`}</h1>\n    <TextBlock visibleOn=\"android,cordova,ionic,flutter,unity,react,cocos\" mdxType=\"TextBlock\">{`\n## Install referrer\nWhen an application is installed from the **Google Play Store**, Smartlook SDK **automatically** tracks install referrer.\n\\n\nA custom referrer can also be set by using the following:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.setReferrer(String referrer, String source);\n      `,\n        kotlin: `\nSmartlook.setReferrer(referrer: String, source: String)\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.setReferrer(String referrer, String source);\n      `,\n        kotlin: `\nSmartlook.setReferrer(referrer: String, source: String)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.setReferrer({referrer: string, source: string});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.setReferrer(new SmartlookReferrer(referrer: string, source: string))\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.setReferrer(String referrer, String source);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.SetReferrer(string referrer, string source);\n`\n      },\n      react: {\n        typescript: `\nSmartlook.setReferrer(referrer: string, source: string);\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" visibleOn=\"android,cocos\" mdxType=\"TextBlock\">{`\nReferrer value and source of installation are stored per visitor and can be viewed in the Smartlook Dashboard.\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"dashboard-session-url\"\n    }}>{`Dashboard session URL`}</h2>\n    <TextBlock visibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nCurrently not supported by the SDK.\n`}</TextBlock>\n    <TextBlock invisibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nA \\`URL\\` leading to the Smartlook Dashboard for a currently recorded session can be obtained like this:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.getDashboardSessionUrl(boolean withCurrentTimestamp);\n      `,\n        kotlin: `\nSmartlook.getDashboardSessionUrl(withCurrentTimestamp: Boolean)\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.getDashboardSessionUrl(boolean withCurrentTimestamp);\n      `,\n        kotlin: `\nSmartlook.getDashboardSessionUrl(withCurrentTimestamp: Boolean)\n      `\n      },\n      cordova: {\n        javascript: `\n Smartlook.getDashboardSessionUrl({withCurrentTimestamp: boolean}, successCallback: function(dashboardSessionUrl: string));\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.getDashboardSessionUrl(new SmartlookDashboardSessionUrl(withCurrentTimestamp: boolean)): Promise<string>\n      `\n      },\n      ios: {\n        swift: `\nclass func getDashboardSessionURL(withCurrentTimestamp withTimestamp: Bool) -> URL?\n`,\n        'objective-c': `\n+ (nullable NSURL *)getDashboardSessionURLWithCurrentTimestamp:(BOOL)withTimestamp;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.getDashboardSessionUrl(bool withCurrentTimestamp);\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.GetDashboardSessionUrl(bool withCurrentTimestamp);\n`\n      },\n      react: {\n        typescript: `\nSmartlook.getDashboardSessionUrl(withCurrentTimestamp = false): Promise<string>;\n`\n      },\n      xamarin: {\n        csharp: `\npublic static Uri DashboardSessionUri(bool withCurrentTimestamp = false)`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <CodeBlock kind=\"example\" snippets={{\n      cordova: {\n        javascript: `\n Smartlook.getDashboardSessionUrl(\n  {withCurrentTimestamp: true},\n  function (dashboardSessionUrl) {\n    alert('Dashboard session URL: ' + dashboardSessionUrl);\n  }\n)\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.getDashboardSessionUrl(new SmartlookDashboardSessionUrl(false))).then((dashboardSessionUrl) => {\n  alert(dashboardSessionUrl)\n});\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock invisibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nIf \\`withCurrentTimestamp\\` is set to \\`true\\` link it will include information about the current recording timestamp.\nThis will ensure that the player will start playing the session at the moment when \\`getDashboardSessionUrl\\` was called.\n`}</TextBlock>\n    <TextBlock kind=\"note\" invisibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nThis URL can be opened only by someone who has access to your dashboard. This is **not a public shareable link**.\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"dashboard-visitor-url\"\n    }}>{`Dashboard visitor URL`}</h2>\n    <TextBlock visibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nCurrently not supported by the SDK.\n`}</TextBlock>\n    <TextBlock invisibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nA \\`URL\\` leading to the Smartlook Dashboard for a currently recorded visitor can be obtained like this:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.getDashboardVisitorUrl();\n      `,\n        kotlin: `\nSmartlook.getDashboardVisitorUrl()\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.getDashboardVisitorUrl();\n      `,\n        kotlin: `\nSmartlook.getDashboardVisitorUrl()\n      `\n      },\n      cordova: {\n        javascript: `\n Smartlook.getDashboardVisitorUrl(successCallback: function(dashboardSessionUrl: string));\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.getDashboardVisitorUrl(): Promise<string>\n      `\n      },\n      ios: {\n        swift: `\nclass func getDashboardVisitorURL() -> URL?`,\n        'objective-c': `\n+ (nullable NSURL *)getDashboardVisitorURL;\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.getDashboardVisitorUrl();\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.GetDashboardVisitorUrl();\n`\n      },\n      react: {\n        typescript: `\nSmartlook.getDashboardVisitorUrl(): Promise<string>;\n`\n      },\n      xamarin: {\n        csharp: `\npublic static Uri DashboardVisitorUri\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <CodeBlock kind=\"example\" snippets={{\n      cordova: {\n        javascript: `\n Smartlook.getDashboardVisitorUrl(\n  function(dashboardVisitorUrl) {\n    alert('Dashboard visitor URL: ' + dashboardVisitorUrl);\n  }\n)\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.getDashboardVisitorUrl().then((dashboardVisitorUrl) => {\n  alert(dashboardVisitorUrl)\n});\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" invisibleOn=\"unreal\" mdxType=\"TextBlock\">{`\nThis URL can be opened only by someone who has access to your dashboard. This is **not a public sharing link**.\n`}</TextBlock>\n    <h1 {...{\n      \"id\": \"integrations\"\n    }}>{`Integrations`}</h1>\n    <h2 {...{\n      \"id\": \"manual-integration\"\n    }}>{`Manual integration`}</h2>\n    <TextBlock visibleOn=\"android,cordova,ionic,flutter,unity,react,cocos\" mdxType=\"TextBlock\">{`\nSmartlook can be manually integrated into various analytic frameworks using our \\`IntegrationListener\\`.\n\\n\nListener can be registered like this:\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nDashboard URL change notifications can be registered to integrate them programmatically into other party analytics frameworks.\n\\n\nThe notifications are:\n`}</TextBlock>\n    <TextBlock visibleOn=\"xamarin\" mdxType=\"TextBlock\">{`\nApplication can handle dashboard URLs changes and pass the current values to other analytics frameworks by implementing the respective \\`EventHandler\\`s:\n`}</TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\nSmartlook.registerIntegrationListener(new IntegrationListener() {\n    @Override\n    public void onSessionReady(@NotNull String dashboardSessionUrl) {\n        AnalyticsTool.trackSession(dashboardSessionUrl);\n    }\\n\n    @Override\n    public void onVisitorReady(@NotNull String dashboardVisitorUrl) {\n        AnalyticsTool.trackVisitor(dashboardSessionUrl);\n    }\n});\n      `,\n        kotlin: `\nSmartlook.registerIntegrationListener(object : IntegrationListener {\n    override fun onSessionReady(dashboardSessionUrl: String) {\n      AnalyticsTool.trackSession(dashboardSessionUrl)\n    }\\n\n    override fun onVisitorReady(dashboardVisitorUrl: String) {\n      AnalyticsTool.trackVisitor(dashboardSessionUrl)\n    }\n})\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.registerIntegrationListener(new IntegrationListener() {\n    @Override\n    public void onSessionReady(@NotNull String dashboardSessionUrl) {\n        AnalyticsTool.trackSession(dashboardSessionUrl);\n    }\\n\n    @Override\n    public void onVisitorReady(@NotNull String dashboardVisitorUrl) {\n        AnalyticsTool.trackVisitor(dashboardSessionUrl);\n    }\n});\n      `,\n        kotlin: `\nSmartlook.registerIntegrationListener(object : IntegrationListener {\n    override fun onSessionReady(dashboardSessionUrl: String) {\n      AnalyticsTool.trackSession(dashboardSessionUrl)\n    }\\n\n    override fun onVisitorReady(dashboardVisitorUrl: String) {\n      AnalyticsTool.trackVisitor(dashboardSessionUrl)\n    }\n})\n      `\n      },\n      cordova: {\n        javascript: `\n Smartlook.registerIntegrationListener({\n  onSessionReady: function (dashboardSessionUrl) {\n    TextBlock(\"Session: \" + dashboardSessionUrl);\n  },\n  onVisitorReady: function (dashboardVisitorUrl) {\n    TextBlock(\"Visitor: \" + dashboardVisitorUrl);\n  }\n});\n      `\n      },\n      ionic: {\n        typescript: `\n smartlook.registerIntegrationListener(new SmartlookIntegrationListener(\n  function (dashboardSessionUrl) {\n    alert(\"Session: \" + dashboardSessionUrl);\n  },\n  function (dashboardVisitorUrl) {\n    alert(\"Visitor: \" + dashboardVisitorUrl);\n  }\n));\n      `\n      },\n      flutter: {\n        dart: `\n    class CustomIntegrationListener implements IntegrationListener {\n  void onSessionReady(String dashboardSessionUrl) {\n    print(dashboardSessionUrl);\n  }\n\\n\n  void onVisitorReady(String dashboardVisitorUrl) {\n    print(dashboardVisitorUrl);\n  }\n}\n\\n\nSmartlook.registerIntegrationListener(new CustomIntegrationListener());\n      `\n      },\n      unity: {\n        csharp: `\n    public class IntegrationListener : SmartlookUnity.IntegrationListener\n{\n    public override void onSessionReady(string dashboardSessionUrl)\n    {\n        Debug.Log(\"dashboardSessionUrl : \" + dashboardSessionUrl);\n    }\n\\n\n    public override void onVisitorReady(string dashboardVisitorUrl)\n    {\n        Debug.Log(\"dashboardVisitorUrl : \" + dashboardVisitorUrl);\n    }\n}\n\\n\nSmartlookUnity.Smartlook.RegisterIntegrationListener(new IntegrationListener());\n`\n      },\n      react: {\n        typescript: `\nSmartlook.registerIntegrationListener(\n  (visitorUrl: string) => {\n    console.log('app visitor', visitorUrl);\n  },\n  (dashboardUrl: string) => {\n    console.log('app dash', dashboardUrl);\n  },\n);\n`\n      },\n      xamarin: {\n        csharp: `\nvoid c_DashboardSessionUriChanged(object sender, Smartlook.Analytics.DashboardUriChangedEventArgs a)\n{\n  Console.WriteLine(\"AppDelegate: Session Uri changed '{0}''{1}'\", sender, a.dashboardUri);\n}\n \nvoid c_DashboardVisitorUriChanged(object sender, Smartlook.Analytics.DashboardUriChangedEventArgs a)\n{\n  Console.WriteLine(\"AppDelegate: Visitor Uri changed '{0}''{1}'\", sender, a.dashboardUri);\n}\n \nSmartlook.Analytics.DashboardSessionUriChanged += c_DashboardSessionUriChanged;\nSmartlook.Analytics.DashboardVisitorUriChanged += c_DashboardVisitorUriChanged;\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <CodeBlock snippets={{\n      ios: {\n        swift: `\npublic class let dashboardSessionURLChanged: NSNotification.Name\npublic class let dashboardVisitorURLChanged: NSNotification.Name\n      `,\n        'objective-c': `\nNSNotificationName const SLDashboardSessionURLChangedNotification;\nNSNotificationName const SLDashboardVisitorURLChangedNotification;\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android,cordova,ionic,cocos\" mdxType=\"TextBlock\">{`\nListener can be simply unregistered:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.unregisterIntegrationListener();\n      `,\n        kotlin: `\nSmartlook.unregisterIntegrationListener()\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.unregisterIntegrationListener();\n      `,\n        kotlin: `\nSmartlook.unregisterIntegrationListener()\n      `\n      },\n      cordova: {\n        javascript: `\n Smartlook.unregisterIntegrationListener();\n      `\n      },\n      ionic: {\n        typescript: `\n smartlook.unregisterIntegrationListener();\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <h3 {...{\n      \"id\": \"integration-samples\"\n    }}>{`Integration samples`}</h3>\n    <p>{`Samples adjusted for specific analytic tools can be found in the `}<inlineCode parentName=\"p\">{`Integrations documentation:`}</inlineCode></p>\n    <ul>\n      <li parentName=\"ul\">\n        <Link to=\"/docs/sdk/integrations/amplitude\" mdxType=\"Link\">Amplitude</Link>\n      </li>\n      <li parentName=\"ul\">\n        <Link to=\"/docs/sdk/integrations/mixpanel\" mdxType=\"Link\">Mixpanel</Link>\n      </li>\n      <li parentName=\"ul\">\n        <Link to=\"/docs/sdk/integrations/heap\" mdxType=\"Link\">Heap</Link>\n      </li>\n      <li parentName=\"ul\">\n        <Link to=\"/docs/sdk/integrations/firebase-crashlytics\" mdxType=\"Link\">Firebase Crashlytics</Link>\n      </li>\n      <li parentName=\"ul\">\n        <Link to=\"/docs/sdk/integrations/bugsnag\" mdxType=\"Link\">Bugsnag</Link>\n      </li>\n    </ul>\n    <h2 {...{\n      \"id\": \"automatic-integrations\"\n    }}>{`Automatic integrations`}</h2>\n    <TextBlock invisibleOn=\"android,ios\" mdxType=\"TextBlock\">{`\nSmartlook SDK automatic integrations into most popular frameworks are in progress.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios\" mdxType=\"TextBlock\">{`\nAutomatic integrations provide a simple way of integrating Smartlook into various third-party analytic tools.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios\" mdxType=\"TextBlock\">{`\n### Enable integrations\nOne or a list of automatic integrations can be enabled by calling:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.enableIntegration(Integration integration);\nSmartlook.enableIntegrations(List<Integration> integrations);\n      `,\n        kotlin: `\nSmartlook.enableIntegration(integration: Integration)\nSmartlook.enableIntegrations(integrations: List<Integration>)\n      `\n      },\n      ios: {\n        swift: `\npublic class func Smartlook.enable(integrations: [Smartlook.Integration]>)\n      `,\n        'objective-c': `\n+ (void)enableIntegrations:(NSArray<SLIntegration *> * _Nonnull)integrations;\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android,ios\" mdxType=\"TextBlock\">{`\nSpecific \\`Integration\\`s are described in the Integrations documentation:\n- <Link to=\"/docs/sdk/integrations/amplitude\">Amplitude</Link>\n- <Link to=\"/docs/sdk/integrations/mixpanel\">Mixpanel</Link>\n- <Link to=\"/docs/sdk/integrations/heap\">Heap</Link>\n- <Link to=\"/docs/sdk/integrations/firebase-crashlytics\">Firebase Crashlytics</Link>\n- <Link to=\"/docs/sdk/integrations/bugsnag\">Bugsnag</Link>\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios\" mdxType=\"TextBlock\">{`\n### Disable integrations\nEvery currently enabled \\`Integration\\` can be disabled:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.disableIntegration(Integration integration);\nSmartlook.disableIntegrations(List<Integration> integrations);\n      `,\n        kotlin: `\nSmartlook.disableIntegration(integration: Integration)\nSmartlook.disableIntegrations(integrations: List<Integration>)\n      `\n      },\n      ios: {\n        swift: `\npublic class func Smartlook.disable(integrations: [Smartlook.Integration])\n      `,\n        'objective-c': `\n+ (void)disableIntegrations:(NSArray<SLIntegration *> * _Nonnull)integrations;\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android,ios\" mdxType=\"TextBlock\">{`\nOr all currently enabled integrations can be disabled using the following:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.disableAllIntegrations();\n      `,\n        kotlin: `\nSmartlook.disableAllIntegrations()\n      `\n      },\n      ios: {\n        swift: `\npublic class func Smartlook.disableAllIntegrations()\n      `,\n        'objective-c': `\n+ (void)disableAllIntegrations;\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"important\" visibleOn=\"android,ios\" mdxType=\"TextBlock\">{`\nSmartlook SDK tries to disable automatic integration and removes \"integrated\" URLs from targeted analytic tools. This however is a \"best effort\" try and cannot be guaranteed to be successful.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios\" mdxType=\"TextBlock\">{`\n### List integrations\nAll currently enabled integrations can be listed:\n`}</TextBlock>\n    <CodeBlock snippets={{\n      android: {\n        java: `\nSmartlook.currentEnabledIntegrations();\n      `,\n        kotlin: `\nSmartlook.currentEnabledIntegrations()\n      `\n      },\n      ios: {\n        swift: `\npublic class func Smartlook.currentlyEnabledIntegrations()\n      `,\n        'objective-c': `\n+ (NSArray<SLIntegration *> *  _Nonnull)currentlyEnabledIntegrations;\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}