{"version":3,"sources":["webpack:///../src/conceptual/handling-sensitive-data.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","kind","invisibleOn","visibleOn","snippets","android","java","kotlin","ios","swift","react","typescript","xamarin","csharp","cordova","html","ionic","unreal","unity","flutter","dart","cocos","js","src","rendering_modes","isMDXComponent"],"mappings":"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","file":"component---src-conceptual-handling-sensitive-data-mdx-505e6473b799fa872350.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/smartlook.github.io/smartlook.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Code, CodeBlock, TextBlock, Link, MD, Title } from \"components\";\nimport { usePlatforms } from 'hooks';\nimport rendering_modes from 'assets/rendering_modes.png';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <Title mdxType=\"Title\">Handling Sensitive Data</Title>\n    <p>{`The goal of analytics is to understand the user journey in the application and their interaction with it, to better improve the user experience. To gather the necessary data, Smartlook follows user actions and records what users see on the screen. This indeed represents a challenge for protecting user privacy â€“ out of decency, the law requirements, and also because the data itself is rarely needed for analytical purposes.`}</p>\n    <p>{`What analytics uses is the metadata.`}</p>\n    <p>{`There are several ways how Smartlook protects user privacy when gathering the information it needs for its purposes. Smartlook obfuscates out of the box the native visual elements that typically contain private information. The data are replaced by neutral colour boxes during the recording process, they never make it to our systems. Moreover, Smartlook offers a set of methods that enable application developers to avoid recording unnecessary information.`}</p>\n    <p>{`Also, Smartlook provides an open-source `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/smartlook/ios-consent-sdk\"\n      }}>{`Consent SDK for iOS`}</a>{` and `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/smartlook/android-consent-sdk\"\n      }}>{`Consent SDK for Android`}</a>{`, that allows application authors to get user consent to gather the data for analytical purposes.`}</p>\n    <h1 {...{\n      \"id\": \"handling-ui-with-sensitive-data\"\n    }}>{`Handling UI with Sensitive Data`}</h1>\n    <p>{`Potentially any UI element may contain sensitive information that should not be recorded. On the other hand, some elements that are not recorded by default may contain harmless data vital for analytics. Smartlook offers a comprehensive set of methods to handle various scenarios.`}</p>\n    <TextBlock kind=\"note\" mdxType=\"TextBlock\">{`\nTerminology: in Smartlook, disabling UI elements recording is done by blacklisting it. Enabling UI elements recording is done by whitelisting it. Blacklisted UI elements are also called sensitive.\n`}</TextBlock>\n    <p>{`Most UI elements are whitelisted by default. Some types of UI elements (text edits, web views, etc.) are blacklisted by default.`}</p>\n    <p>{`There are three levels of granularity established for handling the sensitive data recording:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`individual UI elements recording`}</li>\n      <li parentName=\"ul\">{`UI element types recording`}</li>\n      <li parentName=\"ul\">{`the whole screen recording`}</li>\n    </ul>\n    <TextBlock kind=\"important\" mdxType=\"TextBlock\">{`\nIn order to provide robust user privacy protection by default, some UI elements, namely text inputs and web views (that typically contain sensitive user data) are not recorded in the default Smartlook setup. The application author must take active steps to whitelist these elements in order to record their content.\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"plaftorm-overview\"\n    }}>{`Plaftorm overview`}</h2>\n    <p>{`The support for individual sensitive data protecting methods depends heavily on the technology used for creating the particular user interface. `}</p>\n    <table>\n      <thead parentName=\"table\">\n        <tr parentName=\"thead\">\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Technology`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Wireframe modes`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`No rendering`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Individual elements sensitivity`}</th>\n          <th parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Classes sensitivity`}</th>\n        </tr>\n      </thead>\n      <tbody parentName=\"table\">\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Native Android`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`supported`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`supported`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`supported`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`supported`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`iOS UIKit`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`supported`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`supported`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`supported`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`supported`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`iOS UISwift`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`limited`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`supported`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`coming soon`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Xamarin`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`supported`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`supported`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`supported`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`supported`}</td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`React Navive`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`supported`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`supported`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`supported`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Cordova/Ionic`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`supported`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`supported`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Embedded WebView`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`supported`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`supported`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Flutter`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`supported`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n        <tr parentName=\"tbody\">\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`Gaming (OpenGL, Metal) frameworks`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}>{`supported`}</td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n          <td parentName=\"tr\" {...{\n            \"align\": null\n          }}></td>\n        </tr>\n      </tbody>\n    </table>\n    <h2 {...{\n      \"id\": \"handling-sensitivity-of-individual-ui-elements\"\n    }}>{`Handling Sensitivity of Individual UI Elements`}</h2>\n    <TextBlock invisibleOn=\"cordova,ionic\" mdxType=\"TextBlock\">{`\nIn order not to record a particular view, like here in an example with an image view that shows a portrait image of the user, use a variable that holds a reference to the view with one of the following approaches to blacklist it.\n`}</TextBlock>\n    <TextBlock visibleOn=\"cordova,ionic\" mdxType=\"TextBlock\">{`\nIn order not to record a particular \\`html\\` element, like here in an example with an \\`img\\` that shows a portrait image of the user, use a \\`css\\` class \\`.smartlook-hide\\` to mark the element as a sensitive one.\n`}</TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\nImageView portraitImageView = (ImageView) findViewById(R.id.portrait_image_view);\nSmartlook.registerBlacklistedView(portraitImageView);\n`,\n        kotlin: `\nval portraitImageView = findViewById(R.id.portrait_image_view) as ImageView\nSmartlook.registerBlacklistedView(portraitImageView)\n`\n      },\n      ios: {\n        swift: `\nSmartlook.registerBlacklisted(object: self.portraitImageView)\nself.portraitImageView.slSensitive = true\n      `,\n        'objective-c': `\n[Smartlook registerBlacklistedObject: self.portraitImageView];\nself.portraitImageView.slSensitive = YES;\n      `\n      },\n      react: {\n        typescript: `\n// We have prepared two convenient ways, it's up to you which you like more\\n\n// React hook based\nimport { useSmartlookSensitiveRef } from 'smartlook-react-native-wrapper';\\n\nfunction MyFunctionalComponent() {\n  const ref = useSmartlookSensitiveRef<Image>(true);\n  return <PortraitImageView ref={ref} />;\n}\\n\n// Or component based\nimport { SmartlookSensitiveComponent } from 'smartlook-react-native-wrapper';\\n\nclass MyClassBasedComponent extends React.Component {\n  render() {\n    return (\n      <SmartlookSensitiveComponent isSensitive={true}>\n        <PortraitImageView />\n      </SmartlookSensitiveComponent>\n    );\n  }\n}\n`\n      },\n      xamarin: {\n        csharp: `\nSmartlook.Analytics.RegisterBlacklistedObject(SomeView);\n      `\n      },\n      cordova: {\n        html: `\n<img class='smartlook-hide'>\n      `\n      },\n      ionic: {\n        html: `\n<img class='smartlook-hide'>\n      `\n      },\n      unreal: {\n        csharp: `\n// This functionality is not available on this platform.\n      `\n      },\n      unity: {\n        csharp: `\n// This functionality is not available on this platform.\n    `\n      },\n      flutter: {\n        dart: `\n// This functionality is not available on this platform.\n      `\n      },\n      cocos: {\n        java: `\n// This functionality is not available on this platform.\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock invisibleOn=\"cordova,ionic\" mdxType=\"TextBlock\">{`\nWhen, on the other hand, an otherwise blacklisted view (in our example a web view) should be recorded, follow this example code:\n`}</TextBlock>\n    <TextBlock visibleOn=\"cordova,ionic\" mdxType=\"TextBlock\">{`\nWhen, on the other hand, an otherwise blacklisted \\`html\\` element (in our example a text input) should be recorded, follow this example code:\n`}</TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\nWebView webView = (WebView) findViewById(R.id.web_view);\nSmartlook.registerWhitelistedView(webView);\n`,\n        kotlin: `\nval webView = findViewById(R.id.web_view) as WebView\nSmartlook.registerWhitelistedView(webView)\n`\n      },\n      ios: {\n        swift: `\nSmartlook.unregisterBlacklisted(object: self.introWebView)\nself.introWebView.slSensitive = false\n      `,\n        'objective-c': `\n[Smartlook unregisterBlacklistedObject: self.self.introWebView];\nself.self.introWebView.slSensitive = NO;\n      `\n      },\n      react: {\n        typescript: `\n// We have prepared two convenient ways, it's up to you which you like more\\n\n// React hook based\nimport { useSmartlookSensitiveRef } from 'smartlook-react-native-wrapper';\\n\nfunction MyFunctionalComponent() {\n  const ref = useSmartlookSensitiveRef<Image>(false);\n  return <WebView ref={ref} />;\n}\\n\n// Or component based\nimport { SmartlookSensitiveComponent } from 'smartlook-react-native-wrapper';\\n\nclass MyClassBasedComponent extends React.Component {\n  render() {\n    return (\n      <SmartlookSensitiveComponent isSensitive={false}>\n        <WebView />\n      </SmartlookSensitiveComponent>\n    );\n  }\n}\n`\n      },\n      xamarin: {\n        csharp: `\nSmartlook.Analytics.RegisterWhitelistedObject(SomeView);\n      `\n      },\n      cordova: {\n        html: `\n<input type=\"text\" class='smartlook-show'>\n      `\n      },\n      ionic: {\n        html: `\n<input type=\"text\" class='smartlook-show'>\n      `\n      },\n      unreal: {\n        csharp: `\n// This functionality is not available on this platform.\n      `\n      },\n      unity: {\n        csharp: `\n// This functionality is not available on this platform.\n    `\n      },\n      flutter: {\n        dart: `\n// This functionality is not available on this platform.\n      `\n      },\n      cocos: {\n        java: `\n// This functionality is not available on this platform.\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nNote also, that there is a small workaround that makes  \\`slSensitive\\` property of \\`UIView\\` inspectable in Xcode Interface Builder, i.e., it is not necessary to create an \\`@IBOutlet\\` for a view that is designed in the Interface Builder just in order to set its sensitivity. See our <Link to=\"/docs/sdk/cookbooks/how-to-make-smartlook-properties-inspectable\">How to make Smartlook properties inspectable</Link> cookbook.\n`}</TextBlock>\n    <TextBlock mdxType=\"TextBlock\">{`\nMore on this topic in <Link to=\"/docs/sdk/api-reference#sensitive-data-hiding\">API reference</Link>.\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"handling-sensitivity-of-classes\"\n    }}>{`Handling Sensitivity of Classes`}</h2>\n    <p>{`In some use-cases, whitelisting or blacklisting individual views is not practical, e.g., in an application that heavily uses web views for presenting some insensitive content, or if the application defines its own subclasses of visual components that present sensitive user data.`}</p>\n    <p>{`To cover this use-case, Smartlook offers `}<strong parentName=\"p\">{`on some platforms`}</strong>{` a convenient way to blacklist or whitelist all descendants of some class or visual elements that conform to a protocol.`}</p>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\nSmartlook.registerBlacklistedClass(WebView.class);\n`,\n        kotlin: `\nSmartlook.registerBlacklistedClass(WebView::class.java)\n`\n      },\n      ios: {\n        swift: `\nSmartlook.registerBlacklisted(object: WKWebView.class)\n      `,\n        'objective-c': `\n[Smartlook registerBlacklistedObject:WKWebView.class];\n      `\n      },\n      react: {\n        js: `\n// This functionality is not available on this platform.\n`\n      },\n      xamarin: {\n        csharp: `\nSmartlook.Analytics.RegisterWhitelistedObject(WKWebView.Class);\n      `\n      },\n      cordova: {\n        html: `\n// This functionality is not available on this platform.\n`\n      },\n      ionic: {\n        html: `\n// This functionality is not available on this platform.\n      `\n      },\n      unreal: {\n        csharp: `\n// This functionality is not available on this platform.\n      `\n      },\n      unity: {\n        csharp: `\n// This functionality is not available on this platform.\n    `\n      },\n      flutter: {\n        dart: `\n// This functionality is not available on this platform.\n      `\n      },\n      cocos: {\n        java: `\n// This functionality is not available on this platform.\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nOn iOS, it is also possible to blacklist or whitelist all instances of a **\\`UIView\\` subclass** or all \\`UIView\\` or all UIView subclasses that conform to a **protocol**. \n`}</TextBlock>\n    <TextBlock mdxType=\"TextBlock\">{`\nMore on this topic in <Link to=\"/docs/sdk/api-reference?platform=android#blacklisted-classes\">API reference</Link>.\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"handling-content-presented-in-webviews\"\n    }}>{`Handling Content Presented in WebViews`}</h2>\n    <p>{`Native WebView classes are blacklisted by default. Its instances, or the whole class, must be whitelisted in order to record its content. However, a whitelisted web view can still contain HTML elements with sensitive content, and Smartlook thus does not record the HTML elements where the user enters data.`}</p>\n    <TextBlock mdxType=\"TextBlock\">{`\nIn order to change the default behavior, \\`html\\` elements that are not recorded by default can be whitelisted by assigning \\`smartlook-show\\` \\`css\\` class to them. Any \\`html\\`   element that should not be recorded can be blacklisted by assigning \\`smartlook-hide\\` \\`css\\` class to it.\n`}</TextBlock>\n    <Code kind=\"example\" snippets={{\n      html: `\n<input type=\"text\" class='smartlook-show'>\\n\n<img class='smartlook-hide'>\n`\n    }} mdxType=\"Code\" />\n    <TextBlock mdxType=\"TextBlock\">{`\nMore on this topic in <Link to=\"/docs/sdk/api-reference#webview-blacklistingwhitelisting\">API reference</Link>.\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"rendering-modes-handling-sensitive-data-at-the-whole-screen-level\"\n    }}>{`Rendering Modes: Handling Sensitive Data at the Whole Screen Level`}</h2>\n    <TextBlock kind=\"important\" mdxType=\"TextBlock\">{`\nThis functionality is fully available only on some platforms. Please consult the <Link to=\"/docs/sdk/api-reference#rendering\">API reference</Link> what rendering modes are available for a particular development toolchain.\n`}</TextBlock>\n    <p>{`There can be scenarios when direct recording of the screen is not appropriate or necessary to understand the user behavior. In such cases, Smartlook can be instructed to use (permanently or just temporarily) one of its wireframe rendering modes.`}</p>\n    <p>{`When a wireframe mode is on, Smartlook draws a sketch of the screens instead of copying its content literally into the video. The principal UI elements and user interaction with them are still clearly distinguishable, but their actual look and content (texts, images) are replaced by an abstract representation.`}</p>\n    <img src={rendering_modes} />\n    <h3 {...{\n      \"id\": \"setting-rendering-mode\"\n    }}>{`Setting Rendering Mode`}</h3>\n    <p>{`The default rendering mode for an application is set in `}<a parentName=\"p\" {...{\n        \"href\": \"https://application.smartlook.com/settings/projects\"\n      }}>{`the dashboard`}</a>{`.`}</p>\n    <p>{`When debugging or experimenting to find the most suitable one for a particular application, the default rendering mode can also be set within the setup options. In production releases, this option should not be used.`}</p>\n    <p>{`The application can change the rendering mode at any time, e.g., to temporarily hide the sensitive user content on some screens. It is also possible to obtain the currently used values.`}</p>\n    <TextBlock mdxType=\"TextBlock\">{`\nMore about rendering modes could be found <Link to=\"/docs/sdk/api-reference#rendering\">in the API reference</Link>.\n`}</TextBlock>\n    <h1 {...{\n      \"id\": \"handling-sensitive-events\"\n    }}>{`Handling Sensitive Events`}</h1>\n    <p>{`It is not just the visual elements that can contain sensitive information. Sometimes, a clue to sensitive user data can be found in user interaction events. Consider that, e.g., location of click events on a keyboard area could be used to guess a userâ€™s password even when the keyboard itself is obfuscated.`}</p>\n    <TextBlock kind=\"important\" mdxType=\"TextBlock\">{`\nClick events in the area of the system keyboard are never recorded by Smartlook. User interaction with custom input elements, e.g., custom PIN-Pad, must be filtered out programmatically by the application developer.\n`}</TextBlock>\n    <p>{`The default setting is to track all events (with the exception of events on the keyboard, for obvious user privacy reasons). When this is not desired, the application may fine-tune the level of tracked events.`}</p>\n    <p>{`Typically, the default `}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`Full Tracking`}</inlineCode></strong>{` mode is desired, as it gives a detailed picture of user activities.`}</p>\n    <p>{`On the other hand, on some screens the event location of touches on an otherwise blacklisted view can reveal sensitive private information (e.g., custom input view for PIN). In such a case, touches should not be recorded, and the application should  switch temporarily to the `}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`Ignore User Interaction Events`}</inlineCode></strong>{` mode.`}</p>\n    <p>{`In specific cases, some apps that handle complex private information on particular screens may prefer stopping event recording altogether, by switching to the `}<strong parentName=\"p\"><inlineCode parentName=\"strong\">{`No Tracking`}</inlineCode></strong>{` mode for the screens.`}</p>\n    <TextBlock kind=\"note\" mdxType=\"TextBlock\">{`\nEvent tracking mode cannot be set on a per-UI-element basis, but only for the whole application.\n`}</TextBlock>\n    <TextBlock mdxType=\"TextBlock\">{`\nMore about event tracking modes can be found <Link to=\"/docs/sdk/api-reference#event-tracking-modes\">in the API reference</Link>.\n`}</TextBlock>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}