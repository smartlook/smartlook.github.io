{"version":3,"sources":["webpack:///../src/integrations/bugsnag-integration.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","visibleOn","kind","snippets","android","java","kotlin","src","auto_integration_bugsnag","invisibleOn","cocos","cordova","javascript","ionic","typescript","ios","swift","flutter","dart","unity","csharp","react","isMDXComponent"],"mappings":"yRAUaA,G,UAAe,S,0NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAK5E,YAAC,IAAD,CAAOA,QAAQ,SAAf,uBACA,YAAC,IAAD,CAAWC,UAAU,UAAUD,QAAQ,aAAvC,mGAIA,YAAC,IAAD,CAAWE,KAAK,UAAUC,SAAU,CAClCC,QAAS,CACPC,KAAM,8FAKNC,OAAQ,0FAMTN,QAAQ,cACX,YAAC,IAAD,CAAWC,UAAU,UAAUD,QAAQ,aAAvC,mGAGA,mBAAKC,UAAU,UAAUM,IAAKC,MAC9B,kBACE,GAAM,sBADR,sBAGA,YAAC,IAAD,CAAWC,YAAY,cAAcT,QAAQ,aAA7C,4EAGA,YAAC,IAAD,CAAWE,KAAK,UAAUC,SAAU,CAClCC,QAAS,CACPC,KAAM,yNAONC,OAAQ,uOAQVI,MAAO,CACLL,KAAM,yNAONC,OAAQ,uOAQVK,QAAS,CACPC,WAAY,kSAUdC,MAAO,CACLC,WAAY,kSAUdC,IAAK,CACHC,MAAO,wRAQP,oVASFC,QAAS,CACPC,KAAM,kBAIRC,MAAO,CACLC,OAAQ,YAIVC,MAAO,CACLT,WAAY,6RAUbZ,QAAQ,cACX,YAAC,IAAD,CAAWE,KAAK,OAAOD,UAAU,UAAUD,QAAQ,aAAnD,qIAGA,YAAC,IAAD,CAAWE,KAAK,OAAOD,UAAU,QAAQD,QAAQ,aAAjD,mIAGA,YAAC,IAAD,CAAWE,KAAK,OAAOD,UAAU,MAAMD,QAAQ,aAA/C,iIAGA,YAAC,IAAD,CAAWE,KAAK,OAAOD,UAAU,QAAQD,QAAQ,aAAjD,sIAGA,YAAC,IAAD,CAAWE,KAAK,OAAOD,UAAU,sBAAsBD,QAAQ,aAA/D,wIAGA,YAAC,IAAD,CAAWS,YAAY,cAAcT,QAAQ,aAA7C,kF,wNAQJH,EAAWyB,gBAAiB","file":"component---src-integrations-bugsnag-integration-mdx-bcf095d057dcce4ee3d5.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/smartlook.github.io/smartlook.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { CodeBlock, TextBlock, Title } from \"components\";\nimport auto_integration_bugsnag from 'assets/auto_integration_bugsnag.png';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <Title mdxType=\"Title\">Bugsnag integration</Title>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\n## Automatic integration\nSmartlook can be automatically integrated into Bugsnag like this:\n`}</TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\nBugsnag.start(this);\n...\nSmartlook.enableIntegration(new BugsnagIntegration());\n      `,\n        kotlin: `\nBugsnag.start(this)\n...\nSmartlook.enableIntegration(BugsnagIntegration())\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nThe Smartlook session URL can be seen in the \\`Smartlook\\` section inside every crash report.\n`}</TextBlock>\n    <img visibleOn=\"android\" src={auto_integration_bugsnag} />\n    <h2 {...{\n      \"id\": \"manual-integration\"\n    }}>{`Manual integration`}</h2>\n    <TextBlock invisibleOn='ios,xamarin' mdxType=\"TextBlock\">\nSmartlook can be easily integrated into Bugsnag using `OnErrorCallback`:\n    </TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\nOnErrorCallback errorCallback = event -> {\n    event.addMetadata(\"Smartlook\", \"Dashboard session URL\", Smartlook.getDashboardSessionUrl(true));\n    return true;\n};\\n\nBugsnag.addOnError(errorCallback);\n      `,\n        kotlin: `\nval errorCallback = OnErrorCallback { event ->\n    event.addMetadata(\"Smartlook\", \"Dashboard session URL\", Smartlook.getDashboardSessionUrl(true))\n    true //report this error\n}\\n\nBugsnag.addOnError(errorCallback)\n      `\n      },\n      cocos: {\n        java: `\nOnErrorCallback errorCallback = event -> {\n    event.addMetadata(\"Smartlook\", \"Dashboard session URL\", Smartlook.getDashboardSessionUrl(true));\n    return true;\n};\\n\nBugsnag.addOnError(errorCallback);\n      `,\n        kotlin: `\nval errorCallback = OnErrorCallback { event ->\n    event.addMetadata(\"Smartlook\", \"Dashboard session URL\", Smartlook.getDashboardSessionUrl(true))\n    true //report this error\n}\\n\nBugsnag.addOnError(errorCallback)\n      `\n      },\n      cordova: {\n        javascript: `\nBugsnag.start({onError: function (event) {\n        Smartlook.getDashboardSessionUrl({withCurrentTimestamp: true},\n        function (dashboardSessionUrl) {\n            event.addMetadata('Smartlook', {\"Dashboard session URL\": dashboardSessionUrl});\n        });\n    }\n});\n      `\n      },\n      ionic: {\n        typescript: `\nBugsnag.start({onError: function (event) {\n        Smartlook.getDashboardSessionUrl({withCurrentTimestamp: true},\n        function (dashboardSessionUrl) {\n            event.addMetadata('Smartlook', {\"Dashboard session URL\": dashboardSessionUrl});\n        });\n    }\n});\n      `\n      },\n      ios: {\n        swift: `\nlet config = BugsnagConfiguration.loadConfig()\nconfig.addOnSendError { (event) -> Bool in\n    event.addMetadata(    Smartlook.getDashboardSessionURL(withCurrentTimestamp: true), key:\"Smartlook dashboard session URL\")\n    return true\n}\nBugsnag.start(with: config)\n      `,\n        'objective-c': `\nBugsnagConfiguration *config = [BugsnagConfiguration loadConfig];\n[config addOnSendErrorBlock:^BOOL (BugsnagEvent *event) {\n  [event addMetadata:[Smartlook getDashboardSessionURLWithCurrentTimestamp:YES] withKey:@\"Smartlook dashboard session URL\"];\n  return YES;\n}];\n[Bugsnag startWithConfiguration:config];\n      `\n      },\n      flutter: {\n        dart: `\ntodo\n      `\n      },\n      unity: {\n        csharp: `\ntodo\n`\n      },\n      react: {\n        javascript: `\nBugsnag.start({onError: function (event) {\n        Smartlook.getDashboardSessionUrl({withCurrentTimestamp: true},\n        function (dashboardSessionUrl) {\n            event.addMetadata('Smartlook', {\"Dashboard session URL\": dashboardSessionUrl});\n        });\n    }\n});\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\nFull Bugsnag documentation with examples can be found on the [official website](https://docs.bugsnag.com/platforms/android/).\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"unity\" mdxType=\"TextBlock\">{`\nFull Bugsnag documentation with examples can be found on the [official website](https://docs.bugsnag.com/platforms/unity/).\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nFull Bugsnag documentation with examples can be found on the [official website](https://docs.bugsnag.com/platforms/ios/).\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"cocos\" mdxType=\"TextBlock\">{`\nFull Bugsnag documentation with examples can be found on the [official website](https://docs.bugsnag.com/platforms/cocos2dx/).\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"cordova,ionic,react\" mdxType=\"TextBlock\">{`\nFull Bugsnag documentation with examples can be found on the [official website](https://docs.bugsnag.com/platforms/javascript/).\n`}</TextBlock>\n    <TextBlock invisibleOn=\"android,ios\" mdxType=\"TextBlock\">{`\n## Automatic integration\nAutomatic Bugsnag integration coming soon.\n`}</TextBlock>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}