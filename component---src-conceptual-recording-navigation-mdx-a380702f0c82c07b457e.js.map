{"version":3,"sources":["webpack:///../src/conceptual/recording-navigation.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","kind","snippets","android","java","kotlin","ios","swift","react","js","unity","csharp","unreal","cocos","cordova","javascript","ionic","typescrit","flutter","dart","xamarin","isMDXComponent"],"mappings":"oQAQaA,G,oBAAe,S,yNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,IAAD,CAAOA,QAAQ,SAAf,wBACA,qBAAG,kBAAIC,WAAW,KAAf,kFACH,0JAAyI,kBAAIA,WAAW,KAAf,WAAzI,0DACA,qGAAoF,sBAAQA,WAAW,KAAnB,qBAApF,gGAA0O,sBAAQA,WAAW,KAAnB,YAA1O,KACA,wJAAuI,kBAAIA,WAAW,KAAf,UAAvI,uEAAiP,kBAAIA,WAAW,KAAf,WAAjP,KACA,YAAC,IAAD,CAAWC,KAAK,YAAYF,QAAQ,aAApC,yMAGA,6hBACA,sJACA,YAAC,IAAD,CAAWE,KAAK,OAAOF,QAAQ,aAA/B,+GAGA,YAAC,IAAD,CAAWE,KAAK,UAAUC,SAAU,CAClCC,QAAS,CACPC,KAAM,6EAGNC,OAAQ,6EAIVC,IAAK,CACHC,MAAO,2FAGP,wHAIFC,MAAO,CACLC,GAAI,yHAKNC,MAAO,CACLC,OAAQ,0HAIVC,OAAQ,CACND,OAAQ,yBAIVE,MAAO,CACLT,KAAM,6EAGNC,OAAQ,6EAIVS,QAAS,CACPC,WAAY,wGAIdC,MAAO,CACLC,UAAW,qHAIbC,QAAS,CACPC,KAAM,8FAIRC,QAAS,CACPT,OAAQ,2BAITZ,QAAQ,cACX,0DAAyC,0BAAYC,WAAW,KAAvB,SAAzC,OAAkG,0BAAYA,WAAW,KAAvB,QAAlG,cAAiK,0BAAYA,WAAW,KAAvB,QAAjK,iFACA,YAAC,IAAD,CAAWD,QAAQ,aAAnB,4I,uNAOJH,EAAWyB,gBAAiB","file":"component---src-conceptual-recording-navigation-mdx-a380702f0c82c07b457e.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/smartlook.github.io/smartlook.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Code, CodeBlock, TextBlock, Link, MD, Title } from \"components\";\nimport { usePlatforms } from 'hooks';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Title mdxType=\"Title\">Recording Navigation</Title>\n    <p><em parentName=\"p\">{`This section discusses how is the user navigation in the application recorded`}</em></p>\n    <p>{`Understanding the way user uses the application is the purpose of the analytics. A typical mobile application breaks into several `}<em parentName=\"p\">{`screens`}</em>{`, between them users navigates to achieve their goals.`}</p>\n    <p>{`Smartlook attempts to track the transitions automaticallt and record them as `}<strong parentName=\"p\">{`navigation events`}</strong>{`, that are then available in the Dashboard. Another usage of navigation events is generating `}<strong parentName=\"p\">{`heatmpas`}</strong>{`.`}</p>\n    <p>{`To generate a meaningfull heatmap, a portion of the application UI with stable structure must be used. Smartlook assumes that a `}<em parentName=\"p\">{`screen`}</em>{`, i.e., interval between two subsequent navigation events is such a `}<em parentName=\"p\">{`UI unit`}</em>{`.`}</p>\n    <TextBlock kind=\"important\" mdxType=\"TextBlock\">\nProperly dividing the user flow into individual screens important for correct heatmap generation, as each heatmap is generated for a particular screen, i.e., interval between two navigation events.\n    </TextBlock>\n    <p>{`However, the accuracy and usefulness of these auto-tracked navigation events depends heavily on the way the application UI is composed. Smartlook understands well apps that use standard UI kits a paradigms for each platform. If the application is, however, made using a 3rd party frameworks, e.g., a gaming framework, that Smartlook SDK cannot detect the navigation logic of the application. Details abount the extent auto-detection of navigation events on each particular platform are provided in the API Reference.`}</p>\n    <p>{`In such a case, in orded to get useful navigation data, navigation events must be tracked programatically, using this method:`}</p>\n    <TextBlock kind=\"note\" mdxType=\"TextBlock\">\nThe navigation event recorded by this method is indistinguishable from the auto-detected navigation events.\n    </TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\nSmartlook.trackNavigationEvent(\"LOGIN_SCREEN\", ViewState.START);\n      `,\n        kotlin: `\nSmartlook.trackNavigationEvent(\"LOGIN_SCREEN\", ViewState.START)\n      `\n      },\n      ios: {\n        swift: `\nSmartlook.trackNavigationEvent(withControllerId: \"LOGIN_SCREEN\", type: .enter)\n      `,\n        'objective-c': `\n[Smartlook trackNavigationEventWithControllerId:@\"LOGIN_SCREEN\" type:SLNavigationTypeEnter];\n      `\n      },\n      react: {\n        js: `\nSmartlook.trackNavigationEvent(\"LOGIN_SCREEN\", \"enter\");\nSmartlook.trackNavigationEvent(\"LOGIN_SCREEN\", \"exit\");\n`\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.TrackNavigationEvent(\"LOGIN_SCREEN\", SmartlookUnity.Smartlook.NavigationEventType.enter);\n`\n      },\n      unreal: {\n        csharp: `\nUNREAL - C#\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.trackNavigationEvent(\"LOGIN_SCREEN\", ViewState.START);\n      `,\n        kotlin: `\nSmartlook.trackNavigationEvent(\"LOGIN_SCREEN\", ViewState.START)\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.trackNavigationEvent({name: \"LOGIN_SCREEN\", viewState: Smartlook.ViewState.START})\n    `\n      },\n      ionic: {\n        typescrit: `\nsmartlook.trackNavigationEvent(new SmartlookNavigationEvent(\"LOGIN_SCREEN\", SmartlookViewState.START));\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.trackNavigationEvent(\"LOGIN_SCREEN\", SmartlookNavigationEventType.enter);\n   `\n      },\n      xamarin: {\n        csharp: `\nXAMARIN - C#\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`where the type value is either of `}<inlineCode parentName=\"p\">{`enter`}</inlineCode>{` or `}<inlineCode parentName=\"p\">{`exit`}</inlineCode>{` kind. The `}<inlineCode parentName=\"p\">{`exit`}</inlineCode>{` event also records the duration from the previous corresponding enter event.`}</p>\n    <TextBlock mdxType=\"TextBlock\">{`\nMore details about the navigation events, consult <Link to=\"/docs/sdk/api-reference#navigation-even\">the API reference</Link>.\n`}</TextBlock>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}