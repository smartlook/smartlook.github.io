(window.webpackJsonp=window.webpackJsonp||[]).push([[27],{YTOi:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return l})),n.d(t,"default",(function(){return b}));var i=n("Fcif"),r=n("+I+c"),o=(n("mXGw"),n("/FXl")),s=n("TjRS"),a=n("+8zC"),l=(n("aD51"),{});void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/integrations/firebase-crashlytics-integration.mdx"}});var c={_frontmatter:l},d=s.a;function b(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(o.b)(d,Object(i.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)(a.k,{mdxType:"Title"},"Firebase Crahslytics integration"),Object(o.b)("h2",{id:"automatic-integration"},"Automatic integration"),Object(o.b)("p",null,"Smartlook can be auto-integrated into you projectâ€™s crashlytics simply by calling:"),Object(o.b)(a.c,{kind:"example",snippets:{android:{java:"\nSmartlook.enableCrashlytics(true);\n      ",kotlin:"\nSmartlook.enableCrashlytics(true)\n      "},cocos:{java:"\nSmartlook.enableCrashlytics(true);\n      ",kotlin:"\nSmartlook.enableCrashlytics(true)\n      "},cordova:{javascript:"\nNot available on this platform.\n      "},ionic:{typescript:"\nNot available on this platform.\n      "},ios:{swift:'\nSmartlook.setup(key:"THE_API_KEY", options:[.enableCrashytics: true])\n      ',"objective-c":'\n[Smartlook startWithKey:@"THE_API_KEY" withOptions:@{ SLSetupOptionEnableCrashyticsKey:@YES } ];\n      '},flutter:{dart:"\nSmartlook.enableCrashlytics(true);\n      "},unity:{csharp:"\nSmartlookUnity.Smartlook.EnableCrashlytics(true);\n"},react:{javascript:"\nSmartlook.enableCrashlytics(true);\n      "}},mdxType:"CodeBlock"}),Object(o.b)("p",null,"Then in Crashlytics dashboard, there should be a new ",Object(o.b)("inlineCode",{parentName:"p"},"Smartlook session URL")," key-value pair with link to your Smartlook dashboard. Once opened, you can directly play recording just before the crash."),Object(o.b)("h2",{id:"manual-integration"},"Manual integration"),Object(o.b)(a.j,{invisibleOn:"ios",mdxType:"TextBlock"},"Smartlook can be easily integrated into Crashlytics using `IntegrationListener`:"),Object(o.b)(a.j,{visibleOn:"ios",mdxType:"TextBlock"},"Smartlook can be easily integrated into Crashlytics using `Notifications`:"),Object(o.b)(a.c,{kind:"example",snippets:{android:{java:'\nSmartlook.registerIntegrationListener(new IntegrationListener() {\n    @Override\n    public void onSessionReady(@NotNull String dashboardSessionUrl) {\n        FirebaseCrashlytics.getInstance().setCustomKey("Smartlook session URL", dashboardSessionUrl);\n    }\n\n    @Override\n    public void onVisitorReady(@NotNull String dashboardVisitorUrl) {\n        FirebaseCrashlytics.getInstance().setCustomKey("Smartlook visitor URL", dashboardVisitorUrl);\n    }\n});\n      ',kotlin:'\nSmartlook.registerIntegrationListener(object : IntegrationListener {\n    override fun onSessionReady(dashboardSessionUrl: String) {\n        FirebaseCrashlytics.getInstance().setCustomKey("Smartlook session URL", dashboardSessionUrl)\n    }\n\n    override fun onVisitorReady(dashboardVisitorUrl: String) {\n        FirebaseCrashlytics.getInstance().setCustomKey("Smartlook visitor URL", dashboardVisitorUrl)\n    }\n})\n      '},cocos:{java:'\nSmartlook.registerIntegrationListener(new IntegrationListener() {\n    @Override\n    public void onSessionReady(@NotNull String dashboardSessionUrl) {\n        FirebaseCrashlytics.getInstance().setCustomKey("Smartlook session URL", dashboardSessionUrl);\n    }\n\n    @Override\n    public void onVisitorReady(@NotNull String dashboardVisitorUrl) {\n        FirebaseCrashlytics.getInstance().setCustomKey("Smartlook visitor URL", dashboardVisitorUrl);\n    }\n});\n      ',kotlin:'\nSmartlook.registerIntegrationListener(object : IntegrationListener {\n    override fun onSessionReady(dashboardSessionUrl: String) {\n        FirebaseCrashlytics.getInstance().setCustomKey("Smartlook session URL", dashboardSessionUrl)\n    }\n\n    override fun onVisitorReady(dashboardVisitorUrl: String) {\n        FirebaseCrashlytics.getInstance().setCustomKey("Smartlook visitor URL", dashboardVisitorUrl)\n    }\n})\n      '},cordova:{javascript:"\nNot available on this platform.\n      "},ionic:{typescript:"\nNot available on this platform.\n      "},ios:{swift:'\nNotificationCenter.default.addObserver(forName: Smartlook.dashboardSessionURLChanged, object: nil, queue: nil) { (note) in\n  if let currentSessionUrl = Smartlook.getDashboardSessionURL(withCurrentTimestamp: false) {\n        Crashlytics.crashlytics().setCustomValue(currentSessionUrl, forKey: "Smartlook session URL")\n  }\n};\n\nNotificationCenter.default.addObserver(forName: Smartlook.dashboardVisitorURLChanged, object: nil, queue: nil) { (note) in\n  if let currentVisitorUrl = Smartlook.getDashboardVisitorURL() {\n    Crashlytics.crashlytics().setCustomValue(currentVisitorUrl, forKey: "Smartlook visitor URL")\n  }\n}\n      ',"objective-c":'\n[[NSNotificationCenter defaultCenter] addObserverForName:SLDashboardSessionURLChangedNotification object:nil queue:nil usingBlock:^(NSNotification * _Nonnull note) {\n    NSURL *currentSessionURL = [Smartlook getDashboardSessionURLWithCurrentTimestamp:NO];\n    if (currentSessionURL != nil) {\n        [[FIRCrashlytics crashlytics] setCustomValue:currentSessionURL forKey:@"session_url"];\n    }\n}];\n\n[[NSNotificationCenter defaultCenter] addObserverForName:SLDashboardVisitorURLChangedNotification object:nil queue:nil usingBlock:^(NSNotification * _Nonnull note) {\n    NSURL *currentVisitorURL = [Smartlook getDashboardVisitorURL];\n    if (currentVisitorURL != nil) {\n        [[FIRCrashlytics crashlytics] setCustomValue:currentVisitorURL forKey:@"smartlook_visitor_url"];\n    }\n}];\n      '},flutter:{dart:"\nclass CustomIntegrationListener implements IntegrationListener {\n  void onSessionReady(String dashboardSessionUrl) {\n    // Flutter bridge is limited regarding the Crashlytics API so feel free to use whatever is the best choice for you\n  }\n\n\n  void onVisitorReady(String dashboardVisitorUrl) {\n    // Flutter bridge is limited regarding the Crashlytics API so feel free to use whatever is the best choice for you\n  }\n}\n\n\nSmartlook.registerIntegrationListener(new CustomIntegrationListener());\n      "},unity:{csharp:"\npublic class IntegrationListener : SmartlookUnity.IntegrationListener\n{\n    public override void onSessionReady(string dashboardSessionUrl)\n    {\n        Crashlytics.SetCustomKey('dashboardSessionUrl', dashboardSessionUrl);\n    }\n    public override void onVisitorReady(string dashboardVisitorUrl)\n    {\n        Crashlytics.SetCustomKey('dashboardVisitorUrl', dashboardVisitorUrl);\n    }\n}\n\nSmartlookUnity.Smartlook.RegisterIntegrationListener(new IntegrationListener());\n"},react:{javascript:"\nSmartlook.registerIntegrationListener({\n  onSessionReady: function (dashboardSessionUrl) {\n    await Promise.all([\n      crashlytics().setAttribute('dashboardSessionUrl', dashboardSessionUrl)\n    ]);\n);\n  },\n  onVisitorReady: function (dashboardVisitorUrl) {\n    await Promise.all([\n      crashlytics().setAttribute('dashboardVisitorUrl', dashboardVisitorUrl)\n    ]);\n  }\n});\n      "}},mdxType:"CodeBlock"}),Object(o.b)(a.j,{kind:"note",mdxType:"TextBlock"},"\nFull Firebase Crashlytics documentation can be found on the [official website](https://firebase.google.com/docs/crashlytics).\n"))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/integrations/firebase-crashlytics-integration.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-integrations-firebase-crashlytics-integration-mdx-5c06fed416425955eb25.js.map