{"version":3,"sources":["webpack:///../src/integrations/heap-integration.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","visibleOn","kind","snippets","android","java","kotlin","ios","swift","src","auto_integration_heap","invisibleOn","cocos","cordova","javascript","ionic","typescript","flutter","dart","unity","csharp","react","isMDXComponent"],"mappings":"2RAUaA,G,UAAe,S,uNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAK5E,YAAC,IAAD,CAAOA,QAAQ,SAAf,oBACA,YAAC,IAAD,CAAWC,UAAU,cAAcD,QAAQ,aAA3C,6GAIA,YAAC,IAAD,CAAWE,KAAK,UAAUC,SAAU,CAClCC,QAAS,CACPC,KAAM,kHAKNC,OAAQ,6GAMVC,IAAK,CACHC,MAAO,kUAMP,0VAODR,QAAQ,cACX,YAAC,IAAD,CAAWE,KAAK,YAAYD,UAAU,UAAUD,QAAQ,aAAxD,iFAGA,YAAC,IAAD,CAAWC,UAAU,cAAcD,QAAQ,aAA3C,8HAGA,mBAAKC,UAAU,UAAUQ,IAAKC,MAC9B,kBACE,GAAM,sBADR,sBAGA,YAAC,IAAD,CAAWR,KAAK,YAAYD,UAAU,UAAUD,QAAQ,aAAxD,sRAGA,YAAC,IAAD,CAAWW,YAAY,cAAcX,QAAQ,aAA7C,6EAGA,YAAC,IAAD,CAAWC,UAAU,MAAMD,QAAQ,aAAnC,uEAGA,YAAC,IAAD,CAAWE,KAAK,UAAUC,SAAU,CAClCC,QAAS,CACPC,KAAM,slBAgBNC,OAAQ,+hBAeVM,MAAO,CACLP,KAAM,slBAgBNC,OAAQ,+hBAeVO,QAAS,CACPC,WAAY,+VAadC,MAAO,CACLC,WAAY,6VAadT,IAAK,CACHC,MAAO,mpBAYP,m0BAeFS,QAAS,CACPC,KAAM,slBAyBRC,MAAO,CACLC,OAAQ,6YAiBVC,MAAO,CACLP,WAAY,oWAcbd,QAAQ,cACX,YAAC,IAAD,CAAWE,KAAK,OAAOF,QAAQ,aAA/B,uH,qNAOJH,EAAWyB,gBAAiB","file":"component---src-integrations-heap-integration-mdx-8dae47d54f904ead56c2.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/smartlook.github.io/smartlook.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { CodeBlock, TextBlock, Title } from \"components\";\nimport auto_integration_heap from 'assets/auto_integration_heap.png';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <Title mdxType=\"Title\">Heap integration</Title>\n    <TextBlock visibleOn=\"android,ios\" mdxType=\"TextBlock\">{`\n## Automatic integration\nSmartlook can be automatically integrated into Heap by using the following:\n`}</TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\nHeap.init(applicationContext, \"MY ENV ID\");\n...\nSmartlook.enableIntegration(new HeapIntegration());\n      `,\n        kotlin: `\nHeap.init(applicationContext, \"MY ENV ID\")\n...\nSmartlook.enableIntegration(HeapIntegration())\n      `\n      },\n      ios: {\n        swift: `\nHeap.initialize(\"YOUR_HEAP_API_KEY\")\\n\nlet smartlookConfiguration = Smartlook.Configuration.configuration(key: \"YOUR_SMARTLOOK_API_KEY\")\nsmartlookConfiguration.enableIntegrations = [ Smartlook.HeapIntegration(integrationWith: Heap.self) ]\\n\nSmartlook.setupAndStartRecording(configuration: smartlookConfiguration)\n`,\n        'objective-c': `\n[Heap initialize:@\"YOUR_HEAP_API_KEY\"];\\n\nSLSetupConfiguration *configuration = [SLSetupConfiguration configurationWithKey:@\"YOUR_SMARTLOOK_API_KEY\"];\nconfiguration.enableIntegrations = @[ [SLHeapIntegration alloc] initIntegrationWith:[Heap class]] ];\\n\n[Smartlook setupAndStartRecordingWithConfiguration:configuration];\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"important\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\n\\`enableIntegration\\` integration must be called after Heap is initialized.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios\" mdxType=\"TextBlock\">{`\nA Smartlook visitor URL will be added as a new property called the \\`Smartlook visitor dashboard URL\\` into a Heap user.\n`}</TextBlock>\n    <img visibleOn=\"android\" src={auto_integration_heap} />\n    <h2 {...{\n      \"id\": \"manual-integration\"\n    }}>{`Manual integration`}</h2>\n    <TextBlock kind=\"important\" visibleOn=\"xamarin\" mdxType=\"TextBlock\">{`\nThere seems to be [no official Xamarin integration of Heap](https://help.heap.io/getting-started/getting-started-faqs/does-heap-support-xamarin/). In the case of custom integration, this <Link to=\"/api_reference/#integrations\">API Reference documentation</Link> applies.\n`}</TextBlock>\n    <TextBlock invisibleOn=\"ios,xamarin\" mdxType=\"TextBlock\">\nSmartlook can be easily integrated into Heap using `IntegrationListener`:\n    </TextBlock>\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">\nSmartlook can be easily integrated into Heap using `Notifications`:\n    </TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\nSmartlook.registerIntegrationListener(new IntegrationListener() {\n    @Override\n    public void onSessionReady(@NotNull String dashboardSessionUrl) {\n        Map<String, String> props = new HashMap<>();\n        props.put(\"Session url\", dashboardSessionUrl);\\n\n        Heap.track(\"Smartlook session URL\", props);\n    }\\n\n    @Override\n    public void onVisitorReady(@NotNull String dashboardVisitorUrl) {\n        Map<String, String> props = new HashMap<>();\n        props.put(\"Smartlook visitor URL\", dashboardVisitorUrl);\\n\n        Heap.addUserProperties(props);\n    }\n});\n      `,\n        kotlin: `\nSmartlook.registerIntegrationListener(object : IntegrationListener {\n    override fun onSessionReady(dashboardSessionUrl: String) {\n        val props = HashMap<String, String>();\n        props.put(\"Session url\", dashboardSessionUrl)\\n\n        Heap.track(\"Smartlook session URL\", props)\n    }\\n\n    override fun onVisitorReady(dashboardVisitorUrl: String) {\n        val props = new HashMap<String,String>()\n        props.put(\"Smartlook visitor URL\", dashboardVisitorUrl)\\n\n        Heap.addUserProperties(props)\n    }\n})\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.registerIntegrationListener(new IntegrationListener() {\n    @Override\n    public void onSessionReady(@NotNull String dashboardSessionUrl) {\n        Map<String, String> props = new HashMap<>();\n        props.put(\"Session url\", dashboardSessionUrl);\\n\n        Heap.track(\"Smartlook session URL\", props);\n    }\\n\n    @Override\n    public void onVisitorReady(@NotNull String dashboardVisitorUrl) {\n        Map<String, String> props = new HashMap<>();\n        props.put(\"Smartlook visitor URL\", dashboardVisitorUrl);\\n\n        Heap.addUserProperties(props);\n    }\n});\n      `,\n        kotlin: `\nSmartlook.registerIntegrationListener(object : IntegrationListener {\n    override fun onSessionReady(dashboardSessionUrl: String) {\n        val props = HashMap<String, String>();\n        props.put(\"Session url\", dashboardSessionUrl)\\n\n        Heap.track(\"Smartlook session URL\", props)\n    }\\n\n    override fun onVisitorReady(dashboardVisitorUrl: String) {\n        val props = new HashMap<String,String>()\n        props.put(\"Smartlook visitor URL\", dashboardVisitorUrl)\\n\n        Heap.addUserProperties(props)\n    }\n})\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.registerIntegrationListener({\n  onSessionReady: function (dashboardSessionUrl) {\n    heap.track(\n        \"Smartlook session URL\",\n        {\"session_url\": dashboardSessionUrl});\n  },\n  onVisitorReady: function (dashboardVisitorUrl) {\n    heap.addUserProperties({'smartlook_visitor_url': dashboardVisitorUrl});\n  }\n});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.registerIntegrationListener(new SmartlookIntegrationListener(\n  function (dashboardSessionUrl) {\n    heap.track(\n        \"Smartlook session URL\",\n        {\"session_url\": dashboardSessionUrl})\n  },\n  function (dashboardVisitorUrl) {\n    heap.addUserProperties({'smartlook_visitor_url': dashboardVisitorUrl})\n  }\n));\n      `\n      },\n      ios: {\n        swift: `\nNotificationCenter.default.addObserver(forName: Smartlook.dashboardSessionURLChanged, object: nil, queue: nil) { (note) in\n    if let currentSessionUrl = Smartlook.getDashboardSessionURL(withCurrentTimestamp: false) {\n        Heap.track(\"Smartlook session URL\", withProperties: [ \"session_url\" : currentSessionUrl.absoluteString ])\n    }\n};\\n\nNotificationCenter.default.addObserver(forName: Smartlook.dashboardVisitorURLChanged, object: nil, queue: nil) { (note) in\n    if let currentVisitorUrl = Smartlook.getDashboardVisitorURL() {\n        Heap.addUserProperties([ \"smartlook_visitor_url\" : currentVisitorUrl.absoluteString ])\n    }\n};\n      `,\n        'objective-c': `\n[[NSNotificationCenter defaultCenter] addObserverForName:SLDashboardSessionURLChangedNotification object:nil queue:nil usingBlock:^(NSNotification * _Nonnull note) {\n    NSURL *currentSessionURL = [Smartlook getDashboardSessionURLWithCurrentTimestamp:NO];\n    if (currentSessionURL != nil) {\n        [Heap track:@\"Smartlook session URL\" withProperties:@{ @\"session_url\" : currentSessionURL.absoluteString}];\n    }\n}];\\n\n[[NSNotificationCenter defaultCenter] addObserverForName:SLDashboardVisitorURLChangedNotification object:nil queue:nil usingBlock:^(NSNotification * _Nonnull note) {\n    NSURL *currentVisitorURL = [Smartlook getDashboardVisitorURL];\n    if (currentVisitorURL != nil) {\n        [Heap addUserProperties:@{ @\"smartlook_visitor_url\" : currentVisitorURL.absoluteString}];\n    }\n}];\n      `\n      },\n      flutter: {\n        dart: `\nclass CustomIntegrationListener implements IntegrationListener {\n  void onSessionReady(String dashboardSessionUrl) {\n      heap.track(\n      identity: _identity,\n      event: 'dashboardSessionUrl',\n      properties: {\n        'dashboardSessionUrl': dashboardSessionUrl\n      },\n    );\n  }\n\\n\n  void onVisitorReady(String dashboardVisitorUrl) {\n    heap.userProperties(\n      identity: _identity,\n      properties: {\n        'dashboardVisitorUrl': dashboardVisitorUrl\n      },\n    );\n  }\n}\n\\n\nSmartlook.registerIntegrationListener(new CustomIntegrationListener());\n      `\n      },\n      unity: {\n        csharp: `\npublic class IntegrationListener : SmartlookUnity.IntegrationListener\n{\n    public override void onSessionReady(string dashboardSessionUrl)\n    {\n        //Not available yet\n    }\n\\n\n    public override void onVisitorReady(string dashboardVisitorUrl)\n    {\n        //Not available yet\n    }\n}\n\\n\nSmartlookUnity.Smartlook.RegisterIntegrationListener(new IntegrationListener());\n`\n      },\n      react: {\n        javascript: `\nSmartlook.registerIntegrationListener({\n  onSessionReady: function (dashboardSessionUrl) {\n    heap.track(\n        \"Smartlook session URL\",\n        {\"session_url\": dashboardSessionUrl});\n);\n  },\n  onVisitorReady: function (dashboardVisitorUrl) {\n    heap.addUserProperties({'smartlook_visitor_url': dashboardVisitorUrl});\n  }\n});\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" mdxType=\"TextBlock\">{`\nFull Heap API documentation can be found on the [official website](https://developers.heap.io/reference).\n`}</TextBlock>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}