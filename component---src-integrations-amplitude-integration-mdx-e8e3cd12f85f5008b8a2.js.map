{"version":3,"sources":["webpack:///../src/integrations/amplitude-integration.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","visibleOn","kind","snippets","android","java","kotlin","ios","swift","src","auto_integration_amplitude","invisibleOn","cocos","cordova","javascript","ionic","typescript","flutter","dart","unity","csharp","react","isMDXComponent"],"mappings":"yRAQaA,G,UAAe,S,4NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAK5E,YAAC,IAAD,CAAOA,QAAQ,SAAf,yBACA,YAAC,IAAD,CAAWC,UAAU,cAAcD,QAAQ,aAA3C,iGAIA,YAAC,IAAD,CAAWE,KAAK,UAAUC,SAAU,CAClCC,QAAS,CACPC,KAAM,0LAKNC,OAAQ,yKAMVC,IAAK,CACHC,MAAO,kXAMP,mYAODR,QAAQ,cACX,YAAC,IAAD,CAAWC,UAAU,cAAcD,QAAQ,aAA3C,6HAGA,mBAAKC,UAAU,cAAcQ,IAAKC,MAClC,iBAAQ,CACN,GAAM,sBADR,sBAGA,YAAC,IAAD,CAAWR,KAAK,YAAYD,UAAU,UAAUD,QAAQ,aAAxD,kMAGA,YAAC,IAAD,CAAWW,YAAY,cAAcX,QAAQ,aAA7C,kFAGA,YAAC,IAAD,CAAWC,UAAU,MAAMD,QAAQ,aAAnC,4EAGA,YAAC,IAAD,CAAWE,KAAK,UAAUC,SAAU,CAClCC,QAAS,CACPC,KAAM,gtBAmBNC,OAAQ,kpBAkBVM,MAAO,CACLP,KAAM,gtBAmBNC,OAAQ,kpBAkBVO,QAAS,CACPC,WAAY,iaAcdC,MAAO,CACLC,WAAY,8ZAcdT,IAAK,CACHC,MAAO,guBAaP,g3BAgBFS,QAAS,CACPC,KAAM,uhBAkBRC,MAAO,CACLC,OAAQ,6vBAuBVC,MAAO,CACLP,WAAY,gaAebd,QAAQ,cACX,YAAC,IAAD,CAAWE,KAAK,OAAOD,UAAU,UAAUD,QAAQ,aAAnD,yIAGA,YAAC,IAAD,CAAWE,KAAK,OAAOD,UAAU,QAAQD,QAAQ,aAAjD,uIAGA,YAAC,IAAD,CAAWE,KAAK,OAAOD,UAAU,MAAMD,QAAQ,aAA/C,qIAGA,YAAC,IAAD,CAAWE,KAAK,OAAOD,UAAU,QAAQD,QAAQ,aAAjD,yIAGA,YAAC,IAAD,CAAWE,KAAK,OAAOD,UAAU,QAAQD,QAAQ,aAAjD,oJAGA,YAAC,IAAD,CAAWE,KAAK,OAAOD,UAAU,UAAUD,QAAQ,aAAnD,+IAGA,YAAC,IAAD,CAAWE,KAAK,OAAOD,UAAU,gBAAgBD,QAAQ,aAAzD,kJ,0NAOJH,EAAWyB,gBAAiB","file":"component---src-integrations-amplitude-integration-mdx-e8e3cd12f85f5008b8a2.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/smartlook.github.io/smartlook.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { CodeBlock, TextBlock, Title } from \"components\";\nimport auto_integration_amplitude from 'assets/auto_integration_amplitude.png';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <Title mdxType=\"Title\">Amplitude integration</Title>\n    <TextBlock visibleOn=\"android,ios\" mdxType=\"TextBlock\">{`\n## Automatic integration\nSmartlook can be automatically integrated into Amplitude using:\n`}</TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\nAmplitudeClient amplitudeInstance = Amplitude.getInstance().initialize(this, \"YOUR_API_KEY\");\n...\nSmartlook.enableIntegration(new AmplitudeIntegration(amplitudeInstance));\n      `,\n        kotlin: `\nval amplitudeInstance = Amplitude.getInstance().initialize(this, \"YOUR_API_KEY\")\n...\nSmartlook.enableIntegration(AmplitudeIntegration(amplitudeInstance))\n      `\n      },\n      ios: {\n        swift: `\nAmplitude.instance()?.initializeApiKey(\"YOUR_AMPLITUDE_API_KEY\")\\n\nlet smartlookConfiguration = Smartlook.Configuration.configuration(key: \"YOUR_SMARTLOOK_API_KEY\")\nsmartlookConfiguration.enableIntegrations = [ Smartlook.AmplitudeIntegration(integrationWith: Amplitude.instance()) ]\\n    \nSmartlook.setupAndStartRecording(configuration: smartlookConfiguration)\n`,\n        'objective-c': `\n[[Amplitude instance] initializeApiKey:@\"YOUR_AMPLITUDE_API_KEY\"];\\n\nSLSetupConfiguration *configuration = [SLSetupConfiguration configurationWithKey:@\"YOUR_SMARTLOOK_API_KEY\"];\nconfiguration.enableIntegrations = @[ [[SLAmplitudeIntegration alloc] initIntegrationWith:[Amplitude instance]] ];\\n\n[Smartlook setupAndStartRecordingWithConfiguration:configuration];\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"android,ios\" mdxType=\"TextBlock\">{`\nSmartlook visitor URL will be added as a new property called \\`Smartlook visitor dashboard URL\\` into a Amplitude user.\n`}</TextBlock>\n    <img visibleOn=\"android,ios\" src={auto_integration_amplitude} />\n    <h2 {...{\n      \"id\": \"manual-integration\"\n    }}>{`Manual integration`}</h2>\n    <TextBlock kind=\"important\" visibleOn=\"xamarin\" mdxType=\"TextBlock\">{`\nThere seems to be no official Xamarin integration of Aplitude. In the case of custom integration, this <Link to=\"/api_reference/#integrations\">API Reference documentation</Link> applies.\n`}</TextBlock>\n    <TextBlock invisibleOn=\"ios,xamarin\" mdxType=\"TextBlock\">\nSmartlook can be easily integrated into Amplitude using `IntegrationListener`:\n    </TextBlock>\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">\nSmartlook can be easily integrated into Amplitude using `Notifications`:\n    </TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\nSmartlook.registerIntegrationListener(new IntegrationListener() {\n    @Override\n    public void onSessionReady(@NotNull String dashboardSessionUrl) {\n        JSONObject eventProperties = new JSONObject();\n        try {\n            eventProperties.put(\"Session url\", dashboardSessionUrl);\n        } catch (JSONException exception) {\n        }\n        Amplitude.getInstance().logEvent(\"Smartlook session URL\", eventProperties);\n    }\\n\n    @Override\n    public void onVisitorReady(@NotNull String dashboardVisitorUrl) {\n        Identify identify = new Indetify();\n        identify.set(\"Smartlook visitor URL\", dashboardVisitorUrl);\n        Amplitude.getInstance().identify(identify);\n    }\n});\n      `,\n        kotlin: `\nSmartlook.registerIntegrationListener(object : IntegrationListener {\n    override fun onSessionReady(dashboardSessionUrl: String) {\n        val eventProperties = JSONObject()\n        try {\n            eventProperties.put(\"Session url\", dashboardSessionUrl)\n        } catch (JSONException exception) {\n        }\n        Amplitude.getInstance().logEvent(\"Smartlook session URL\", eventProperties)\n    }\\n\n    override fun onVisitorReady(dashboardVisitorUrl: String) {\n        Identify identify = Indetify()\n        identify.set(\"Smartlook visitor URL\", dashboardVisitorUrl)\n        Amplitude.getInstance().identify(identify)\n    }\n})\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.registerIntegrationListener(new IntegrationListener() {\n    @Override\n    public void onSessionReady(@NotNull String dashboardSessionUrl) {\n        JSONObject eventProperties = new JSONObject();\n        try {\n            eventProperties.put(\"Session url\", dashboardSessionUrl);\n        } catch (JSONException exception) {\n        }\n        Amplitude.getInstance().logEvent(\"Smartlook session URL\", eventProperties);\n    }\\n\n    @Override\n    public void onVisitorReady(@NotNull String dashboardVisitorUrl) {\n        Identify identify = new Indetify();\n        identify.set(\"Smartlook visitor URL\", dashboardVisitorUrl);\n        Amplitude.getInstance().identify(identify);\n    }\n});\n      `,\n        kotlin: `\nSmartlook.registerIntegrationListener(object : IntegrationListener {\n    override fun onSessionReady(dashboardSessionUrl: String) {\n        val eventProperties = JSONObject()\n        try {\n            eventProperties.put(\"Session url\", dashboardSessionUrl)\n        } catch (JSONException exception) {\n        }\n        Amplitude.getInstance().logEvent(\"Smartlook session URL\", eventProperties)\n    }\\n\n    override fun onVisitorReady(dashboardVisitorUrl: String) {\n        Identify identify = Indetify()\n        identify.set(\"Smartlook visitor URL\", dashboardVisitorUrl)\n        Amplitude.getInstance().identify(identify)\n    }\n})\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.registerIntegrationListener({\n  onSessionReady: function (dashboardSessionUrl) {\n    amplitudeClient.logEvent(\n        \"Smartlook session URL\",\n        {\"session_url\": dashboardSessionUrl});\n  },\n  onVisitorReady: function (dashboardVisitorUrl) {\n    var identify = new amplitude.Identify().set(\"smartlook_visitor_url\", dashboardVisitorUrl);\n    amplitude.identify(identify);\n  }\n});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.registerIntegrationListener(new SmartlookIntegrationListener(\n  function (dashboardSessionUrl) {\n    amplitudeClient.logEvent(\n        \"Smartlook session URL\",\n        {\"session_url\": dashboardSessionUrl})\n  },\n  function (dashboardVisitorUrl) {\n    var identify = new amplitude.Identify().set(\"smartlook_visitor_url\", dashboardVisitorUrl)\n    amplitude.identify(identify)\n  }\n));\n      `\n      },\n      ios: {\n        swift: `\nNotificationCenter.default.addObserver(forName: Smartlook.dashboardSessionURLChanged, object: nil, queue: nil) { (note) in\n  if let currentSessionUrl = Smartlook.getDashboardSessionURL(withCurrentTimestamp: false) {\n    Amplitude.instance()?.logEvent(\"Smartlook session URL\", withEventProperties: [ \"session_url\" : currentSessionUrl]);\n  }\n};\\n\nNotificationCenter.default.addObserver(forName: Smartlook.dashboardVisitorURLChanged, object: nil, queue: nil) { (note) in\n  if let currentVisitorUrlString = Smartlook.getDashboardVisitorURL()?.absoluteString {\n    let identify = AMPIdentify().add(\"smartlook_visitor_url\", value: currentVisitorUrlString as NSString)\n    Amplitude.instance()?.identify(identify)\n  }\n};\n      `,\n        'objective-c': `\n[[NSNotificationCenter defaultCenter] addObserverForName:SLDashboardSessionURLChangedNotification object:nil queue:nil usingBlock:^(NSNotification * _Nonnull note) {\n  NSURL *currentSessionURL = [Smartlook getDashboardSessionURLWithCurrentTimestamp:NO];\n  if (currentSessionURL != nil) {\n      [[Amplitude instance] logEvent:@\"Smartlook session URL\" withEventProperties:@{ @\"session_url\" : currentSessionURL}];\n  }\n}];\\n\n[[NSNotificationCenter defaultCenter] addObserverForName:SLDashboardVisitorURLChangedNotification object:nil queue:nil usingBlock:^(NSNotification * _Nonnull note) {\n  NSURL *currentVisitorURL = [Smartlook getDashboardVisitorURL];\n  if (currentVisitorURL != nil) {\n    AMPIdentify *identify = [[AMPIdentify identify] add:@\"smartlook_visitor_url\" value:currentVisitorURL];\n    [[Amplitude instance] identify:identify];\n  }\n}];\n`\n      },\n      flutter: {\n        dart: `\nclass CustomIntegrationListener implements IntegrationListener {\n  void onSessionReady(String dashboardSessionUrl) {\n    analytics.logEvent('Smartlook session URL', eventProperties: {\n      'session_url': dashboardSessionUrl\n    });\n  }\n\\n\n  void onVisitorReady(String dashboardVisitorUrl) {\n    final Identify identify = Identify()\n      ..set('smartlook_visitor_url', dashboardVisitorUrl)\\n\n    analytics.identify(identify);\n  }\n}\n\\n\nSmartlook.registerIntegrationListener(new CustomIntegrationListener());\n      `\n      },\n      unity: {\n        csharp: `\npublic class IntegrationListener : SmartlookUnity.IntegrationListener\n{\n    public override void onSessionReady(string dashboardSessionUrl)\n    {\n      Dictionary<string, object> options = new Dictionary<string, object>() {\n        {\"dashboardSessionUrl\" , dashboardSessionUrl }\n      };\n      Amplitude.Instance.logEvent(\"Smartlook session URL\", options);\n    }\n\\n\n    public override void onVisitorReady(string dashboardVisitorUrl)\n    {\n      Dictionary<string, object> userProperties = new Dictionary<string, object>() {\n        {\"dashboardVisitorUrl\", dashboardVisitorUrl}\n      };\n      Amplitude.Instance.setUserProperties(userProperties);\n    }\n}\n\\n\nSmartlookUnity.Smartlook.RegisterIntegrationListener(new IntegrationListener());\n`\n      },\n      react: {\n        javascript: `\nSmartlook.registerIntegrationListener({\n  onSessionReady: function (dashboardSessionUrl) {\n    amplitude.logEvent(\n        \"Smartlook session URL\",\n        {\"session_url\": dashboardSessionUrl});\n);\n  },\n  onVisitorReady: function (dashboardVisitorUrl) {\n    var identify = new amplitude.Identify().set(\"smartlook_visitor_url\", dashboardVisitorUrl);\n    amplitude.identify(identify);\n  }\n});\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\nFull Amplitude documentation with examples can be found on the [official website](https://developers.amplitude.com/docs/android).\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"unity\" mdxType=\"TextBlock\">{`\nFull Amplitude documentation with examples can be found on the [official website](https://developers.amplitude.com/docs/unity).\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nFull Amplitude documentation with examples can be found on the [official website](https://developers.amplitude.com/docs/ios).\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"cocos\" mdxType=\"TextBlock\">{`\nFull Amplitude documentation with examples can be found on the [official website](https://developers.amplitude.com/docs/android).\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"react\" mdxType=\"TextBlock\">{`\nFull Amplitude documentation with examples can be found on the [official website](https://developers.amplitude.com/docs/react-native-setup).\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"flutter\" mdxType=\"TextBlock\">{`\nFull Amplitude documentation with examples can be found on the [official website](https://developers.amplitude.com/docs/flutter-setup).\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"cordova,ionic\" mdxType=\"TextBlock\">{`\nFull Amplitude documentation with examples can be found on the [official website](https://developers.amplitude.com/docs/javascript).\n`}</TextBlock>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}