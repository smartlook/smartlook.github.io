{"version":3,"sources":["webpack:///../src/integrations/mixpanel-integration.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","kind","visibleOn","invisibleOn","snippets","android","java","kotlin","cocos","cordova","javascript","ionic","typescript","ios","swift","flutter","dart","unity","csharp","react","isMDXComponent"],"mappings":"sQAOaA,G,UAAe,S,2NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,IAAD,CAAOA,QAAQ,SAAf,wBACA,iBAAQ,CACN,GAAM,sBADR,sBAGA,YAAC,IAAD,CAAWC,KAAK,YAAYC,UAAU,UAAUF,QAAQ,aAAxD,kMAGA,YAAC,IAAD,CAAWG,YAAY,cAAcH,QAAQ,aAA7C,iFAGA,YAAC,IAAD,CAAWE,UAAU,MAAMF,QAAQ,aAAnC,2EAGA,YAAC,IAAD,CAAWC,KAAK,UAAUG,SAAU,CAClCC,QAAS,CACPC,KAAM,wmBAiBNC,OAAQ,gjBAgBVC,MAAO,CACLF,KAAM,wmBAiBNC,OAAQ,gjBAgBVE,QAAS,CACPC,WAAY,mdAgBdC,MAAO,CACLC,WAAY,4cAedC,IAAK,CACHC,MAAO,ioBAYP,0yBAeFC,QAAS,CACPC,KAAM,sWAcRC,MAAO,CACLC,OAAQ,4rBAqBVC,MAAO,CACLT,WAAY,gZAebV,QAAQ,cACX,YAAC,IAAD,CAAWC,KAAK,OAAOC,UAAU,UAAUF,QAAQ,aAAnD,sIAGA,YAAC,IAAD,CAAWC,KAAK,OAAOC,UAAU,QAAQF,QAAQ,aAAjD,oIAGA,YAAC,IAAD,CAAWC,KAAK,OAAOC,UAAU,MAAMF,QAAQ,aAA/C,oIAGA,YAAC,IAAD,CAAWC,KAAK,OAAOC,UAAU,QAAQF,QAAQ,aAAjD,mIAGA,YAAC,IAAD,CAAWC,KAAK,OAAOC,UAAU,sBAAsBF,QAAQ,aAA/D,yIAGA,iBAAQ,CACN,GAAM,yBADR,yBAGA,0E,yNAKJH,EAAWuB,gBAAiB","file":"component---src-integrations-mixpanel-integration-mdx-67ea63b85a831b5b7f13.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/smartlook.github.io/smartlook.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { CodeBlock, TextBlock, Title } from \"components\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Title mdxType=\"Title\">Mixpanel integration</Title>\n    <h2 {...{\n      \"id\": \"manual-integration\"\n    }}>{`Manual integration`}</h2>\n    <TextBlock kind=\"important\" visibleOn=\"xamarin\" mdxType=\"TextBlock\">{`\nThere seems to be no official Xamarin integration of Mixpanel. In the case of custom integration, this <Link to=\"/api_reference/#integrations\">API Reference documentation</Link> applies.\n`}</TextBlock>\n    <TextBlock invisibleOn='ios,xamarin' mdxType=\"TextBlock\">\nSmartlook can be easily integrated into Mixpanel using `IntegrationListener`:\n    </TextBlock>\n    <TextBlock visibleOn='ios' mdxType=\"TextBlock\">\nSmartlook can be easily integrated into Mixpanel using `Notifications`:\n    </TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\nSmartlook.registerIntegrationListener(new IntegrationListener() {\n    @Override\n    public void onSessionReady(@NotNull String dashboardSessionUrl) {\n        JSONObject eventProperties = new JSONObject();\n        try {\n            eventProperties.put(\"Session url\", dashboardSessionUrl);\n        } catch (JSONException exception) {\n        }\n        mixpanel.track(\"Smartlook session URL\", eventProperties);\n    }\\n\n    @Override\n    public void onVisitorReady(@NotNull String dashboardVisitorUrl) {\n        mixpanel.getPeople().set(\"Smartlook visitor URL\", dashboardVisitorUrl);\n    }\n});\n      `,\n        kotlin: `\nSmartlook.registerIntegrationListener(object : IntegrationListener {\n    override fun onSessionReady(dashboardSessionUrl: String) {\n        val eventProperties = JSONObject()\n        try {\n            eventProperties.put(\"Session url\", dashboardSessionUrl)\n        } catch (JSONException exception) {\n        }\n        mixpanel.track(\"Smartlook session URL\", eventProperties)\n    }\\n\n    override fun onVisitorReady(dashboardVisitorUrl: String) {\n        mixpanel.getPeople().set(\"Smartlook visitor URL\", dashboardVisitorUrl)\n    }\n})\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.registerIntegrationListener(new IntegrationListener() {\n    @Override\n    public void onSessionReady(@NotNull String dashboardSessionUrl) {\n        JSONObject eventProperties = new JSONObject();\n        try {\n            eventProperties.put(\"Session url\", dashboardSessionUrl);\n        } catch (JSONException exception) {\n        }\n        mixpanel.track(\"Smartlook session URL\", eventProperties);\n    }\\n\n    @Override\n    public void onVisitorReady(@NotNull String dashboardVisitorUrl) {\n        mixpanel.getPeople().set(\"Smartlook visitor URL\", dashboardVisitorUrl);\n    }\n});\n      `,\n        kotlin: `\nSmartlook.registerIntegrationListener(object : IntegrationListener {\n    override fun onSessionReady(dashboardSessionUrl: String) {\n        val eventProperties = JSONObject()\n        try {\n            eventProperties.put(\"Session url\", dashboardSessionUrl)\n        } catch (JSONException exception) {\n        }\n        mixpanel.track(\"Smartlook session URL\", eventProperties)\n    }\\n\n    override fun onVisitorReady(dashboardVisitorUrl: String) {\n        mixpanel.getPeople().set(\"Smartlook visitor URL\", dashboardVisitorUrl)\n    }\n})\n      `\n      },\n      cordova: {\n        javascript: `\nSmartlook.registerIntegrationListener({\n  onSessionReady: function (dashboardSessionUrl) {\n    mixpanel.track(\n    \"Smartlook session URL\",\n    {\"session_url\": dashboardSessionUrl});\n);\n  },\n  onVisitorReady: function (dashboardVisitorUrl) {\n    mixpanel.people.set({ \"smartlook_visitor_url\": dashboardVisitorUrl });\\n\n    // identify must be called along with every instance of people.set\n    mixpanel.identify(\"sample_identifier\");\n  }\n});\n      `\n      },\n      ionic: {\n        typescript: `\nsmartlook.registerIntegrationListener(new SmartlookIntegrationListener(\n  function (dashboardSessionUrl) {\n    mixpanel.track(\n    \"Smartlook session URL\",\n    {\"session_url\": dashboardSessionUrl})\n  },\n  function (dashboardVisitorUrl) {\n    mixpanel.people.set({ \"smartlook_visitor_url\": dashboardVisitorUrl })\\n\n    // identify must be called along with every instance of people.set\n    mixpanel.identify(\"sample_identifier\")\n  }\n));\n      `\n      },\n      ios: {\n        swift: `\nNotificationCenter.default.addObserver(forName: Smartlook.dashboardSessionURLChanged, object: nil, queue: nil) { (note) in\n    if let currentSessionUrl = Smartlook.getDashboardSessionURL(withCurrentTimestamp: false) {\n        mixpanel?.track(event: \"Smartlook session URL\", properties: [ \"session_url\" : currentSessionUrl])\n    }\n};\nNotificationCenter.default.addObserver(forName: Smartlook.dashboardVisitorURLChanged, object: nil, queue: nil) { (note) in\n    if let currentVisitorUrl = Smartlook.getDashboardVisitorURL() {\n        mixpanel?.people.set(property: \"smartlook_visitor_url\", to: currentVisitorUrl)\n    }\n};\n      `,\n        'objective-c': `\n[[NSNotificationCenter defaultCenter] addObserverForName:SLDashboardSessionURLChangedNotification object:nil queue:nil usingBlock:^(NSNotification * _Nonnull note) {\n    NSURL *currentSessionURL = [Smartlook getDashboardSessionURLWithCurrentTimestamp:NO];\n    if (currentSessionURL != nil) {\n      [mixpanel track:@\"Smartlook session URL\" properties:@{ @\"session_url\" : currentSessionURL}];\n    }\n}];\\n\n[[NSNotificationCenter defaultCenter] addObserverForName:SLDashboardVisitorURLChangedNotification object:nil queue:nil usingBlock:^(NSNotification * _Nonnull note) {\n    NSURL *currentVisitorURL = [Smartlook getDashboardVisitorURL];\n    if (currentVisitorURL != nil) {\n      [mixpanel.people set:@\"smartlook_visitor_url\" to:currentVisitorURL.absoluteString];\n    }\n}];\n      `\n      },\n      flutter: {\n        dart: `\nclass CustomIntegrationListener implements IntegrationListener {\n  void onSessionReady(String dashboardSessionUrl) {\n    //Only 3rd party plugins available\n  }\n\\n\n  void onVisitorReady(String dashboardVisitorUrl) {\n    //Only 3rd party plugins available\n  }\n}\n\\n\nSmartlook.registerIntegrationListener(new CustomIntegrationListener());\n      `\n      },\n      unity: {\n        csharp: `\npublic class IntegrationListener : SmartlookUnity.IntegrationListener\n{\n    public override void onSessionReady(string dashboardSessionUrl)\n    {\n        var props = new Value();\n        props[\"Session url\"] = dashboardSessionUrl;\\n\n        Mixpanel.Track(\"Smartlook session URL\", props);\n    }\n\\n\n    public override void onVisitorReady(string dashboardVisitorUrl)\n    {\n        // mixpanel identify: must be called before user profile properties can be set\n        Mixpanel.Identify(\"sample_identifier\");\\n\n        Mixpanel.People.Set(\"Smartlook visitor URL\", dashboardVisitorUrl);\n    }\n}\n\\n\nSmartlookUnity.Smartlook.RegisterIntegrationListener(new IntegrationListener());\n`\n      },\n      react: {\n        javascript: `\nSmartlook.registerIntegrationListener(\n    (visitor) => {\n        mixpanel.people.set({ \"smartlook_visitor_url\": visitor });\\n\n        // identify must be called along with every instance of people.set\n        mixpanel.identify(\"sample_identifier\");\n    },\n    (dash) => {\n        mixpanel.track(\n            \"Smartlook session URL\",\n            {\"session_url\": dash});\n    }\n  );\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" visibleOn=\"android\" mdxType=\"TextBlock\">{`\nFull mixpanel documentation with examples can be found on the [official website](https://developer.mixpanel.com/docs/android).\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"unity\" mdxType=\"TextBlock\">{`\nFull mixpanel documentation with examples can be found on the [official website](https://developer.mixpanel.com/docs/unity).\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nFull mixpanel documentation with examples can be found on the [official website](https://developer.mixpanel.com/docs/swift).\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"cocos\" mdxType=\"TextBlock\">{`\nFull mixpanel documentation with examples can be found on the [official website](https://developer.mixpanel.com/docs/java).\n`}</TextBlock>\n    <TextBlock kind=\"note\" visibleOn=\"cordova,ionic,react\" mdxType=\"TextBlock\">{`\nFull mixpanel documentation with examples can be found on the [official website](https://developer.mixpanel.com/docs/javascript).\n`}</TextBlock>\n    <h2 {...{\n      \"id\": \"automatic-integration\"\n    }}>{`Automatic integration`}</h2>\n    <p>{`Automatic Mixpanel integration coming soon.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}