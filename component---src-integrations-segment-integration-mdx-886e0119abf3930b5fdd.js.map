{"version":3,"sources":["webpack:///../src/integrations/segment-integration.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","kind","visibleOn","snippets","android","java","kotlin","ios","swift","parentName","isMDXComponent"],"mappings":"oQAOaA,G,UAAe,S,0NAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,IAAD,CAAOA,QAAQ,SAAf,uBACA,YAAC,IAAD,CAAWC,KAAK,YAAYD,QAAQ,aAApC,4VAKA,YAAC,IAAD,CAAWE,UAAU,cAAcF,QAAQ,aAA3C,kHAIA,YAAC,IAAD,CAAWC,KAAK,UAAUE,SAAU,CAClCC,QAAS,CACPC,KAAM,oaAWNC,OAAQ,wZAYVC,IAAK,CACHC,MAAO,yiBAYP,8rBAcDR,QAAQ,cACX,YAAC,IAAD,CAAWE,UAAU,MAAMF,QAAQ,aAAnC,oOAGA,YAAC,IAAD,CAAWE,UAAU,UAAUF,QAAQ,aAAvC,0NAGA,YAAC,IAAD,CAAWE,UAAU,MAAMF,QAAQ,aAAnC,6vFAWA,YAAC,IAAD,CAAWE,UAAU,UAAUF,QAAQ,aAAvC,k6EAUA,YAAC,IAAD,CAAWC,KAAK,UAAUE,SAAU,CAClCC,QAAS,CACPC,KAAM,0QAMNC,OAAQ,yMAOTN,QAAQ,cACX,iBAAQ,CACN,GAAM,sBADR,sBAGA,wKACA,4FAA2E,6BAAGS,WAAW,KAAQ,CAC7F,KAAQ,0DAD+D,oBAA3E,KAGA,YAAC,IAAD,CAAMR,KAAK,UAAUE,SAAU,CAC7BE,KAAM,k7BA8BNC,OAAQ,k3BA4BRE,MAAO,wkBAkBP,4qBAgBCR,QAAQ,e,wNAKfH,EAAWa,gBAAiB","file":"component---src-integrations-segment-integration-mdx-886e0119abf3930b5fdd.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/smartlook.github.io/smartlook.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { CodeBlock, TextBlock, Title, Code } from \"components\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Title mdxType=\"Title\">Segment integration</Title>\n    <TextBlock kind=\"important\" mdxType=\"TextBlock\">{`\nThe standard Segment integration is not available at this time. It is technically ready, but our integration is pending approval from Segment.\\n\nThis means that the standard integration method isnâ€™t possible.\\n\nHowever, you can use our custom automated Smartlook to Segment integration, or the recipes below to write your own integration.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android,ios\" mdxType=\"TextBlock\">{`\n## Automatic integration\nSmartlook can be automatically integrated into Segment as its source middleware:\n`}</TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\n// setup Smartlook\nSmartlook.setupAndStartRecording(SMARTLOOK_API_KEY);\\n\n// initialize Segment analytics with Smartlook Middleware\nAnalytics analytics = new Analytics.Builder(this, SEGMENT_API_KEY)\n        .trackApplicationLifecycleEvents()\n        .recordScreenViews()\n        .useSourceMiddleware(Smartlook.createSegmentMiddleware())\n        .build();\\n\nAnalytics.setSingletonInstance(analytics);\n      `,\n        kotlin: `\n// setup Smartlook\nSmartlook.setupAndStartRecording(SMARTLOOK_API_KEY);\\n\n// initialize Segment analytics with Smartlook Middlewar\nval analytics = Analytics.Builder(this, SEGMENT_API_KEY)\n        .trackApplicationLifecycleEvents()\n        .recordScreenViews()\n        .useSourceMiddleware(Smartlook.createSegmentMiddleware())\n        .build()\\n\nAnalytics.setSingletonInstance(analytics)\n      `\n      },\n      ios: {\n        swift: `\n// initialize Smartlook\nlet smartlookConfiguration = Smartlook.Configuration.configuration(key: SMARTLOOK_API_KEY)\nSmartlook.setupAndStartRecording(configuration: smartlookConfiguration)\\n\n// initialize Segment\nlet segmentConfiguration = SEGAnalyticsConfiguration(writeKey: SEGMENT_API_KEY)\n...\nif let smartlookMiddleware = Smartlook.segmentSourceMiddleware(options: .default, segResetEventType: SEGEventType.reset.rawValue) {\n  segmentConfiguration.middlewares = [smartlookMiddleware]\n}\\n \nSEGAnalytics.setup(with: segmentConfiguration)\n`,\n        'objective-c': `\n// initialize Smartlook\nSLSetupConfiguration *configuration = [SLSetupConfiguration configurationWithKey:SMARTLOOK_API_KEY];\n[Smartlook setupAndStartRecordingWithConfiguration:configuration];\\n\n// initialize Segment\nSEGAnalyticsConfiguration *segmentConfiguration = [SEGAnalyticsConfiguration configurationWithWriteKey:SEGMENT_API_KEY];\n...    \nSEGBlockMiddleware *smartlookMiddleware = [Smartlook segmentSourceMiddlewareWithOptions:SLSegmentMiddlewareOptionDefault whereSEGResetEventTypeIs:SEGEventTypeReset];\nif (smartlookMiddleware != nil) {\n  segmentConfiguration.middlewares = @[smartlookMiddleware];\n}\\n\n[SEGAnalytics setupWithConfiguration:segmentConfiguration];\n`\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">{`\nSmartlook Middleware integration translates Segment's \\`track\\`, \\`screen\\`, \\`identify\\`, \\`alias\\`, and \\`reset\\` calls to the respective Smartlook method calls. The \\`options\\` argument can filter unnecessary or unwanted mapping.\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\nSmartlook Middleware integration translates Segment's \\`track\\`,  \\`screen\\` \\`identify\\` and \\`alias\\` calls to the respective Smartlook method calls. The \\`options\\` argument can filter unnecessary or unwanted mapping.\n`}</TextBlock>\n    <TextBlock visibleOn=\"ios\" mdxType=\"TextBlock\">{`\n| Option        | Segment Event Type        | Smartlook API Method(s)                                                  | Notes                                                                                                                                                                                            |\n|---------------|---------------------------|--------------------------------------------------------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n|\\`.track\\`     | \\`SEGEventTypeTrack\\`     | \\`trackCustomEvent(name:props:)\\`                                        | - - -                                                                                                                                                                                            |\n|\\`.screen\\`    | \\`SEGEventTypeScreen\\`    |\\`trackNavigationEvent(withControllerId:type:)\\`                          | This mapping is set **off** in the \\`.default\\` options combinations, as it interferes with Smartlook's Heatmaps generating. <br /> When enabled, the Smartlook's \\`type\\` is always \\`.enter\\`. |\n|\\`.identity\\`  | \\`SEGEventTypeIdentify\\`  |\\`setUserIdentifier(userIdentifier:); setSessionProperty(value:forName:)\\`| - - -                                                                                                                                                                                            |\n|\\`.alias\\`     | \\`SEGEventTypeAlias\\`     |\\`setUserIdentifier(userIdentifier:)\\`                                    | - - -                                                                                                                                                                                            |\n|\\`.reset\\`     | \\`SEGEventTypeReset\\`     |\\`resetSession(resetUser:)\\`                                              | \\`resetUser\\` attribute is always set to \\`true\\`.                                                                                                                                               |\n|\\`.all\\`       | - - -                     | - - -                                                                    | Sets all options (all call mappings) enabled.                                                                                                                                                    |\n|\\`.default\\`   | - - -                     | - - -                                                                    | Sets all options except for \\`.screen\\` to avoid Smartlook's Heatmaps mangling.                                                                                                                  |\n`}</TextBlock>\n    <TextBlock visibleOn=\"android\" mdxType=\"TextBlock\">{`\n| Option                   | Segment Event Type | Smartlook API Method(s)                                                   | Notes                                                                                                                                                                                                   |\n|--------------------------|--------------------|---------------------------------------------------------------------------|---------------------------------------------------------------------|\n|\\`ENABLE_CUSTOM_EVENTS\\`  | \\`track\\`          | \\`trackCustomEvent(name, props:)\\`                                        | - - -                                                                                                                                                                                                   |\n|\\`ENABLE_SCREEN_EVENTS\\`  | \\`screen\\`         | \\`trackNavigationEvent(name, ViewState.START)\\`                           | This mapping is **not enabled** in the \\`.default\\` option combination, as it interferes with Smartlook's Heatmaps generating. <br /> When enabled, the Smartlook's \\`ViewState\\` is always \\`.START\\`. |\n|\\`ENABLE_IDENTIFY\\`       | \\`identify\\`       | \\`setUserIdentifier(userIdentifier); setUserProperties(properties)\\`      | - - -                                                                                                                                                                                                   |\n|\\`ENABLE_ALIAS\\`          | \\`alias\\`          | \\`setUserIdentifier(userIdentifier)\\`                                     | This mapping is **not enabled** in the \\`.default\\` option combination, because Smartlook SDK doesn't have alias functionality. If enabled, alias is going to rewrite the previous user identifier.     |\n|\\`ENABLE_ALL\\`            | - - -              | - - -                                                                     | Sets all options (all call mappings) enabled.                                                                                                                                                           |\n|\\`ENABLE_DEFAULT\\`        | - - -              | - - -                                                                     | Sets all options except for \\`.screen\\` and \\`.alias\\` to avoid Smartlook's Heatmaps mangling and the identifier rewriting.                                                                             |\n`}</TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\nList<SegmentMiddlewareOption> options = new ArrayList<>();\noptions.add(SegmentMiddlewareOption.ENABLE_CUSTOM_EVENTS);\noptions.add(SegmentMiddlewareOption.ENABLE_IDENTIFY);\\n\nMiddleware smartlookMiddleware = Smartlook.createSegmentMiddleware(options);\n      `,\n        kotlin: `\nval options = listOf(\n  SegmentMiddlewareOption.ENABLE_CUSTOM_EVENTS,\n  SegmentMiddlewareOption.ENABLE_IDENTIFY)\\n\nval smartlookMiddleware = Smartlook.createSegmentMiddleware(options)\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <h2 {...{\n      \"id\": \"manual-integration\"\n    }}>{`Manual integration`}</h2>\n    <p>{`There are recipes for straightforward Segment integration in Android or iOS that could be an inspiration for other supported platforms as well.`}</p>\n    <p>{`Full Segment documentation for mobile platforms can be found on the `}<a parentName=\"p\" {...{\n        \"href\": \"https://segment.com/docs/connections/sources/catalog/\"\n      }}>{`official website`}</a>{`.`}</p>\n    <Code kind=\"example\" snippets={{\n      java: `\npublic Middleware createSegmentMiddleware() {\n    return chain -> processSegmentPayload(chain.payload());\n}\\n\nprivate void processSegmentPayload(BasePayload payload) {\n    switch (payload.type()) {\n        case BasePayload.Type.identify:\n            identify(payload);\n            break;\\n\n        // handle other event types ...\n    }\n}\\n\nprivate void identify(BasePayload payload) {\n    String userId = payload.userId();\n    if (userId != null) {\n        Smartlook.setUserIdentifier(userId);\n    }\\n\n    Map<Object, Object> traits = obtainMapFromPayload(payload, \"traits\");\n    if (traits != null) {\n        Smartlook.setUserProperties(new JSONObject(traits), false);\n    }\n}\\n\nprivate Map<Object, Object> obtainMapFromPayload(BasePayload payload, String key) {\n    Object traits = payload.get(key);\n    if (traits instanceof Map) {\n        return (Map<Object, Object>) traits;\n    }\\n\n    return null;\n}\n      `,\n      kotlin: `\n// Make sure to setup and start Smartlook SDK before crating Segment Middleware   \nfun createSegmentMiddleware() = Middleware { chain -> processSegmentPayload(chain.payload()) }\\n\nprivate fun processSegmentPayload(payload: BasePayload) {\n    when(payload.type()) {\n        BasePayload.Type.identify -> {\n            identify(payload)\n        }\n        // handle other event types ...\n    }\n}\\n\nprivate fun identify(payload: BasePayload) {\n    payload.userId()?.let { userIdentifier ->\n        Smartlook.setUserIdentifier(userIdentifier)\n    }\\n\n    payload.obtainMap(\"traits\")?.let { traits ->\n        Smartlook.setUserProperties(JSONObject(traits), false)\n    }\n}\\n\nprivate fun BasePayload.obtainMap(key: String): Map<*, *>? {\n    this[key]?.let { map ->\n        if (map is Map<*, *>) {\n            return map\n        }\n    }\n    return null\n}\n      `,\n      swift: `\nlet segmentConfiguration = SEGAnalyticsConfiguration(writeKey: SEGMENT_API_KEY)\\n    \nlet smartlookMiddleware = SEGBlockMiddleware(block: { (context, next) in\n  switch (context.eventType) {\n  case .track:\n    if let track = context.payload as? SEGTrackPayload {\n      var props = [String:String]()\n      // striglify payload props\n      Smartlook.trackCustomEvent(name: track.event, props: props)\n    }\n  default:\n    break\n  }\n  next(context)\n})\nsegmentConfiguration.middlewares = [smartlookMiddleware]\\n\nSEGAnalytics.setup(with: segmentConfiguration)\n          `,\n      'objective-c': `\nSEGAnalyticsConfiguration *segmentConfiguration = [SEGAnalyticsConfiguration configurationWithWriteKey:SEGMENT_API_KEY];\\n\nSEGBlockMiddleware *smartlookMiddleware = [[SEGBlockMiddleware alloc] initWithBlock:^(SEGContext * _Nonnull context, SEGMiddlewareNext  _Nonnull next) {\n  switch (context.eventType) {\n    SEGEventTypeTrack:\n    {\n      SEGTrackPayload *track = (SEGTrackPayload *)context.payload;\n      [Smartlook trackCustomEventWithName:track.event props:track.properties];\n    }\n    default: {}\n  }\n  next(context);\n}];\nsegmentConfiguration.middlewares = @[smartlookMiddleware];\\n\n[SEGAnalytics setupWithConfiguration:segmentConfiguration];\n`\n    }} mdxType=\"Code\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}