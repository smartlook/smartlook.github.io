(window.webpackJsonp=window.webpackJsonp||[]).push([[8],{"6HfM":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return c})),n.d(t,"default",(function(){return p}));var a=n("Fcif"),i=n("+I+c"),o=(n("mXGw"),n("/FXl")),r=n("TjRS"),s=n("+8zC"),c=(n("NRsk"),n("aD51"),{});void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/conceptual/event-tracking.mdx"}});var l={_frontmatter:c},d=r.a;function p(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(o.b)(d,Object(a.a)({},l,n,{components:t,mdxType:"MDXLayout"}),Object(o.b)(s.k,{mdxType:"Title"},"Event Tracking"),Object(o.b)("p",null,Object(o.b)("em",{parentName:"p"},"This section discusses what kinds of events are tracked by Smartlook, how they are made available in the dashboard, how they relate to user privacy, and how to control the level of tracked events.")),Object(o.b)("p",null,"Smartlook tracks two interconnected types of events. User interaction events, i.e., finger touches, gestures, UI element focus and such like, and analytics events, by which Smartlook understands button clicks, navigation between screens, and similar events that initialize an action in the application."),Object(o.b)(s.j,{kind:"note",mdxType:"TextBlock"},'\nMore info about how user navigation is tracked could be found in <Link to="/docs/sdk/conceptual/recording-navigation">Recording Navigation</Link>.\n'),Object(o.b)("p",null,"There are no known performance issues related to event tracking. Tracked events, however, especially those that are visualized during the session playback, can compromise sensitive user data."),Object(o.b)("h1",{id:"user-interaction-events"},"User Interaction Events"),Object(o.b)("p",null,"Smartlook tracks user interactions with the application UI, like taps and gestures, in order to visualise them during recording playback. These records are also the data for creating user interaction heatmaps."),Object(o.b)(s.j,{mdxType:"TextBlock"},'\nTo protect user privacy, user interaction with virtual keyboards (i.e., events in the area where the keyboard is on the screen) is not recorded. When the application uses a custom input view (e.g., a custom PIN-pad) that the system does not recognize as a system virtual keyboard (and thus Smartlook records interaction events in the area), using one of the event tracking modes to suppress user interaction tracking temporarily should be considered. An example is provided in the <Link to="cookbook/secure_custom_keyboard">Secure Custom Keyboard</Link> cookbook.\n'),Object(o.b)(s.j,{kind:"important",mdxType:"TextBlock"},'\nBlacklisting such a view is not enough, as user interaction is tracked on blacklisted views. Blacklisting and event tracking are controlled independently. The <Link to="/docs/sdk/conceptual/handling-sensitive-data#handling-sensitive-events">Handling Sensitive Events</Link> chapter offers more in-depth information on how to handle events that could reveal sensitive user information.\n'),Object(o.b)("h2",{id:"rage-clicks-events"},"Rage Clicks Events"),Object(o.b)("p",null,Object(o.b)("strong",{parentName:"p"},"Rage Clicks Event")," is a specific kind of event that flags screens in the app where a user repeatedly fast taps the screen. This behavior typically occurs when the user is frustrated with the UI, does not understand what the interactive elements of the UI are and what are just graphic artifacts. The rage click events can be reviewed along the other events in the player."),Object(o.b)(s.j,{kind:"note",mdxType:"TextBlock"},'\nIn some apps such as games, however, fast user interaction is expected. For these apps, or their sections, rage click events could be ignored by setting the `ignoreRageClickEvents` event tracking mode. More info about event tracking modes is in the <Link to="#event-tracking-modes">Event Tracking Modes</Link> section of this document.\n'),Object(o.b)("h1",{id:"analytics-events"},"Analytics Events"),Object(o.b)("p",null,"Besides direct tracking user interaction at the basic level of touches and gestures, Smartlook also tracks how these events are understood by the application code. These events track what UI elements have been tapped and how the application reacted to it. All these events are visible in the player timeline. If an analytic event is related to a UI element, the element is highlighted in the screen recording."),Object(o.b)("p",null,"Most importantly, these analytics events could be used with Smartlook analytics."),Object(o.b)("h1",{id:"tracking-custom-events"},"Tracking Custom Events"),Object(o.b)("p",null,"Smartlook aims to track the relevant events automatically. It is, however, not fully possible on all platforms.  Also, there are use-cases when the automated tracking might not provide enough information for the purposes of analytics. If this is the case in your application, Smartlook offers some handy methods for manual event tracking."),Object(o.b)("p",null,"The events created by these methods are treated by Smartlook exactly the same way as automatically acquired events of the corresponding type."),Object(o.b)("h2",{id:"custom-events"},"Custom events"),Object(o.b)(s.j,{mdxType:"TextBlock"},'\nCustom events are identified by a name, and can also have additional and optional properties. The additional properties can be used in funnels and any other filtering. Technical details can be found in <Link to="/docs/sdk/api-reference#custom-event">the API Reference</Link>.\n'),Object(o.b)(s.c,{kind:"example",snippets:{android:{java:'\nJSONObject props = new JSONObject();\n\ntry {\n    props.put("PROP_1", "value 1");\n} catch (JSONException e) {\n    e.printStackTrace();\n}\n\nSmartlook.trackCustomEvent("CUSTOM EVENT", props);\n      ',kotlin:'\nval props = JSONObject()\n\ntry {\n  props.put("PROP_1", "value 1")\n} catch (e: JSONException) {\n    e.printStackTrace()\n}\n\nSmartlook.trackCustomEvent("CUSTOM EVENT, props)"\n      '},ios:{swift:'\nSmartlook.trackCustomEvent(name: "CUSTOM EVENT", props: [ "PROP_1" : "value 1"])\n      ',"objective-c":'\n[Smartlook trackCustomEventWithName:@"CUSTOM EVENT" props:@{ @"PROP 1": @"record value" }];\n      '},react:{js:'\nSmartlook.trackCustomEvent("CUSTOM EVENT", { "PROP_1" : "value_1"});\n'},unity:{csharp:'\nSmartlookUnity.Smartlook.TrackCustomEvent("CustomEvent", JsonUtility.ToJson(player));\n'},unreal:{csharp:"\nUNREAL - C#\n      "},cocos:{java:'\nJSONObject props = new JSONObject();\n\ntry {\n    props.put("PROP_1", "value 1");\n} catch (JSONException e) {\n    e.printStackTrace();\n}\n\nSmartlook.trackCustomEvent("CUSTOM EVENT", props);\n      ',kotlin:'\nval props = JSONObject()\n\ntry {\n  props.put("PROP_1", "value 1")\n} catch (e: JSONException) {\n    e.printStackTrace()\n}\n\nSmartlook.trackCustomEvent("CUSTOM EVENT, props)"\n      '},cordova:{javascript:'\nSmartlook.trackCustomEvent({name: "CUSTOM EVENT", eventProperties: {PROP_1: "value 1"}})\n    '},ionic:{typescrit:'\nsmartlook.trackCustomEvent(new SmartlookCustomEvent("CUSTOM EVENT", eventProperties: {PROP_1: "value 1"});\n      '},flutter:{dart:'\nSmartlook.trackCustomEvent("CUSTOM EVENT", { "PROP_1" : "value1" });\n   '},xamarin:{csharp:'\nDictionary<string, string> eventProperties = new Dictionary<string, string>();\neventProperties["prop1"] = "value 1";\nSmartlook.Analytics.TrackCustomEvent("CUSTOM EVENT", eventProperties);      \n'}},mdxType:"CodeBlock"}),Object(o.b)("h2",{id:"timed-event"},"Timed event"),Object(o.b)(s.j,{mdxType:"TextBlock"},'\nFor use-cases where duration of some time-sensitive or long-running actions in the application is an important metric, Smartlook offers timed events. Nothing is tracked upon starting such an event, the application just remembers the event reference and uses it once the event is finished or cancelled. Technical details could be found in <Link to="/docs/sdk/api-reference#timed-event">the API Reference</Link>.\n'),Object(o.b)("h1",{id:"event-tracking-modes"},"Event Tracking Modes"),Object(o.b)("p",null,"All events described in this document are tracked by default. In some cases, it is desired to ignore some kinds of them, however. Such cases include the following:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("em",{parentName:"li"},"rage clicks")," in games, when fast repeated user interaction is normal."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("em",{parentName:"li"},"touch events")," over custom keyboards or similar controls, that may reveal sensitive information."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("em",{parentName:"li"},"detected navigation events")," in apps generated by tools like React Native, where generated screen identifiers make no obvious sense and repeat themselves.")),Object(o.b)("p",null,"Smartlook offers several event tracking modes that can be combined:"),Object(o.b)("ul",null,Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Full tracking"),": this a default state. SDK tracks all automatically detected events along with all user defined events."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Ignore User Interaction"),": disables automatically detected selector (click on a ",Object(o.b)("inlineCode",{parentName:"li"},"View"),"), focus, touch, gesture, and keyboard events."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Ignore Navigation Interaction"),": disables automatically detected navigation events. User defined ones are still being sent."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"Ignore Rage ClicksEvents"),": disables automatic detection and tracking of rage click events."),Object(o.b)("li",{parentName:"ul"},Object(o.b)("strong",{parentName:"li"},"No Tracking"),": no automatically detected events are tracked. Only user defined events are still tracked.")),Object(o.b)(s.j,{mdxType:"TextBlock"},'\n<Link to="/docs/sdk/api-reference#event-tracking-modes">API Reference</Link>.\n'))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/conceptual/event-tracking.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-conceptual-event-tracking-mdx-e1a14dfd28333daa844b.js.map