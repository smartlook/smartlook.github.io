{"version":3,"sources":["webpack:///../src/integrations/firebase-crashlytics-integration.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","kind","snippets","android","java","kotlin","cocos","cordova","javascript","ionic","typescript","ios","swift","flutter","dart","unity","csharp","react","parentName","invisibleOn","visibleOn","isMDXComponent"],"mappings":"oQAOaA,G,UAAe,S,uOAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,IAAD,CAAOA,QAAQ,SAAf,oCACA,iBAAQ,CACN,GAAM,yBADR,yBAGA,2GACA,YAAC,IAAD,CAAWC,KAAK,UAAUC,SAAU,CAClCC,QAAS,CACPC,KAAM,+CAGNC,OAAQ,+CAIVC,MAAO,CACLF,KAAM,+CAGNC,OAAQ,+CAIVE,QAAS,CACPC,WAAY,6CAIdC,MAAO,CACLC,WAAY,6CAIdC,IAAK,CACHC,MAAO,kFAGP,4HAIFC,QAAS,CACPC,KAAM,gDAIRC,MAAO,CACLC,OAAQ,yDAIVC,MAAO,CACLT,WAAY,iDAIbR,QAAQ,cACX,6EAA4D,0BAAYkB,WAAW,KAAvB,yBAA5D,8HACA,iBAAQ,CACN,GAAM,sBADR,sBAGA,YAAC,IAAD,CAAWC,YAAY,MAAMnB,QAAQ,aAArC,oFAGA,YAAC,IAAD,CAAWoB,UAAU,MAAMpB,QAAQ,aAAnC,8EAGA,YAAC,IAAD,CAAWC,KAAK,UAAUC,SAAU,CAClCC,QAAS,CACPC,KAAM,6dAYNC,OAAQ,kbAWVC,MAAO,CACLF,KAAM,6dAYNC,OAAQ,kbAWVE,QAAS,CACPC,WAAY,6CAIdC,MAAO,CACLC,WAAY,6CAIdC,IAAK,CACHC,MAAO,+nBAYP,qzBAeFC,QAAS,CACPC,KAAM,sgBAcRC,MAAO,CACLC,OAAQ,2eAeVC,MAAO,CACLT,WAAY,kZAgBbR,QAAQ,cACX,YAAC,IAAD,CAAWC,KAAK,OAAOD,QAAQ,aAA/B,2I,qOAOJH,EAAWwB,gBAAiB","file":"component---src-integrations-firebase-crashlytics-integration-mdx-5c06fed416425955eb25.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/smartlook.github.io/smartlook.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { CodeBlock, TextBlock, Title } from \"components\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Title mdxType=\"Title\">Firebase Crahslytics integration</Title>\n    <h2 {...{\n      \"id\": \"automatic-integration\"\n    }}>{`Automatic integration`}</h2>\n    <p>{`Smartlook can be auto-integrated into you projectâ€™s crashlytics simply by calling:`}</p>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\nSmartlook.enableCrashlytics(true);\n      `,\n        kotlin: `\nSmartlook.enableCrashlytics(true)\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.enableCrashlytics(true);\n      `,\n        kotlin: `\nSmartlook.enableCrashlytics(true)\n      `\n      },\n      cordova: {\n        javascript: `\nNot available on this platform.\n      `\n      },\n      ionic: {\n        typescript: `\nNot available on this platform.\n      `\n      },\n      ios: {\n        swift: `\nSmartlook.setup(key:\"THE_API_KEY\", options:[.enableCrashytics: true])\n      `,\n        'objective-c': `\n[Smartlook startWithKey:@\"THE_API_KEY\" withOptions:@{ SLSetupOptionEnableCrashyticsKey:@YES } ];\n      `\n      },\n      flutter: {\n        dart: `\nSmartlook.enableCrashlytics(true);\n      `\n      },\n      unity: {\n        csharp: `\nSmartlookUnity.Smartlook.EnableCrashlytics(true);\n`\n      },\n      react: {\n        javascript: `\nSmartlook.enableCrashlytics(true);\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <p>{`Then in Crashlytics dashboard, there should be a new `}<inlineCode parentName=\"p\">{`Smartlook session URL`}</inlineCode>{` key-value pair with link to your Smartlook dashboard. Once opened, you can directly play recording just before the crash.`}</p>\n    <h2 {...{\n      \"id\": \"manual-integration\"\n    }}>{`Manual integration`}</h2>\n    <TextBlock invisibleOn='ios' mdxType=\"TextBlock\">\nSmartlook can be easily integrated into Crashlytics using `IntegrationListener`:\n    </TextBlock>\n    <TextBlock visibleOn='ios' mdxType=\"TextBlock\">\nSmartlook can be easily integrated into Crashlytics using `Notifications`:\n    </TextBlock>\n    <CodeBlock kind=\"example\" snippets={{\n      android: {\n        java: `\nSmartlook.registerIntegrationListener(new IntegrationListener() {\n    @Override\n    public void onSessionReady(@NotNull String dashboardSessionUrl) {\n        FirebaseCrashlytics.getInstance().setCustomKey(\"Smartlook session URL\", dashboardSessionUrl);\n    }\\n\n    @Override\n    public void onVisitorReady(@NotNull String dashboardVisitorUrl) {\n        FirebaseCrashlytics.getInstance().setCustomKey(\"Smartlook visitor URL\", dashboardVisitorUrl);\n    }\n});\n      `,\n        kotlin: `\nSmartlook.registerIntegrationListener(object : IntegrationListener {\n    override fun onSessionReady(dashboardSessionUrl: String) {\n        FirebaseCrashlytics.getInstance().setCustomKey(\"Smartlook session URL\", dashboardSessionUrl)\n    }\\n\n    override fun onVisitorReady(dashboardVisitorUrl: String) {\n        FirebaseCrashlytics.getInstance().setCustomKey(\"Smartlook visitor URL\", dashboardVisitorUrl)\n    }\n})\n      `\n      },\n      cocos: {\n        java: `\nSmartlook.registerIntegrationListener(new IntegrationListener() {\n    @Override\n    public void onSessionReady(@NotNull String dashboardSessionUrl) {\n        FirebaseCrashlytics.getInstance().setCustomKey(\"Smartlook session URL\", dashboardSessionUrl);\n    }\\n\n    @Override\n    public void onVisitorReady(@NotNull String dashboardVisitorUrl) {\n        FirebaseCrashlytics.getInstance().setCustomKey(\"Smartlook visitor URL\", dashboardVisitorUrl);\n    }\n});\n      `,\n        kotlin: `\nSmartlook.registerIntegrationListener(object : IntegrationListener {\n    override fun onSessionReady(dashboardSessionUrl: String) {\n        FirebaseCrashlytics.getInstance().setCustomKey(\"Smartlook session URL\", dashboardSessionUrl)\n    }\\n\n    override fun onVisitorReady(dashboardVisitorUrl: String) {\n        FirebaseCrashlytics.getInstance().setCustomKey(\"Smartlook visitor URL\", dashboardVisitorUrl)\n    }\n})\n      `\n      },\n      cordova: {\n        javascript: `\nNot available on this platform.\n      `\n      },\n      ionic: {\n        typescript: `\nNot available on this platform.\n      `\n      },\n      ios: {\n        swift: `\nNotificationCenter.default.addObserver(forName: Smartlook.dashboardSessionURLChanged, object: nil, queue: nil) { (note) in\n  if let currentSessionUrl = Smartlook.getDashboardSessionURL(withCurrentTimestamp: false) {\n        Crashlytics.crashlytics().setCustomValue(currentSessionUrl, forKey: \"Smartlook session URL\")\n  }\n};\\n\nNotificationCenter.default.addObserver(forName: Smartlook.dashboardVisitorURLChanged, object: nil, queue: nil) { (note) in\n  if let currentVisitorUrl = Smartlook.getDashboardVisitorURL() {\n    Crashlytics.crashlytics().setCustomValue(currentVisitorUrl, forKey: \"Smartlook visitor URL\")\n  }\n}\n      `,\n        'objective-c': `\n[[NSNotificationCenter defaultCenter] addObserverForName:SLDashboardSessionURLChangedNotification object:nil queue:nil usingBlock:^(NSNotification * _Nonnull note) {\n    NSURL *currentSessionURL = [Smartlook getDashboardSessionURLWithCurrentTimestamp:NO];\n    if (currentSessionURL != nil) {\n        [[FIRCrashlytics crashlytics] setCustomValue:currentSessionURL forKey:@\"session_url\"];\n    }\n}];\\n\n[[NSNotificationCenter defaultCenter] addObserverForName:SLDashboardVisitorURLChangedNotification object:nil queue:nil usingBlock:^(NSNotification * _Nonnull note) {\n    NSURL *currentVisitorURL = [Smartlook getDashboardVisitorURL];\n    if (currentVisitorURL != nil) {\n        [[FIRCrashlytics crashlytics] setCustomValue:currentVisitorURL forKey:@\"smartlook_visitor_url\"];\n    }\n}];\n      `\n      },\n      flutter: {\n        dart: `\nclass CustomIntegrationListener implements IntegrationListener {\n  void onSessionReady(String dashboardSessionUrl) {\n    // Flutter bridge is limited regarding the Crashlytics API so feel free to use whatever is the best choice for you\n  }\n\\n\n  void onVisitorReady(String dashboardVisitorUrl) {\n    // Flutter bridge is limited regarding the Crashlytics API so feel free to use whatever is the best choice for you\n  }\n}\n\\n\nSmartlook.registerIntegrationListener(new CustomIntegrationListener());\n      `\n      },\n      unity: {\n        csharp: `\npublic class IntegrationListener : SmartlookUnity.IntegrationListener\n{\n    public override void onSessionReady(string dashboardSessionUrl)\n    {\n        Crashlytics.SetCustomKey('dashboardSessionUrl', dashboardSessionUrl);\n    }\n    public override void onVisitorReady(string dashboardVisitorUrl)\n    {\n        Crashlytics.SetCustomKey('dashboardVisitorUrl', dashboardVisitorUrl);\n    }\n}\\n\nSmartlookUnity.Smartlook.RegisterIntegrationListener(new IntegrationListener());\n`\n      },\n      react: {\n        javascript: `\nSmartlook.registerIntegrationListener({\n  onSessionReady: function (dashboardSessionUrl) {\n    await Promise.all([\n      crashlytics().setAttribute('dashboardSessionUrl', dashboardSessionUrl)\n    ]);\n);\n  },\n  onVisitorReady: function (dashboardVisitorUrl) {\n    await Promise.all([\n      crashlytics().setAttribute('dashboardVisitorUrl', dashboardVisitorUrl)\n    ]);\n  }\n});\n      `\n      }\n    }} mdxType=\"CodeBlock\" />\n    <TextBlock kind=\"note\" mdxType=\"TextBlock\">{`\nFull Firebase Crashlytics documentation can be found on the [official website](https://firebase.google.com/docs/crashlytics).\n`}</TextBlock>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}