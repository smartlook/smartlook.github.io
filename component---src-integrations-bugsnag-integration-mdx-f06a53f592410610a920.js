(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{BK0W:function(n,t,e){"use strict";e.r(t),e.d(t,"_frontmatter",(function(){return c})),e.d(t,"default",(function(){return u}));var a=e("Fcif"),o=e("+I+c"),r=(e("mXGw"),e("/FXl")),i=e("TjRS"),s=e("+8zC"),d=e("Mxwo"),l=e.n(d),c=(e("aD51"),{});void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/integrations/bugsnag-integration.mdx"}});var b={_frontmatter:c},g=i.a;function u(n){var t=n.components,e=Object(o.a)(n,["components"]);return Object(r.b)(g,Object(a.a)({},b,e,{components:t,mdxType:"MDXLayout"}),Object(r.b)(s.l,{mdxType:"Title"},"Bugsnag integration"),Object(r.b)(s.k,{visibleOn:"android",mdxType:"TextBlock"},"\n## Automatic integration\nSmartlook can be automatically integrated into Bugsnag like this:\n"),Object(r.b)(s.c,{kind:"example",snippets:{android:{java:"\nBugsnag.start(this);\n...\nSmartlook.enableIntegration(new BugsnagIntegration());\n      ",kotlin:"\nBugsnag.start(this)\n...\nSmartlook.enableIntegration(BugsnagIntegration())\n      "}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{visibleOn:"android",mdxType:"TextBlock"},"\nThe Smartlook session URL can be seen in the `Smartlook` section inside every crash report.\n"),Object(r.b)("img",{visibleOn:"android",src:l.a}),Object(r.b)("h2",{id:"manual-integration"},"Manual integration"),Object(r.b)(s.k,{invisibleOn:"ios,xamarin",mdxType:"TextBlock"},"Smartlook can be easily integrated into Bugsnag using `OnErrorCallback`:"),Object(r.b)(s.c,{kind:"example",snippets:{android:{java:'\nOnErrorCallback errorCallback = event -> {\n    event.addMetadata("Smartlook", "Dashboard session URL", Smartlook.getDashboardSessionUrl(true));\n    return true;\n};\n\nBugsnag.addOnError(errorCallback);\n      ',kotlin:'\nval errorCallback = OnErrorCallback { event ->\n    event.addMetadata("Smartlook", "Dashboard session URL", Smartlook.getDashboardSessionUrl(true))\n    true //report this error\n}\n\nBugsnag.addOnError(errorCallback)\n      '},cocos:{java:'\nOnErrorCallback errorCallback = event -> {\n    event.addMetadata("Smartlook", "Dashboard session URL", Smartlook.getDashboardSessionUrl(true));\n    return true;\n};\n\nBugsnag.addOnError(errorCallback);\n      ',kotlin:'\nval errorCallback = OnErrorCallback { event ->\n    event.addMetadata("Smartlook", "Dashboard session URL", Smartlook.getDashboardSessionUrl(true))\n    true //report this error\n}\n\nBugsnag.addOnError(errorCallback)\n      '},cordova:{javascript:"\nBugsnag.start({onError: function (event) {\n        Smartlook.getDashboardSessionUrl({withCurrentTimestamp: true},\n        function (dashboardSessionUrl) {\n            event.addMetadata('Smartlook', {\"Dashboard session URL\": dashboardSessionUrl});\n        });\n    }\n});\n      "},ionic:{typescript:"\nBugsnag.start({onError: function (event) {\n        Smartlook.getDashboardSessionUrl({withCurrentTimestamp: true},\n        function (dashboardSessionUrl) {\n            event.addMetadata('Smartlook', {\"Dashboard session URL\": dashboardSessionUrl});\n        });\n    }\n});\n      "},ios:{swift:'\nlet config = BugsnagConfiguration.loadConfig()\nconfig.addOnSendError { (event) -> Bool in\n    event.addMetadata(    Smartlook.getDashboardSessionURL(withCurrentTimestamp: true), key:"Smartlook dashboard session URL")\n    return true\n}\nBugsnag.start(with: config)\n      ',"objective-c":'\nBugsnagConfiguration *config = [BugsnagConfiguration loadConfig];\n[config addOnSendErrorBlock:^BOOL (BugsnagEvent *event) {\n  [event addMetadata:[Smartlook getDashboardSessionURLWithCurrentTimestamp:YES] withKey:@"Smartlook dashboard session URL"];\n  return YES;\n}];\n[Bugsnag startWithConfiguration:config];\n      '},flutter:{dart:"\ntodo\n      "},unity:{csharp:"\ntodo\n"},react:{javascript:"\nBugsnag.start({onError: function (event) {\n        Smartlook.getDashboardSessionUrl({withCurrentTimestamp: true},\n        function (dashboardSessionUrl) {\n            event.addMetadata('Smartlook', {\"Dashboard session URL\": dashboardSessionUrl});\n        });\n    }\n});\n"}},mdxType:"CodeBlock"}),Object(r.b)(s.k,{kind:"note",visibleOn:"android",mdxType:"TextBlock"},"\nFull Bugsnag documentation with examples can be found on the [official website](https://docs.bugsnag.com/platforms/android/).\n"),Object(r.b)(s.k,{kind:"note",visibleOn:"unity",mdxType:"TextBlock"},"\nFull Bugsnag documentation with examples can be found on the [official website](https://docs.bugsnag.com/platforms/unity/).\n"),Object(r.b)(s.k,{kind:"note",visibleOn:"ios",mdxType:"TextBlock"},"\nFull Bugsnag documentation with examples can be found on the [official website](https://docs.bugsnag.com/platforms/ios/).\n"),Object(r.b)(s.k,{kind:"note",visibleOn:"cocos",mdxType:"TextBlock"},"\nFull Bugsnag documentation with examples can be found on the [official website](https://docs.bugsnag.com/platforms/cocos2dx/).\n"),Object(r.b)(s.k,{kind:"note",visibleOn:"cordova,ionic,react",mdxType:"TextBlock"},"\nFull Bugsnag documentation with examples can be found on the [official website](https://docs.bugsnag.com/platforms/javascript/).\n"),Object(r.b)(s.k,{invisibleOn:"android,ios",mdxType:"TextBlock"},"\n## Automatic integration\nAutomatic Bugsnag integration coming soon.\n"))}void 0!==u&&u&&u===Object(u)&&Object.isExtensible(u)&&!u.hasOwnProperty("__filemeta")&&Object.defineProperty(u,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/integrations/bugsnag-integration.mdx"}}),u.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-integrations-bugsnag-integration-mdx-f06a53f592410610a920.js.map