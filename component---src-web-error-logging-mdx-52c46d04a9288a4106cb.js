(window.webpackJsonp=window.webpackJsonp||[]).push([[49],{kNxe:function(e,r,o){"use strict";o.r(r),o.d(r,"_frontmatter",(function(){return c})),o.d(r,"default",(function(){return p}));var t=o("Fcif"),n=o("+I+c"),s=(o("mXGw"),o("/FXl")),i=o("TjRS"),a=o("+8zC"),c=(o("aD51"),{});void 0!==c&&c&&c===Object(c)&&Object.isExtensible(c)&&!c.hasOwnProperty("__filemeta")&&Object.defineProperty(c,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/web/error-logging.mdx"}});var l={_frontmatter:c},b=i.a;function p(e){var r=e.components,o=Object(n.a)(e,["components"]);return Object(s.b)(b,Object(t.a)({},l,o,{components:r,mdxType:"MDXLayout"}),Object(s.b)(a.k,{mdxType:"Title"},"Error logging"),Object(s.b)(a.i,{mdxType:"Subtitle"},"Automatic and custom error logging"),Object(s.b)("p",null,"Smartlook automatically catches all unhandled Javascript errors."),Object(s.b)("p",null,"Though, Smartlook cannot log the precise error message if the error is from a script that has different origin. This is known as a CORS error.\nCORS is short for “Cross Origin Resource Sharing”, and it’s a set of APIs (mostly HTTP headers) that dictate how files ought to be handled when used from a different origin (domain)."),Object(s.b)("p",null,"When a CORS error occurs in Smartlook’s Javascript console you’ll see a message:"),Object(s.b)("p",null,Object(s.b)("inlineCode",{parentName:"p"},"Cross-origin error - look at https://smartlook.github.io/docs/web/error-logging/ for more info.")),Object(s.b)("h2",{id:"fixing-the-cors-errors"},"Fixing the CORS errors"),Object(s.b)("p",null,"To fix the CORS error you have to:"),Object(s.b)("p",null,"1) Add a ",Object(s.b)("inlineCode",{parentName:"p"},'crossorigin="anonymous"')," script attribute"),Object(s.b)(a.b,{kind:"example",snippets:{html:'\n<script src="http://different-domain.com/script.js" crossorigin="anonymous"><\/script>\n'},mdxType:"Code"}),Object(s.b)("p",null,"2) Add a Cross Origin HTTP header"),Object(s.b)(a.b,{kind:"example",snippets:{html:"\nAccess-Control-Allow-Origin: *\n"},mdxType:"Code"}),Object(s.b)("p",null,"You can use Smartlook’s Custom Errors API (see below) if you cant fix the CORS errors."),Object(s.b)("h2",{id:"custom-errors"},"Custom errors"),Object(s.b)("p",null,"With the Custom Errors API, you can customize how Smartlook log errors that had been handled in your application in any way you wish."),Object(s.b)("p",null,"You can then use these logs in Smartlook analytics and session replay to visualize and understand where the errors you’ve logged occured."),Object(s.b)("p",null,"Custom Errors API is used as follows:"),Object(s.b)(a.b,{kind:"example",snippets:{javascript:"\n<script>\n  smartlook('error', errorArg);\n<\/script>\n"},mdxType:"Code"}),Object(s.b)("p",null,"Where ",Object(s.b)("inlineCode",{parentName:"p"},"errorArg")," could be either an instance of Error object or simple string message."),Object(s.b)("h2",{id:"example-usage"},"Example usage"),Object(s.b)(a.b,{kind:"example",snippets:{javascript:"\n<script>\n  try {\n    // ...custom code\n  } catch (e) {\n    // ...custom code that handles the error\n\n    // log error using Smartlook API\n    smartlook('error', e);\n  }\n<\/script>\n"},mdxType:"Code"}),Object(s.b)(a.b,{kind:"example",snippets:{javascript:"\n<script>\n  // ...custom code\n\n  // log some unexpected behaviour using Smartlook API\n  smartlook('error', 'calendar showing bad week');\n<\/script>\n"},mdxType:"Code"}))}void 0!==p&&p&&p===Object(p)&&Object.isExtensible(p)&&!p.hasOwnProperty("__filemeta")&&Object.defineProperty(p,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/web/error-logging.mdx"}}),p.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-web-error-logging-mdx-52c46d04a9288a4106cb.js.map