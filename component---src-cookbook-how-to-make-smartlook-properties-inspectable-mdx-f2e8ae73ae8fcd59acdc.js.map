{"version":3,"sources":["webpack:///../src/cookbook/how-to-make-smartlook-properties-inspectable.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","kind","parentName","snippets","swift","isMDXComponent"],"mappings":"oQAOaA,G,UAAe,S,+OAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,IAAD,CAAOA,QAAQ,SAAf,2DACA,YAAC,IAAD,CAAWC,KAAK,YAAYD,QAAQ,aAApC,8EAGA,gJACA,uIAAsH,0BAAYE,WAAW,KAAvB,iBAAtH,kCACA,0LAAyK,0BAAYA,WAAW,KAAvB,UAAzK,eACA,YAAC,IAAD,CAAMC,SAAU,CACdC,MAAO,iKAONJ,QAAQ,SACX,iGAAgF,0BAAYE,WAAW,KAAvB,eAAhF,8DAAsM,0BAAYA,WAAW,KAAvB,sBAAtM,qH,6OAKJL,EAAWQ,gBAAiB","file":"component---src-cookbook-how-to-make-smartlook-properties-inspectable-mdx-f2e8ae73ae8fcd59acdc.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/smartlook.github.io/smartlook.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Title, TextBlock, Code } from 'components';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Title mdxType=\"Title\">Making Smartlook UIView Properties Inspectable in Xcode</Title>\n    <TextBlock kind=\"important\" mdxType=\"TextBlock\">{`\nThis guide applies to all frameworks that use Xcode Interface Builder.\n`}</TextBlock>\n    <p>{`Inspectable properties of visual elements used in Xcode Design Builder enable quick code-less editing of their values. `}</p>\n    <p>{`Unfortunatelly, properties exported from an external framework like Smartlook cannot be directly attributed as `}<inlineCode parentName=\"p\">{`IBInspectable`}</inlineCode>{` to enable this functionality.`}</p>\n    <p>{`There is, however, a neat straigthforward workaround to enable this functionality by wrapping the Smartlook properties in own inspectable properties via a custom `}<inlineCode parentName=\"p\">{`UIView`}</inlineCode>{` extension:`}</p>\n    <Code snippets={{\n      swift: `\nextension UIView {\n    @IBInspectable var smartlookSensitive: Bool {\n        get { return slSensitive }\n        set { slSensitive = newValue }\n    }\n}`\n    }} mdxType=\"Code\" />\n    <p>{`By adding this code to your app, a wrapper is created around Smartlook's `}<inlineCode parentName=\"p\">{`slSensitive`}</inlineCode>{` property that publishes its value to Interface Builder as `}<inlineCode parentName=\"p\">{`smartlookSensitive`}</inlineCode>{`. You can indeed use another name for the new inspectable property so it fits your code naming conventions.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}