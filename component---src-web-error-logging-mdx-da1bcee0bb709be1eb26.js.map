{"version":3,"sources":["webpack:///../src/web/error-logging.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","parentName","kind","snippets","html","javascript","isMDXComponent"],"mappings":"oQASaA,G,UAAe,S,2MAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAI5E,YAAC,IAAD,CAAOA,QAAQ,SAAf,iBACA,YAAC,IAAD,CAAUA,QAAQ,YAAlB,sCACA,yFACA,+VAEA,yGACA,qBAAG,0BAAYC,WAAW,KAAvB,oGACH,kBACE,GAAM,0BADR,0BAGA,2DACA,iCAAgB,0BAAYA,WAAW,KAAvB,2BAAhB,qBACA,YAAC,IAAD,CAAMC,KAAK,UAAUC,SAAU,CAC7BC,KAAM,8FAGLJ,QAAQ,SACX,0DACA,YAAC,IAAD,CAAME,KAAK,UAAUC,SAAU,CAC7BC,KAAM,sCAGLJ,QAAQ,SACX,+GACA,kBACE,GAAM,iBADR,iBAGA,8JACA,kKACA,8DACA,YAAC,IAAD,CAAME,KAAK,UAAUC,SAAU,CAC7BE,WAAY,6DAKXL,QAAQ,SACX,8BAAa,0BAAYC,WAAW,KAAvB,YAAb,0EACA,kBACE,GAAM,iBADR,iBAGA,YAAC,IAAD,CAAMC,KAAK,UAAUC,SAAU,CAC7BE,WAAY,oMAWXL,QAAQ,SACX,YAAC,IAAD,CAAME,KAAK,UAAUC,SAAU,CAC7BE,WAAY,+JAOXL,QAAQ,e,yMAKfH,EAAWS,gBAAiB","file":"component---src-web-error-logging-mdx-da1bcee0bb709be1eb26.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/smartlook.github.io/smartlook.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Code, CodeBlock, TextBlock, Link, Title, Subtitle } from \"components\";\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n    <Title mdxType=\"Title\">Error logging</Title>\n    <Subtitle mdxType=\"Subtitle\">Automatic and custom error logging</Subtitle>\n    <p>{`Smartlook automatically catches all unhandled Javascript errors.`}</p>\n    <p>{`Though, Smartlook cannot log the precise error message if the error is from a script that has different origin. This is known as a CORS error.\nCORS is short for “Cross Origin Resource Sharing”, and it’s a set of APIs (mostly HTTP headers) that dictate how files ought to be handled when used from a different origin (domain).`}</p>\n    <p>{`When a CORS error occurs in Smartlook’s Javascript console you’ll see a message:`}</p>\n    <p><inlineCode parentName=\"p\">{`Cross-origin error - look at https://smartlook.github.io/docs/web/error-logging/ for more info.`}</inlineCode></p>\n    <h2 {...{\n      \"id\": \"fixing-the-cors-errors\"\n    }}>{`Fixing the CORS errors`}</h2>\n    <p>{`To fix the CORS error you have to:`}</p>\n    <p>{`1) Add a `}<inlineCode parentName=\"p\">{`crossorigin=\"anonymous\"`}</inlineCode>{` script attribute`}</p>\n    <Code kind=\"example\" snippets={{\n      html: `\n<script src=\"http://different-domain.com/script.js\" crossorigin=\"anonymous\"></script>\n`\n    }} mdxType=\"Code\" />\n    <p>{`2) Add a Cross Origin HTTP header`}</p>\n    <Code kind=\"example\" snippets={{\n      html: `\nAccess-Control-Allow-Origin: *\n`\n    }} mdxType=\"Code\" />\n    <p>{`You can use Smartlook’s Custom Errors API (see below) if you cant fix the CORS errors.`}</p>\n    <h2 {...{\n      \"id\": \"custom-errors\"\n    }}>{`Custom errors`}</h2>\n    <p>{`With the Custom Errors API, you can customize how Smartlook log errors that had been handled in your application in any way you wish.`}</p>\n    <p>{`You can then use these logs in Smartlook analytics and session replay to visualize and understand where the errors you’ve logged occured.`}</p>\n    <p>{`Custom Errors API is used as follows:`}</p>\n    <Code kind=\"example\" snippets={{\n      javascript: `\n<script>\n  smartlook('error', errorArg);\n</script>\n`\n    }} mdxType=\"Code\" />\n    <p>{`Where `}<inlineCode parentName=\"p\">{`errorArg`}</inlineCode>{` could be either an instance of Error object or simple string message.`}</p>\n    <h2 {...{\n      \"id\": \"example-usage\"\n    }}>{`Example usage`}</h2>\n    <Code kind=\"example\" snippets={{\n      javascript: `\n<script>\n  try {\n    // ...custom code\n  } catch (e) {\n    // ...custom code that handles the error\\n\n    // log error using Smartlook API\n    smartlook('error', e);\n  }\n</script>\n`\n    }} mdxType=\"Code\" />\n    <Code kind=\"example\" snippets={{\n      javascript: `\n<script>\n  // ...custom code\\n\n  // log some unexpected behaviour using Smartlook API\n  smartlook('error', 'calendar showing bad week');\n</script>\n`\n    }} mdxType=\"Code\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}