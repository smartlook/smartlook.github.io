{"version":3,"sources":["webpack:///../src/cookbook/secure_custom_keyboard.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","kind","invisibleOn","src","pin_code_screen","parentName","snippets","java","kotlin","pin_code_screen_no_rendering","isMDXComponent"],"mappings":"4TAUaA,G,UAAe,S,yNAC5B,IAAMC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,eAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAK5E,YAAC,IAAD,CAAWC,KAAK,YAAYC,YAAY,UAAUF,QAAQ,aAA1D,iHAGA,YAAC,IAAD,CAAOA,QAAQ,SAAf,0BACA,wMAEA,mBAAKG,IAAKC,MACV,4EAA2D,0BAAYC,WAAW,KAAvB,8BAA3D,KACA,YAAC,IAAD,CAAMC,SAAU,CACdC,KAAM,8DAGNC,OAAQ,+DAGPR,QAAQ,SACX,8JACA,sBACE,kBAAIK,WAAW,MAAf,+CACA,kBAAIA,WAAW,MAAf,gFAEF,qBAAG,sBAAQA,WAAW,KAAnB,yCAAH,qIACA,mBAAKF,IAAKM,MACV,YAAC,IAAD,CAAWR,KAAK,OAAOD,QAAQ,aAA/B,mHAGA,oGAAmF,0BAAYK,WAAW,KAAvB,6CAAnF,KACA,YAAC,IAAD,CAAMC,SAAU,CACdC,KAAM,iFAGNC,OAAQ,kFAGPR,QAAQ,SACX,oHACA,qJACA,YAAC,IAAD,CAAMM,SAAU,CACdC,KAAM,0HAINC,OAAQ,2HAIPR,QAAQ,e,uNAKfH,EAAWa,gBAAiB","file":"component---src-cookbook-secure-custom-keyboard-mdx-eadda4e95e1fc097aedd.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/home/runner/work/smartlook.github.io/smartlook.github.io/node_modules/gatsby-theme-docz/src/base/Layout.js\";\nimport { Code, TextBlock, Title } from 'components';\nimport { usePlatforms } from 'hooks';\nimport pin_code_screen from 'assets/pin_code_screen.png';\nimport pin_code_screen_no_rendering from 'assets/pin_code_screen_no_rendering.png';\nexport const _frontmatter = {};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n\n\n    <TextBlock kind=\"important\" invisibleOn=\"android\" mdxType=\"TextBlock\">{`\nCode samples in this guide are written in Java/Kotlin but the principles are applicable on all platforms.\n`}</TextBlock>\n    <Title mdxType=\"Title\">Secure custom keyboard</Title>\n    <p>{`Some applications use non-native keyboards, typically for entering pin codes, etc.\nThis can lead to recording of sensitive data as we are gonna demonstrate by simple example.`}</p>\n    <img src={pin_code_screen} />\n    <p>{`For this screen we need to change rendering mode to `}<inlineCode parentName=\"p\">{`RenderingMode.NO_RENDERING`}</inlineCode>{`:`}</p>\n    <Code snippets={{\n      java: `\nSmartlook.setRenderingMode(RenderingMode.NO_RENDERING);\n`,\n      kotlin: `\nSmartlook.setRenderingMode(RenderingMode.NO_RENDERING);\n`\n    }} mdxType=\"Code\" />\n    <p>{`By doing this we will ensure the SDK will not record the pin when the user enters it into the application. The visual clues might be:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Number buttons have a hover effect on them.`}</li>\n      <li parentName=\"ul\">{`Numbers might be visible for a small period of time after they are entered.`}</li>\n    </ul>\n    <p><strong parentName=\"p\">{`Setting rendering mode is not enough!`}</strong>{` SDK automatically tracks touch events, so even with blank video, we can clearly see where the user is touching on the recording.`}</p>\n    <img src={pin_code_screen_no_rendering} />\n    <TextBlock kind=\"note\" mdxType=\"TextBlock\">{`\nSDK does not record touches on native keyboard, so there is no risk of leaking any sensitive data this way.\n`}</TextBlock>\n    <p>{`Automatic touch detection can be disabled by setting event tracking mode to `}<inlineCode parentName=\"p\">{`EventTrackingMode.IGNORE_USER_INTERACTION`}</inlineCode>{`:`}</p>\n    <Code snippets={{\n      java: `\nSmartlook.setEventTrackingMode(EventTrackingMode.IGNORE_USER_INTERACTION);\n`,\n      kotlin: `\nSmartlook.setEventTrackingMode(EventTrackingMode.IGNORE_USER_INTERACTION);\n`\n    }} mdxType=\"Code\" />\n    <p>{`After applying these two steps SDK will not record any sensitive data on this “pin” screen.`}</p>\n    <p>{`When your application is leaving this screen just set rendering mode and event tracking mode, back to your preferred values:`}</p>\n    <Code snippets={{\n      java: `\nSmartlook.setRenderingMode(RenderingMode.NATIVE);\nSmartlook.setEventTrackingMode(EventTrackingMode.FULL_TRACKING);\n`,\n      kotlin: `\nSmartlook.setRenderingMode(RenderingMode.NATIVE);\nSmartlook.setEventTrackingMode(EventTrackingMode.FULL_TRACKING);\n`\n    }} mdxType=\"Code\" />\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}