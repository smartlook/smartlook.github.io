(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{XRYq:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return l})),n.d(t,"default",(function(){return b}));var o=n("Fcif"),i=n("+I+c"),a=(n("mXGw"),n("/FXl")),r=n("TjRS"),s=n("+8zC"),l=(n("aD51"),{});void 0!==l&&l&&l===Object(l)&&Object.isExtensible(l)&&!l.hasOwnProperty("__filemeta")&&Object.defineProperty(l,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/cookbook/how-to-make-smartlook-properties-inspectable.mdx"}});var p={_frontmatter:l},c=r.a;function b(e){var t=e.components,n=Object(i.a)(e,["components"]);return Object(a.b)(c,Object(o.a)({},p,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)(s.k,{mdxType:"Title"},"Making Smartlook UIView Properties Inspectable in Xcode"),Object(a.b)(s.j,{kind:"important",mdxType:"TextBlock"},"\nThis guide applies to all frameworks that use the Xcode Interface Builder.\n"),Object(a.b)("p",null,"Inspectable properties of visual elements used in the Xcode Design Builder enable quick codeless editing of their values. "),Object(a.b)("p",null,"Unfortunately, properties exported from an external framework like Smartlook cannot be directly attributed as ",Object(a.b)("inlineCode",{parentName:"p"},"IBInspectable")," to enable this functionality."),Object(a.b)("p",null,"There is, however, a neat straightforward workaround to enable this functionality by wrapping the Smartlook properties in its own inspectable properties via a custom ",Object(a.b)("inlineCode",{parentName:"p"},"UIView")," extension:"),Object(a.b)(s.b,{snippets:{swift:"\nextension UIView {\n    @IBInspectable var smartlookSensitive: Bool {\n        get { return slSensitive }\n        set { slSensitive = newValue }\n    }\n}"},mdxType:"Code"}),Object(a.b)("p",null,"By adding this code to your app, a wrapper is created around Smartlook's ",Object(a.b)("inlineCode",{parentName:"p"},"slSensitive")," property that publishes its value to the Interface Builder as ",Object(a.b)("inlineCode",{parentName:"p"},"smartlookSensitive"),". You can indeed use another name for the new inspectable property so it fits your code naming conventions."))}void 0!==b&&b&&b===Object(b)&&Object.isExtensible(b)&&!b.hasOwnProperty("__filemeta")&&Object.defineProperty(b,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/cookbook/how-to-make-smartlook-properties-inspectable.mdx"}}),b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-cookbook-how-to-make-smartlook-properties-inspectable-mdx-bad620549796dfcc3dc3.js.map