(window.webpackJsonp=window.webpackJsonp||[]).push([[26],{"7qIa":function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return m})),n.d(t,"default",(function(){return k}));var o=n("Fcif"),i=n("+I+c"),a=(n("mXGw"),n("/FXl")),r=n("TjRS"),c=n("+8zC"),s=(n("NRsk"),n("II6R")),d=n.n(s),l=n("jN6t"),b=n.n(l),p=(n("aD51"),["components"]),m={};void 0!==m&&m&&m===Object(m)&&Object.isExtensible(m)&&!Object.prototype.hasOwnProperty.call(m,"__filemeta")&&Object.defineProperty(m,"__filemeta",{configurable:!0,value:{name:"_frontmatter",filename:"src/cookbook/secure_custom_keyboard.mdx"}});var u={_frontmatter:m},g=r.a;function k(e){var t=e.components,n=Object(i.a)(e,p);return Object(a.b)(g,Object(o.a)({},u,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)(c.k,{kind:"important",invisibleOn:"android",mdxType:"TextBlock"},"\nCode samples in this guide are written in Java/Kotlin but the principles are applicable on all platforms.\n"),Object(a.b)(c.l,{mdxType:"Title"},"Secure custom keyboard"),Object(a.b)("p",null,"Some applications use non-native keyboards, typically for entering pin codes, etc. This can lead to the recording of sensitive data as we are going to demonstrate by this simple example."),Object(a.b)(c.d,{src:d.a,alt:"Pin code screen",mdxType:"Image"}),Object(a.b)("p",null,"For this screen, we need to change the rendering mode to ",Object(a.b)("inlineCode",{parentName:"p"},"RenderingMode.NO_RENDERING"),":"),Object(a.b)(c.b,{snippets:{java:"\nSmartlook.setRenderingMode(RenderingMode.NO_RENDERING);\n",kotlin:"\nSmartlook.setRenderingMode(RenderingMode.NO_RENDERING);\n"},mdxType:"Code"}),Object(a.b)("p",null,"By doing this we will ensure the SDK will not record the pin when the user enters it into the application. The visual clues might be the following:"),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Number buttons have a hover effect on them."),Object(a.b)("li",{parentName:"ul"},"Numbers might be visible for a small period of time after they are entered.")),Object(a.b)("p",null,Object(a.b)("strong",{parentName:"p"},"Setting rendering mode is not enough!")," SDK automatically tracks touch events, so even with blank video, we can clearly see where the user is touching on the recording."),Object(a.b)(c.d,{src:b.a,alt:"Pin code screen no rendering",mdxType:"Image"}),Object(a.b)(c.k,{kind:"note",mdxType:"TextBlock"},"\nSDK does not record touches on native keyboards, so there is no risk of leaking any sensitive data this way.\n"),Object(a.b)("p",null,"Automatic touch detection can be disabled by setting event tracking mode to ",Object(a.b)("inlineCode",{parentName:"p"},"EventTrackingMode.IGNORE_USER_INTERACTION"),":"),Object(a.b)(c.b,{snippets:{java:"\nSmartlook.setEventTrackingMode(EventTrackingMode.IGNORE_USER_INTERACTION);\n",kotlin:"\nSmartlook.setEventTrackingMode(EventTrackingMode.IGNORE_USER_INTERACTION);\n"},mdxType:"Code"}),Object(a.b)("p",null,"After applying these two steps, SDK will not record any sensitive data on this “pin” screen."),Object(a.b)("p",null,"When your application is leaving this screen, just set the rendering mode and event tracking mode, back to your preferred values:"),Object(a.b)(c.b,{snippets:{java:"\nSmartlook.setRenderingMode(RenderingMode.NATIVE);\nSmartlook.setEventTrackingMode(EventTrackingMode.FULL_TRACKING);\n",kotlin:"\nSmartlook.setRenderingMode(RenderingMode.NATIVE);\nSmartlook.setEventTrackingMode(EventTrackingMode.FULL_TRACKING);\n"},mdxType:"Code"}))}void 0!==k&&k&&k===Object(k)&&Object.isExtensible(k)&&!Object.prototype.hasOwnProperty.call(k,"__filemeta")&&Object.defineProperty(k,"__filemeta",{configurable:!0,value:{name:"MDXContent",filename:"src/cookbook/secure_custom_keyboard.mdx"}}),k.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-cookbook-secure-custom-keyboard-mdx-f47ffceb29f2bb39a941.js.map